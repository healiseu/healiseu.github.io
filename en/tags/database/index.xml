<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on HEALIS</title>
    <link>https://healis.eu/en/tags/database/</link>
    <description>Recent content in Database on HEALIS</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; HEALIS - Athanassios I. Hatzis, {year}</copyright>
    <lastBuildDate>Sat, 22 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://healis.eu/en/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HyperMorph</title>
      <link>https://healis.eu/en/project/hypermorph/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/hypermorph/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#why-hypermorph&#34;&gt;Why HyperMorph&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#not-just-another-etl-tool&#34;&gt;Not just another ETL tool&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#not-only-a-data-storage-and-transformations-analytics-tool&#34;&gt;Not only a data storage and transformations-analytics tool&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#more-promising-than-data-virtualization-and-cloud-analytics-services&#34;&gt;More promising than data virtualization and cloud analytics services&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#speechless-hypermorph-screencast&#34;&gt;Speechless HyperMorph Screencast&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#hypermorph-speaks-for-itself&#34;&gt;Hypermorph speaks for itself&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#now-you-know-that-you-can-&#34;&gt;Now you know that you can &amp;hellip;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#installation---demo-test---documentation&#34;&gt;Installation - Demo Test - Documentation&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#step-by-step-instructions&#34;&gt;Step by step instructions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#demo-guide-to-test-package&#34;&gt;Demo Guide to Test package&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;why-hypermorph&#34;&gt;Why HyperMorph&lt;/h2&gt;
&lt;h3 id=&#34;not-just-another-etl-tool&#34;&gt;Not just another ETL tool&lt;/h3&gt;
&lt;p&gt;There are many open-source tools written in Python for ETL or ELT process, &lt;a href=&#34;https://github.com/petl-developers/petl&#34;&gt;petl&lt;/a&gt;, &lt;a href=&#34;https://github.com/Stiivi/bubbles&#34;&gt;bubbles&lt;/a&gt;, &lt;a href=&#34;https://github.com/mara/mara-pipelines&#34;&gt;mara-pipelines&lt;/a&gt;, &lt;a href=&#34;https://github.com/mara/mara-schema&#34;&gt;mara-schema&lt;/a&gt;, &lt;a href=&#34;https://github.com/python-bonobo/bonobo&#34;&gt;bonobo&lt;/a&gt;, &lt;a href=&#34;https://github.com/spotify/luigi&#34;&gt;luigi&lt;/a&gt;, &lt;a href=&#34;https://github.com/blaze/odo&#34;&gt;odo&lt;/a&gt;, &lt;a href=&#34;https://github.com/seanharr11/etlalchemy&#34;&gt;etlalchemy&lt;/a&gt;, &lt;a href=&#34;https://github.com/ceumicrodata/mETL&#34;&gt;mETL&lt;/a&gt;, &lt;a href=&#34;https://github.com/nerevu/riko&#34;&gt;riko&lt;/a&gt;, &lt;a href=&#34;https://github.com/toaco/carry]&#34;&gt;carry&lt;/a&gt;, &lt;a href=&#34;https://github.com/capitalone/Data-Load-and-Copy-using-Python&#34;&gt;locopy&lt;/a&gt;, &lt;a href=&#34;https://github.com/ferventdesert/etlpy&#34;&gt;etlpy&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrthomsen/pygrametl&#34;&gt;pygrametl&lt;/a&gt;. Authors in many of these tools realized that Python developers need a uniform interface based on object oriented abstractions for commonly used operations.&lt;/p&gt;
&lt;h4 id=&#34;well-designed-powerful-oop-classes&#34;&gt;Well-designed powerful OOP classes&lt;/h4&gt;
&lt;p&gt;HyperMorph offers interactive console programming and development with high-level OOP components tailored to cover all aspects of database management and analytics. HyperMorph is very rich in that aspect and provides &lt;code&gt;DataSet&lt;/code&gt;, &lt;code&gt;Table&lt;/code&gt; and &lt;code&gt;Field&lt;/code&gt; classes for data resources, &lt;code&gt;DataModel&lt;/code&gt;, &lt;code&gt;Entity&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; classes for data models, &lt;code&gt;SchemaGraph&lt;/code&gt;, &lt;code&gt;SchemaNode&lt;/code&gt;, &lt;code&gt;SchemaLink&lt;/code&gt;, &lt;code&gt;SchemaPipe&lt;/code&gt; classes for metadata management, &lt;code&gt;DataGraph&lt;/code&gt;, &lt;code&gt;DataNode&lt;/code&gt;, &lt;code&gt;DataLink&lt;/code&gt;, &lt;code&gt;DataPipe&lt;/code&gt; for data management, &lt;code&gt;Connector&lt;/code&gt; class for python drivers/clients and at the highest level of management we have &lt;code&gt;ASET&lt;/code&gt; (Associative Entity Set is similar to Relation) and &lt;code&gt;HACOL&lt;/code&gt; (HyperAtom collection).&lt;/p&gt;
&lt;h4 id=&#34;schema-and-data-as-objects-and-nodes-on-a-hypergraph&#34;&gt;Schema and data as objects and nodes on a hypergraph&lt;/h4&gt;
&lt;p&gt;HyperMorph goes one step ahead of the OOP design principle. It creates objects with 3D numerical vector identities and links them as nodes on a hypergraph. That graph is powered by &lt;a href=&#34;https://git.skewed.de/count0/graph-tool&#34;&gt;graph-tool&lt;/a&gt; one of the best and fastest network analysis tools in Python. Hypermorph keeps separate schema information, i.e. metadata, from stuctured data (&lt;em&gt;tuples&lt;/em&gt;, &lt;em&gt;hierarchical&lt;/em&gt;, &lt;em&gt;graph&lt;/em&gt;, &lt;em&gt;table&lt;/em&gt;, etc). This unique feature offers the possibility to organize easily data resources and to build complex customised data models in order to digest data. Data integration (consolidation) requires to manage successfully the complexity of mapping data resources on a data model something that can be easily done when our objects are hypergraph enabled and have numerical key vectors to identify their exact location in the schema, data graph.&lt;/p&gt;
&lt;h4 id=&#34;hypermorph-connectors&#34;&gt;HyperMorph Connectors&lt;/h4&gt;
&lt;p&gt;Another fundamental difference of HyperMorph with ETL tools is on the Python DB Driver/Adapter side. The current release supports:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clickhouse-Driver&lt;/li&gt;
&lt;li&gt;MySQL-Connector&lt;/li&gt;
&lt;li&gt;SQLAlchemy with the following three dialects
&lt;ul&gt;
&lt;li&gt;pymysql&lt;/li&gt;
&lt;li&gt;clickhouse&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On top of these drivers HyperMorph uses a &lt;code&gt;Connector&lt;/code&gt; class to abstract and unify SQL command execution &lt;code&gt;sql()&lt;/code&gt; in a functional way and wrap commands to extract metadata &lt;code&gt;get_tables_metadata()&lt;/code&gt;, &lt;code&gt;get_columns_metadata()&lt;/code&gt;. Transformation to &lt;strong&gt;tuples&lt;/strong&gt;, &lt;strong&gt;json rows&lt;/strong&gt;, &lt;strong&gt;tuples&lt;/strong&gt;, &lt;strong&gt;columns&lt;/strong&gt;, and &lt;strong&gt;pyarrow batch/table&lt;/strong&gt; is taking place at this level. At this stage performance is a critical factor. In our design and implementation of HyperMorph connectors we are seeking to minimise the time delay and data transferring speed. Therefore the protocol of communication that is used in the python database driver/adopter is highly important.&lt;/p&gt;
&lt;h4 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h4&gt;
&lt;p&gt;This is a standard approach in ETL frameworks and a very useful one because in general &lt;code&gt;pipelines&lt;/code&gt; are flexible and intuitive in programming. Hypermorph is not an exception we tried to make a difference here by designing same pipeline operators for fetching either data or metadata. For example there is an &lt;code&gt;over()&lt;/code&gt; operator for projection and &lt;code&gt;to_dataframe()&lt;/code&gt; for transformation to Python Pandas dataframe. We have even wrapped functional commands on pipelines so that you can choose between OOP (chaining) or functional style of programming.&lt;/p&gt;
&lt;h3 id=&#34;not-only-a-data-storage-and-transformations-analytics-tool&#34;&gt;Not only a data storage and transformations-analytics tool&lt;/h3&gt;
&lt;p&gt;There is another category of tools related with data storage (in-memory, on-disk), transformations and analytics processing, such as &lt;a href=&#34;https://github.com/TileDB-Inc/TileDB&#34;&gt;TileDB&lt;/a&gt;, &lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;datatable&lt;/a&gt;, &lt;a href=&#34;https://github.com/h2oai/datatable&#34;&gt;pandas&lt;/a&gt;, &lt;a href=&#34;https://github.com/petl-developers/petl&#34;&gt;petl&lt;/a&gt;, &lt;a href=&#34;https://github.com/vaexio/vaex&#34;&gt;vaex&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyTables&#34;&gt;pytables&lt;/a&gt;, &lt;a href=&#34;https://github.com/ibis-project/ibis&#34;&gt;ibis&lt;/a&gt;, &lt;a href=&#34;https://github.com/numpy/numpy&#34;&gt;numpy&lt;/a&gt;, &lt;a href=&#34;https://github.com/dask/dask&#34;&gt;dask&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/arrow&#34;&gt;pyarrow&lt;/a&gt;, &lt;a href=&#34;https://arrow.apache.org/blog/2018/12/05/gandiva-donation/&#34;&gt;gandiva&lt;/a&gt;. Usually most of them construct a table data structure in-memory or on-disk and use either a column layout or row layout to process the data. Hence they resemble database engines. In fact previous prototypes of HyperMorph (see &lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt; project) were based on SQL database engines. This time the current, first, release of HyperMorph is powered by &lt;a href=&#34;https://arrow.apache.org/docs/python/index.html&#34;&gt;PyArrow&lt;/a&gt;. There are many reasons for that choice. Most important PyArrow is mature and provides a columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware including GPUs. But regarding HyperMorph the killer feature of PyArrow package is &lt;a href=&#34;https://arrow.apache.org/docs/python/data.html#dictionary-arrays&#34;&gt;dictionary encoding&lt;/a&gt; which is utilized to implement associative filtering, part of our &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;associative semiotic hypergraph technology&lt;/a&gt;, in the style of &lt;a href=&#34;https://www.qlik.com/us/products/associative-difference&#34;&gt;Qlik&lt;/a&gt; analytics engine.&lt;/p&gt;
&lt;h3 id=&#34;more-promising-than-data-virtualization-and-cloud-analytics-services&#34;&gt;More promising than data virtualization and cloud analytics services&lt;/h3&gt;
&lt;p&gt;In recent years there is also another approach for data management and analytics aiming to skip the weary ETL process. Usually these are SaaS products on the cloud, such as &lt;a href=&#34;https://panoply.io/&#34;&gt;panoply&lt;/a&gt;, &lt;a href=&#34;https://www.dremio.com/&#34;&gt;dremio&lt;/a&gt;, &lt;a href=&#34;https://www.knowi.com/&#34;&gt;knowi&lt;/a&gt;, &lt;a href=&#34;https://www.denodo.com/en/data-virtualization/overview&#34;&gt;denodo&lt;/a&gt;, and many others. They provide GUIs and act as &lt;a href=&#34;https://en.wikipedia.org/wiki/Middleware&#34;&gt;middleware&lt;/a&gt; between DBMS and BI platforms. Naturally these are proprietary products and details on how they work under the hood are hidden. Developers or power users have to stick with menu-widget driven interfaces than having the ultimate flexibility of programming at the level of Python language. You may consider HyperMorph as an open-source API with the same role to fetch data for graph visualisation platforms. HyperMorph has three key differentiating points here data consolidation, user defined data modeling and interactive associative filtering for analytics with the option to visualize connected data on a graph. And because HyperMorph is open-source it is more promising that potentially our technology can be used from many software vendors for BI applications.&lt;/p&gt;
&lt;h2 id=&#34;speechless-hypermorph-screencast&#34;&gt;Speechless HyperMorph Screencast&lt;/h2&gt;
&lt;h3 id=&#34;hypermorph-speaks-for-itself&#34;&gt;Hypermorph speaks for itself&lt;/h3&gt;
&lt;p&gt;Watch the demo, check youtube settings and make sure &lt;strong&gt;video quality is at 1080p&lt;/strong&gt; HD.
You may also set the &lt;strong&gt;playback speed at 0.75&lt;/strong&gt; to increase the time of executing commands.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ZMjlkw6tw3o&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;now-you-know-that-you-can-&#34;&gt;Now you know that you can &amp;hellip;&lt;/h3&gt;
&lt;p&gt;and the only limit on what you can is your imagination.&lt;/p&gt;
&lt;h2 id=&#34;installation---demo-test---documentation&#34;&gt;Installation - Demo Test - Documentation&lt;/h2&gt;
&lt;h3 id=&#34;step-by-step-instructions&#34;&gt;Step by step instructions&lt;/h3&gt;
&lt;p&gt;on how to &lt;a href=&#34;https://healis.eu/en/hmorph/#install&#34;&gt;install&lt;/a&gt; release.&lt;/p&gt;
&lt;h3 id=&#34;demo-guide-to-test-package&#34;&gt;Demo Guide to Test package&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://healis.eu/en/hmorph/#demo_test&#34;&gt;Demonstration of HyperMorph functionality&lt;/a&gt; on data resources and demo scripts that are included in the distribution.&lt;/p&gt;
&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;A draft of the &lt;a href=&#34;https://hypermorph.healis.eu/docs&#34;&gt;documentation&lt;/a&gt; from comments in source code is generated automatically with Sphinx and it is hosted at GitHub.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/hypermorph-athanassios-hatzis/&#34;&gt;LinkedIn - 26/06/2020 Pulse Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>50 Years of SQL, can you imagine a truly NoSQL approach ?</title>
      <link>https://healis.eu/en/post/20200219/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20200219/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#two-programming-paradigm-approaches-for-a-nosql-api&#34;&gt;Two programming paradigm approaches for a NoSQL API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#functional-operations&#34;&gt;Functional operations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#a-glimpse-from-the-future&#34;&gt;A glimpse from the future&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In a decade of investigating NoSQL systems, I noticed a huge effort from many vendors to create SQL compatible APIs. Yes, there is a pretty good reason behind this tendency to walk-the-line as usual. Everybody has learned to program in SQL, everybody knows how to access a DBMS using SQL.&lt;/p&gt;
&lt;p&gt;Well, I guess after 50 years of SQL based DBMS there has to be a better approach to win programmer&amp;rsquo;s acceptance but it seems nobody has managed to achieve such an ambitious goal in scale. Nobody dares to propose something different to be adopted as a better solution and even those few that tried something different, it just comes to my mind the &lt;a href=&#34;http://tinkerpop.apache.org/&#34;&gt;Apache Tinkpop-Gremlin&lt;/a&gt; language, &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; and &lt;a href=&#34;https://www.opencypher.org/&#34;&gt;Cypher&lt;/a&gt;, those brave hearts have not managed to convince the majority of IT users to switch gears to their proposed query environment. Others were more radical in their approach and even imagined a connected semantic web, but when they designed their query language, &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt;, it looked very similar to SQL, and even its acronym reminds us SQL.&lt;/p&gt;
&lt;p&gt;I can start writing many reasons for why all these approaches have not reached the consensus for the majority of IT technical users. I could also state a number of facts for why the industry and several consortium keep using SQL as their favourite DBMS query language. But with this article I would like you to focus on a very specific point, and with that perhaps I can share a bit of my imagination on how it can be possible to access a DBMS differently, with more flexibility than SQL, without losing the comfort of your programming language, without the hurdles in SQL and most important with earning the interest and respect of developers.&lt;/p&gt;
&lt;h2 id=&#34;two-programming-paradigm-approaches-for-a-nosql-api&#34;&gt;Two programming paradigm approaches for a NoSQL API&lt;/h2&gt;
&lt;p&gt;What is SQL ? It&amp;rsquo;s a domain specific language designed specifically to manage data in a relational DBMS, although many proponents of relational theory correctly argue that these DBMS do not follow Codd&amp;rsquo;s relational principles. But that is another important story to tell some other time.&lt;/p&gt;
&lt;p&gt;Recently, in the last decade, graph databases started becoming very popular but interestingly many important vendors stretched SQL language to cover graph traversal and other related operations. Columnar databases another very successful NoSQL type also followed the same tactic regarding to the query language. Therefore, although the data model and the physical layer implementation can vary a lot, SQL attempts to create an artificial unity at the database client level.&lt;/p&gt;
&lt;p&gt;But again SQL is domain specific, started as data model specific and remains a declarative query language. The main question is what happens at the API side, i.e. at the side of the programming language and that is exactly where all interesting, peculiar things happen. How exactly do you connect to the DBMS server, what is the protocol DBMS driver uses to transfer data, how well objects match with entities and attributes in your DBMS, schema vs object model changes, nullable and partial loading of fields-atrributes, persistence, state, concurrency and caching of objects. For OOP aficionados and others what I briefly described is known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&#34;&gt;object-relational impedance mismatch&lt;/a&gt; problem, the &lt;a href=&#34;http://blogs.tedneward.com/post/the-vietnam-of-computer-science/&#34;&gt;Vietnam of Computer Science&lt;/a&gt;. And do not make a mistake it is still &amp;ldquo;Vietnam&amp;rdquo; out there.&lt;/p&gt;
&lt;p&gt;Chainable operators and operands
OOP is perhaps the most popular programming paradigm and yet because of the SQL magic spell everything had to be squeezed on a tabular form using one &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; or the other. But during all these years of my personal research and development effort I noticed one specific characteristic of these ORM APIs that is related to the data retrieval approach in use. There are three major trends here, &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_by_Example&#34;&gt;Query-By-Example&lt;/a&gt; (QBE) the precursor of GraphQL, Query-By-API (QBA) the precursor of Gremlin and Query-By-Language (QBL) where all the SQL like query languages are categorised, &lt;a href=&#34;https://www.gqlstandards.org/&#34;&gt;GQL&lt;/a&gt; is not an exception. Developer&amp;rsquo;s practical experience showed that certain complex queries, particularly those with joins, were more difficult to represent in QBA and QBE and once more SQL won again this battle. But it is not a surprise that proponents of graph database technology have only partially touched the object-relational impedance mismatch. It requires a deeper architectural design and multi-perspective attitude than only comparing how well nodes of the graph match objects of a class.&lt;/p&gt;
&lt;p&gt;So, was that a fair battle between QBA and QBL, the answer is no because of the SQL existing dominance in DBMS and the mimicking of SQL join operations. That is where imagination enters the game, imagine that you could use object chainable operations using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;fluent interface design method&lt;/a&gt;, a.k.a QBA, without the mismatch between the DBMS and OOP, i.e. imagine a loose connection between the DBMS and API, think of API database client more like a bridge to fetch or transfer data. The method of chaining query operators is very promising indeed, it can won a second round of boxing with SQL. I will briefly explain why.&lt;/p&gt;
&lt;p&gt;OOP is based on the concept of objects that can exchange messages and modify their internal state. Therefore that kind of fluent interface is very natural in OOP languages, on the other hand most complex queries can be visualised and processed as a data pipeline. My question to those that design GQL, the next international query language standard, is why you keep following a dead-end declarative approach ? Wouldn&amp;rsquo;t it be more natural and appealing to the users to follow a data pipeline methodology by standardising operands and operations ? There is plenty of hard evidence to verify that this is not an assumption. Recall TinkerPop-Gremlin reference above and in Python there is &lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;, a very popular data analysis library (23621 starts at GitHub).&lt;/p&gt;
&lt;h2 id=&#34;functional-operations&#34;&gt;Functional operations&lt;/h2&gt;
&lt;p&gt;Speaking about programming languages, what is the other very competitive paradigm in software development. Arguably it is the functional one and yet the functional requirements for such an API are more obscure. But such an API exists in one of the most powerful functional programming languages of IT industry, Mathematica. See for example how carefully they designed Wolfram language functions on &lt;a href=&#34;https://reference.wolfram.com/language/guide/DatabaseLikeOperationsOnDatasets.html&#34;&gt;Database-Like Operations on Datasets&lt;/a&gt; and &lt;a href=&#34;https://reference.wolfram.com/language/guide/ComputationWithStructuredDatasets.html&#34;&gt;Computation with Structured Datasets&lt;/a&gt; and how perfectly these fit with many other functions of the same language.&lt;/p&gt;
&lt;h2 id=&#34;a-glimpse-from-the-future&#34;&gt;A glimpse from the future&lt;/h2&gt;
&lt;p&gt;Enough said, software engineering is not a theoretical thing, it is based on practice. I will give you an example. One of the drawbacks of SQL is that you don&amp;rsquo;t have a direct access to manage data dictionary information, this is handled more or less automatically by the DBMS. Gartner recently reported that data quality and data integration tools are incorporating data catalogs. This is certainly a step towards the right direction, you need a query API that is capable to manage both data and metadata using a unified approach.&lt;/p&gt;
&lt;p&gt;Consider the following code snippet in Python:&lt;/p&gt;
&lt;p&gt;The first command demonstrates fetching metadata using OOP chainable python methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fields
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over(select&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe(index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dim4, dim3, dim2&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                nid                 cname alias ntype ctype  counter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dim4 dim3 dim2                                                      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;605&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;              Duration    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;            Start date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;              End date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;  Start station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;         Start station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;    End station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;233&lt;/span&gt;           End station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;           Bike number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;           Member type    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second command demonstrates fetching metadata using a functional approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(nid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        what&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fields&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        select&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dim4, dim3, dim2&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataframe&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                nid                 cname alias ntype ctype  counter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dim4 dim3 dim2                                                      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;605&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;              Duration    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;            Start date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;              End date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;  Start station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;         Start station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;    End station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;233&lt;/span&gt;           End station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;           Bike number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;           Member type    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the third command demonstrates fetching data using again a functional approach&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;, what&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             select&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataframe&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             offset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;534&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31113&lt;/span&gt;  Columbia Rd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Belmont St NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31201&lt;/span&gt;                                &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; P St NW  W00663  Member
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1937&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31202&lt;/span&gt;               &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; R St NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31621&lt;/span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; D St NW &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; Judiciary Square  W00692  Casual
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;470&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31104&lt;/span&gt;  Adams Mill &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Columbia Rd NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31200&lt;/span&gt;          Massachusetts Ave &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Dupont Circle NW  W00020  Member
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;727&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31103&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Harvard St NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31200&lt;/span&gt;          Massachusetts Ave &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Dupont Circle NW  W00880  Member
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1144&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31110&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;th St &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Florida Ave NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31236&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; O St NW &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; Georgetown University  W00681  Casual
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1698&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31107&lt;/span&gt;      Lamont &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Mt Pleasant NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31610&lt;/span&gt;  Eastern Market &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; North Carolina Ave SE  W01154  Member
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;I am sure it is not difficult for those few out there to imagine and even implement a better solution than SQL provided you have the motive and financial backup. In fact as I mentioned in this article that partly exists. But it is certainly far more challenging and difficult to loose the safety of your daily job and/or income for years to imagine and consequently strive to give flesh and bones to a truly NoSQL API that can be more productive, efficient and innovative to work with than what already exists. Keep an eye for the next release of TRIADB project and who knows you might be convinced that this is truly a unique and valuable tool to use.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, we need to investigate systems that combine relational algebra and linear algebra in a richer query paradigm, potentially as extensions to SQL. Two “holy grails” should continue to stay on our agenda. First, we must always explore any novel ideas to reduce the impedance mismatch between application development and writing database queries. Second, we must continue to find ways to make database systems less rigid (e.g., flexible schema evolution) without significantly sacrificing their performance &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/50-years-sql-can-you-imagine-truly-nosql-approach-athanassios-hatzis/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://sigmodrecord.org/publications/sigmodRecord/1912/pdfs/07_Reports_Abadi.pdf&#34;&gt;The Seattle Report on Database Research&lt;/a&gt; - the report summarizes the discussion and conclusions of the 9th such meeting, held during 9-10 October 2018. It appeared in the December 2019 issue of ACM SIGMOD Record&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Helicopter view of Graph Networks in DBMS</title>
      <link>https://healis.eu/en/post/20191030/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20191030/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-new-brave-age-of-hyperlinked-data&#34;&gt;The new brave age of hyperlinked data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#technical-questions-for-hyperlinking-data&#34;&gt;Technical questions for hyperlinking data&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#physical-layer&#34;&gt;Physical Layer&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logical-layer&#34;&gt;Logical Layer&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#conceptual-layer&#34;&gt;Conceptual layer&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#by-reference-vs-by-value&#34;&gt;By reference vs. by value&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Normally IT people including architects, engineers, scientists and developers are forced to think a particular implementation of an application or a business solution in terms of the query language. Generally speaking most often it is the specific technology and infrastructure behind the scene that dictates how things should be done. Recently the first workshop on web standardization for graph data was held in Berlin, Germany. The title of the workshop &amp;ldquo;&lt;a href=&#34;https://www.w3.org/Data/events/data-ws-2019/cfp.html&#34;&gt;Creating Bridges: RDF, Property Graph and SQL&lt;/a&gt;&amp;rdquo; indicates that it is technology again, and its vendors, that force a narrow view of how to apply graph networks in data management. Hope they do not seek a solution that temporarily makes everyone happy in business, instead of taking a firm decision to move ahead on a new path that will be proven the right choice over time. That said, I do recognize that there are always compatibility issues with older technology in place but the bridges should serve the scope of a smooth transition from the old age to the new age.&lt;/p&gt;
&lt;h2 id=&#34;the-new-brave-age-of-hyperlinked-data&#34;&gt;The new brave age of hyperlinked data&lt;/h2&gt;
&lt;p&gt;But there is another factor more important than technology, the need to provide a business insight, understanding and/or solution to real world problems with increasing complexity. After all many recognize that this was the driving force behind the NoSQL movement that started ten years ago. Out of the three main technological categories of database products, key-value, document-hierarchical and graph networks, the last one emerged with significant importance for the future of IT business for many reasons that will not be analysed here. Suffice to say that WWW, the most advanced and popular information system, is the biggest graph network of documents and other resources in the history of human mankind. Today we reached the point in time that the maturity of NoSQL movement met the evolution of WWW but the question remains on how exactly these two will be married to serve human needs. A quick and sort answer is by &lt;strong&gt;hyperlinking data in the context of information&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;technical-questions-for-hyperlinking-data&#34;&gt;Technical questions for hyperlinking data&lt;/h2&gt;
&lt;p&gt;Therefore the aim has been set but the competitive database, semantic and web technologies out there makes it too difficult for many to rise above the specifics. That is where a &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;multi-layer perspective&lt;/a&gt; is needed to embrace the problem of hyperlinking data.&lt;/p&gt;
&lt;p&gt;Does this mean users are going to abandon their favorite popular SQL row-based, column-based, document based or existing triple store and property graph databases ? No, not at all but this new technology should integrate them in the large picture which takes on account the following questions as it concerns the hyperlinked graph data network :&lt;/p&gt;
&lt;h3 id=&#34;physical-layer&#34;&gt;Physical Layer&lt;/h3&gt;
&lt;p&gt;Although many vendors consider a native graph network storage layer as an advancement in graph databases, this approach has the following drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it results in poor data locality and you may consider this issue independent of horizontal scaling.&lt;/li&gt;
&lt;li&gt;you are forced to apply too early a graph layout on data especially on record-based data.&lt;/li&gt;
&lt;li&gt;it is not easy to implement quick and easy data transformations, i.e. the result from a data query in a tabular, columnar, hierarchical or graph network format. All four are needed for different purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;So what is the best type of storage engine that serves these specifications ?&lt;/strong&gt; Would it be better to think in terms of a hybrid architecture ?&lt;/p&gt;
&lt;h3 id=&#34;logical-layer&#34;&gt;Logical Layer&lt;/h3&gt;
&lt;p&gt;This is where the basic constructs of the technology must be thoroughly specified. Since we are talking about a graph network:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What type of nodes and edges we have ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you allow key-value properties in nodes and edges ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does the edge connect only two nodes ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What type of cardinality and linkage, i.e. unidirectional, bidirectional, they have ?&lt;/p&gt;
&lt;p&gt;Speaking about linkage, both &lt;strong&gt;RDF and property graph databases are anchored on appropriate semantic labelling of edges&lt;/strong&gt; and then storage and retrieval of information at the implementation level are dependent on this labelling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, have you considered that this extra piece of information, i.e. the label, in most cases can be a meta-data property of the node, e.g. type, category, role, characteristic, etc ?&lt;/p&gt;
&lt;p&gt;For that reason labelling of edges should be left to the data modeller, business person, purely for conceptualising the business model. Here is perhaps the most critical question.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you use these constructs to build business data models and what are their semantics ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This leads us inadvertently to the conceptual level.&lt;/p&gt;
&lt;h3 id=&#34;conceptual-layer&#34;&gt;Conceptual layer&lt;/h3&gt;
&lt;p&gt;I think RDF graphs and labeled property graphs and Topic Map graphs (hardly anyone talks anymore about this standard) and even entity-relationship graph in relational theory have varying types of constructs with big differences in meaning and use. Entities, attributes, properties, data resources, relationships, relations, associations, items, instances and many other concepts make the IT babel at the business, end-user level.&lt;/p&gt;
&lt;p&gt;Here lies a major source of confusion for the newcomer, I used to be one of them, which is the &lt;strong&gt;distinction between classes and instances, metadata and data, terminological and assertion components&lt;/strong&gt;. This distinction as many others in IT semantic world is artificial, nevertheless it plays an extremely important role in programming, in data retrieval and even in inferencing mechanisms.&lt;/p&gt;
&lt;p&gt;If you think you can handle this distinction easily, I urge you to think again, because in my opinion these two concepts must be clearly separable and at the same time they have to be related like the &lt;a href=&#34;https://healis.eu/en/post/20190624/&#34;&gt;hand mold and the letter types in typography&lt;/a&gt;. On the contrary I do not see this happening in our modern graph technologies, time does not permit to expand this argument but it is entangled with the following important observation.&lt;/p&gt;
&lt;h3 id=&#34;by-reference-vs-by-value&#34;&gt;By reference vs. by value&lt;/h3&gt;
&lt;p&gt;Those of us familiar with programming and the internals of computing know that there is another critical, fundamental distinction in data processing. &lt;strong&gt;How do you access the datum by reference or by value ?&lt;/strong&gt;_ This was the moment in time that RDF/OWL framework presented the first signs of derailment. First they came up with the idea of universal resource locator (URL), then the concept was elevated to the universal resource identifier (URI) and the result was the web identity crisis for those old enough to remember &lt;a href=&#34;https://ontopia.net/topicmaps/materials/identitycrisis.html&#34;&gt;the clash with the proponents of Topic Maps data modeling framework&lt;/a&gt;. If you ask me, &lt;a href=&#34;http://www.semantic-web-journal.net/content/semantic-web-identity-crisis-search-trivialities-never-were&#34;&gt;that crisis has not been resolved yet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main reason behind web identity crisis is the use of namespace addressing, to connect, identify and locate data. The notion of web address has been semantically overloaded because of its textual form. On the contrary internet protocol for addressing and usually primary key mechanism of databases are numerical. Perhaps they thought that this way it would have been easier for developers and machines to do the linkage in the same way they use HTML anchoring. But I guess this is more or less a fallacy of TimBL&amp;rsquo;s linked data network where it was designed primarily for documents (html pages) not record-base (relational) data. The origin of this misconception is &lt;a href=&#34;https://en.wikipedia.org/wiki/Memex&#34;&gt;Memex&lt;/a&gt; and it is continued in our days with the invention of many different encodings, including RDFa, Microdata and JSON-LD with the intention of generating manual or semi-automated linked data in semi-structured, hierarchical forms and html documents.&lt;/p&gt;
&lt;p&gt;Global Giant Graph (GGG) or WWW 3.0 will become a reality only if W3C consortium admit that they have to build likewise IP numerical addressing schema for concepts in data models and for hyperlinked data. It is this new protocol that will permit networking at semantic level, it is going to be the same protocol that we are going to use for identification purposes, the same protocol that will make each data element traceable and connectable, the same protocol that will be used in number-crunching computers. Moreover the whole process of constructing hyperlinked data, especially from structured data resources (databases), will be fully automated and hidden in the same way TCP/IP is hidden from internet users.&lt;/p&gt;
&lt;p&gt;Epilogue
The reader may realize that I have only touched various parts of the &amp;ldquo;elephant in the room&amp;rdquo;. But those key points that I tried to make digestible rose from my experience with semantic and database technologies and eventually from my long standing personal effort to develop &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt; computational semiotics framework. This way I hope that I managed to enlighten a different path not in theory but in practice. And if there is one thing to remind you something from this article and assist you in following this path then let it be &lt;strong&gt;&lt;a href=&#34;https://healis.eu/en/post/20190624/&#34;&gt;granular computing&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/helicopter-view-graph-networks-dbms-athanassios-hatzis/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>TRIACLICK 2nd Release</title>
      <link>https://healis.eu/en/post/20191025/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20191025/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TRIADB is discontinued, page is maintained here for the history.&lt;/strong&gt;


&lt;button class=&#34;btn  btn-danger&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;\/en\/hmorph\/&#39;&#34; &gt; Visit HyperMorph the successor of this project &lt;/button&gt;


&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;self-service-data-management--visual-interactive-analytics-framework&#34;&gt;Self-Service Data Management &amp;amp; Visual Interactive Analytics Framework&lt;/h2&gt;
&lt;p&gt;This is a public announcement of the second open-source release of TRIADB, codename TRIACLICK. Repository of the project can be found at &lt;a href=&#34;https://github.com/healiseu/triadb&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can use TRIACLICK to manage your disparate data sources, create custom data models with an integrated, whole view of your business and get a business insight by building easily dashboard web applications that work with the associative selection/filtering of Triaclick engine.&lt;/p&gt;
&lt;h3 id=&#34;tutorial-and-installation-guides&#34;&gt;Tutorial and Installation Guides&lt;/h3&gt;
&lt;p&gt;Analytic instructions on how to install TRIADB are written on the &lt;a href=&#34;https://github.com/healiseu/triadb/blob/master/INSTALLATION.rst&#34;&gt;installation guide&lt;/a&gt;. If you decide to go deeper, read the &lt;a href=&#34;https://github.com/healiseu/triadb/blob/master/TUTORIAL.rst&#34;&gt;tutorial guide&lt;/a&gt; to get into the basics of programming with TRIADB.&lt;/p&gt;
&lt;h2 id=&#34;screen-capture-demo&#34;&gt;Screen Capture Demo&lt;/h2&gt;
&lt;p&gt;Watch a screencast demonstration of the main features of TRIADB in the current release with a focus on the key aspects highlighted and illustrated in the following section.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/QSk1ldfb7ow&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;at-a-glance&#34;&gt;At A Glance&lt;/h3&gt;
&lt;p&gt;TRIADB is an innovative, multi-perspective development framework written in Python with the scope to assist power BI users and developers to build easily web applications and/or Jupyter notebooks, i.e. reports, that are based on interactive computing and exploratory, visual analysis. It’s main unique and valuable characteristics are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Interactive visual exploratory analytics&lt;/strong&gt; powered by TriaClick associative semiotic hypergraph engine. The technology is based on ClickHouse columnar DBMS and its output can be easily transformed to enable hypergraph traversal, associative selection and cross-filtering with states on coordinated visualizations.&lt;/li&gt;
&lt;/ol&gt;






&lt;figure&gt;

&lt;img src=&#34;triaclick_animated_chart.gif&#34; alt=&#34;Coordinated update of GUI components based on associative selection and filtering&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;TRIACLICK Animated Chart&lt;/h4&gt;
  &lt;p&gt;
    Coordinated update of GUI components based on associative selection and filtering
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;







&lt;figure&gt;

&lt;img src=&#34;hypergraph_paths.png&#34; alt=&#34;Visualization of hypergraph paths based on TRIACLICK associations&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;TRIACLICK Hypergraph&lt;/h4&gt;
  &lt;p&gt;
    Visualization of hypergraph paths based on TRIACLICK associations
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;User defined business models&lt;/strong&gt; in the form of a hypergraph. Data modeling plays a central role in TRIADB. Management of meta-data, loading and filtering processes are innately related, associated, with the business model you define.&lt;/li&gt;
&lt;/ol&gt;






&lt;figure&gt;

&lt;img src=&#34;business_model.png&#34; alt=&#34;Business model based on Northwind database with Associative Entities in yellow&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Business Model Graph&lt;/h4&gt;
  &lt;p&gt;
    Business model based on Northwind database with Associative Entities in yellow
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Interactive programming with high-level OOP components and methods&lt;/strong&gt; tailored to fit database management and analytics. TRIADB powerful transformations, including list items, tuples and associations enable the user to analyze data quickly and intuitively.&lt;/li&gt;
&lt;/ol&gt;






&lt;figure&gt;

&lt;img src=&#34;associative_filtering.png&#34; alt=&#34;Examine visually how the domain set values of attributes are related&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Associative Filtering&lt;/h4&gt;
  &lt;p&gt;
    Examine visually how the domain set values of attributes are related
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;







&lt;figure&gt;

&lt;img src=&#34;barchart_from_aggregations.png&#34; alt=&#34;Aggregation in a filtered state and transformation to tuples and bar chart&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Transformation of aggregation&lt;/h4&gt;
  &lt;p&gt;
    Aggregation in a filtered state and transformation to tuples and bar chart
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;what-problem-triadb-solves-and-how&#34;&gt;What problem TRIADB solves and how&lt;/h2&gt;
&lt;p&gt;The project started long time ago from a personal need to integrate an electronic medical record database used in a neurosurgery clinic with several other specialized databases for neurosurgical disorders. &lt;code&gt;Integration&lt;/code&gt;, &lt;code&gt;correlation&lt;/code&gt;, &lt;code&gt;aggregation&lt;/code&gt; and &lt;code&gt;visual exploration&lt;/code&gt; will always be the holy grail of business analytics. Associative technology in general is a specific solution that has not been opened to the public until now although it is applied by one of the most successful BI companies for two decades. The implementation of associative semiotic hypergraph engine (TRIACLICK) in TRIADB project opens a path for other competitive, cost effective (not only RAM based), efficient solutions sharing the same principles in data modeling and database management.&lt;/p&gt;
&lt;h2 id=&#34;future-plans&#34;&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;TRIADB is a middleware, one part is closely coupled with the physical layer of the data store engine and the other part is closer to the application layer. Therefore the project can be expanded in two directions, optimization and improvement of associative semiotic hypergraph engine on one hand, efficient and effective transformations and visual exploration on the other hand.&lt;/p&gt;
&lt;p&gt;In spite of the growing development of TRIADB which requires urgently funding for resources, the critical factor for the success of this project is how exactly it is going to be applied to solve particular users’ problems. This step requires that users become aware of what are the advantages in using TRIADB and what they can achieve.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triadb-v09-athanassios-hatzis/&#34;&gt;LinkedIn - 20191025 Pulse Article - TRIADB v0.9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About data granularity</title>
      <link>https://healis.eu/en/post/20190624/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20190624/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#information&#34;&gt;Information&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conceptual-computational-semiotics-framework&#34;&gt;Conceptual, computational semiotics framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#push-forward&#34;&gt;Push forward&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In computer science there are many things we take for granted like the fundamental digital representation of anything with 1s and 0s. It&amp;rsquo;s often too easy to forget that when you have dived deep into the virtual realm of a computer the only thing you get is a mere representation of abstract concepts. This is our data and because they live in a machine and its peripherals they always have structure no matter how you interpret them.&lt;/p&gt;
&lt;h2 id=&#34;information&#34;&gt;Information&lt;/h2&gt;
&lt;p&gt;And that kind of human interpretation I will call it information, i.e. you put data in a form, in some perspective, so you can get meaning out of them. In that sense data in a computer does not differ much from printed letters in a book, or paint in a canvas, or stone in a sculpture. From that point of view computer is simply an advanced form of a medium, a sophisticated printing press where 0&amp;rsquo;s and 1&amp;rsquo;s take the place of the movable individual metal letters, i.e. a computerized movable type printing.&lt;/p&gt;
&lt;h2 id=&#34;conceptual-computational-semiotics-framework&#34;&gt;Conceptual, computational semiotics framework&lt;/h2&gt;
&lt;p&gt;Once again, it&amp;rsquo;s only structured data you have, our mind is doing all the rest because of the power of &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiosis&#34;&gt;semiosis&lt;/a&gt;. One can also ask, is there anything in our universe that is unstructured ? Yes there is, concept is unstructured because it is an abstract thing. When you represent the concept, or you realize, materialize it in our realm then you have structure again. A computational model of representation which is semiotic in its nature is &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;. And here is a memorable type of formula that describes fully the semiotic nature of this data model.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(R3DM): Representation ↦ Resource + Reference + Referent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(S3DM): Semantics ↦ Signifier + Sign + Signified&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;push-forward&#34;&gt;Push forward&lt;/h2&gt;
&lt;p&gt;Nowadays there is already a sufficient and effective solution for data volume and velocity. It&amp;rsquo;s variety and consequently integration that is at stake. In my opinion the key to an efficient and effective solution is to think about the exact form of what &lt;strong&gt;atomic fundamental constructs you use and how you build connected higher structures&lt;/strong&gt;. I think &lt;a href=&#34;https://en.wikipedia.org/wiki/Granular_computing&#34;&gt;granular computing&lt;/a&gt; is an excellent term we can use here. That said, I have experienced for more than a decade a denial of thinking a better data model standard than those we already have (Relational, RDF and Topic Maps) simply because many believe that the wheel is going to be reinvented. But progress is made only when one defies the established nomenclature and challenges them with a better alternative that can be proven in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Computational_engineering&#34;&gt;computational scientific and engineering&lt;/a&gt; way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s to the crazy ones. The misfits. The rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They’re not fond of rules. And they have no respect for the status quo. You can quote them, disagree with them, glorify or vilify them. About the only thing you can’t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the people who are crazy enough to think they can change the world, are the ones who do &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/mtftHaK9tYY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/data-granularity-athanassios-hatzis/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Steve Jobs, Apple advertisement (Aired 1997)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Where is the gap in data modeling ?</title>
      <link>https://healis.eu/en/post/20190615/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20190615/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#business-vs-technological-factors&#34;&gt;Business vs Technological Factors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was motivated to write this post from an article of Christian Kaul &amp;ldquo;&lt;a href=&#34;https://www.linkedin.com/pulse/bridging-knowledge-gap-christian-kaul/&#34;&gt;Bridging the Knowledge Gap&lt;/a&gt;&amp;rdquo;. He is making questions about how, what is the best way to bridge the knowledge gap between data modeling experts and people from other fields ? But I think an important role that data modeling experts play is exactly that &lt;strong&gt;to bridge the gap between pure IT technical people like developers, database administrators, data engineers and people from other fields e.g. domain experts, scientists, business people, etc&lt;/strong&gt;. A more interesting question in my opinion is how this gap is created. Get prepared because I will answer with more questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do we all agree that the best way to model data-information is to create a graph ?&lt;/li&gt;
&lt;li&gt;If yes the next question is how exactly you represent that graph ? As you probably know there are four major competing data models, (&lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;relational model&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;ER&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_database#Labeled-property_graph&#34;&gt;labeled property graph&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;RDF&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_map&#34;&gt;Topic Maps&lt;/a&gt;), Are you convinced that there can be no other better alternative ?&lt;/li&gt;
&lt;li&gt;What about the building blocks, for example in RDF you have triples, in relational you have relations (tables) and tuples. Is that all ? Can we make better building blocks to connect data or information ?&lt;/li&gt;
&lt;li&gt;And last but not least, at a physical layer, and I believe that is exactly &lt;strong&gt;where the gap lies between pure data modelers/architects and database engineers/developers&lt;/strong&gt;, you have row, column, document, native graph structures. Are you totally convinced that the best way to physically implement a graph data-information model is with a native graph structure on permanent storage ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you ask me to answer these questions I suggest you read more information about &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt; conceptual, computational semiotics framework and the related projects &lt;a href=&#34;https://healis.eu/en/hmorph/&#34;&gt;HyperMorph&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt;. This is what I have been involved with for the last ten years.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The nice thing with social media is that if you deserve to get some good feedback from professionals and experts of the field in a post like this one you might decide to extend it. That&amp;rsquo;s exactly what I did in the following few paragraphs to respond in a better way to comments in my post.&lt;/em&gt;_&lt;/p&gt;
&lt;h2 id=&#34;business-vs-technological-factors&#34;&gt;Business vs Technological Factors&lt;/h2&gt;
&lt;p&gt;I believe the resurgence of no-SQL movement (2009), which is highly related to data modeling, started out of the emergent need of companies-users to deal with the velocity, volume, variety and other properties of distributed data resources. That same movement pushed forward our technological boundaries to create better DBMS and BI, web/desktop applications.&lt;/p&gt;
&lt;p&gt;Personally speaking I joined that movement because of my business need to manage complex medical databases. Another reason was to enrich and manage collectively and efficiently my own data resources, i.e. personal information management. Believe it or not I am still not satisfied from what exists out there and that is why I ended up &lt;strong&gt;researching and developing&lt;/strong&gt; my own solution.&lt;/p&gt;
&lt;p&gt;Apparently another critical factor has to do purely with the cost of a solution you apply to a complex data/information management problem. That is also why open-source based systems are becoming more and more popular nowadays. We need bulletproof, open-source tools with strong communities behind to support, develop and test them. Do consider also that in many cases open-source is an escape from the high cost cloud solutions and corresponding vendor-locking mechanisms.&lt;/p&gt;
&lt;p&gt;Eventually, somehow, sometime something similar to a Linux OS, will be created for information management at a higher level. Something that will earn the consensus of developers, end users and companies emerging out of practical need for a new data modeling standard, for effective physical layer implementation, highly responsive graphical user interfaces and efficient augmented artificial intelligence tools.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/where-gap-data-modeling-athanassios-hatzis-phd/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>TRIACLICK 1st Release</title>
      <link>https://healis.eu/en/post/20190211/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20190211/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TRIADB is discontinued, page is maintained here for the history.&lt;/strong&gt;


&lt;button class=&#34;btn  btn-danger&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;\/en\/hmorph\/&#39;&#34; &gt; Visit HyperMorph the successor of this project &lt;/button&gt;


&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;TriaClick is my long standing effort to revitalize Relational and Topic Maps data model. &lt;code&gt;Associative filtering&lt;/code&gt;, similar to &lt;a href=&#34;https://www.qlik.com/us/products/associative-difference&#34;&gt;Qlik associative engine&lt;/a&gt;, has been &lt;strong&gt;implemented for the first time&lt;/strong&gt; with a fast columnar DBMS on non-volatile memory and tested with a relatively large file on commodity hardware.&lt;/p&gt;
&lt;h2 id=&#34;screencast&#34;&gt;Screencast&lt;/h2&gt;
&lt;p&gt;Screen Capture Demo of TriaClick, a python library that implements &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;associative, semiotic, hypergraph technology&lt;/a&gt; on top of &lt;a href=&#34;https://clickhouse.yandex/&#34;&gt;ClickHouse columnar DBMS&lt;/a&gt; and &lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt;. We show the execution of commands from two python console applications that are built with TriaClick library. The various operations (methods) of our &lt;code&gt;Chain Query Language (CQL)&lt;/code&gt; aim to make the processing pipeline of data integration, exploratory data analysis and visualization easier, faster, intuitive, and more efficient and accurate for the database/data analyst expert. Currently the focus is on management of data resources and data models, associative filtering, hypergraph exploration and aggregations.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/WJh5o59aXOw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;
&lt;p&gt;On my 10 years old Intel i3 core machine, TriaClick takes about a minute to load a 42 x 2.8M Physician records TSV flat file (856MB) on SSD and the average elapsed time for processing user selections, i.e. filters with an exploratory QlikView style, is 3 seconds. Output can be transformed and seen as associations, tuples, and columns with distinct values, frequencies and filtering states. The result set can also be driven to a hypergraph for further exploration.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triaclick-demo-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20190211 Pulse Article - TriaClick Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TRIADB</title>
      <link>https://healis.eu/en/project/triadb/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/triadb/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#at-a-glance&#34;&gt;At A Glance&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architectural-design&#34;&gt;Architectural Design&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architectural-overview-white-paper&#34;&gt;Architectural Overview (White Paper)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementations&#34;&gt;Implementations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conference-presentations&#34;&gt;Conference Presentations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#key-differentiating-factors&#34;&gt;Key Differentiating Factors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#business-strategy&#34;&gt;Business Strategy&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TRIADB is discontinued, page is maintained here for the history.&lt;/strong&gt;


&lt;button class=&#34;btn  btn-danger&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;\/en\/hmorph\/&#39;&#34; &gt; Visit HyperMorph the successor of this project &lt;/button&gt;


&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;at-a-glance&#34;&gt;At A Glance&lt;/h2&gt;
&lt;p&gt;TRIADB is an innovative, multi-perspective database framework. It is a Python library that sits on top of suitable NoSQL/SQL data store engines and enables the users to perform easily &lt;strong&gt;integration, correlation, aggregation and hypergraph exploration of multiple data resources&lt;/strong&gt;. TRIADB is founded on the principles of &lt;a href=&#34;https://healis.eu/en/project/r3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;architectural-design&#34;&gt;Architectural Design&lt;/h2&gt;
&lt;p&gt;In terms of the architectural design TRIADB is based on &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000107/&#34;&gt;&lt;strong&gt;associative&lt;/strong&gt;, &lt;strong&gt;semiotic&lt;/strong&gt;, &lt;strong&gt;hypergraph&lt;/strong&gt; technology&lt;/a&gt; pioneered by &lt;a href=&#34;https://healis.eu/en/about/#athanassios&#34;&gt;Dr. Athanassios I. Hatzis&lt;/a&gt;. Foundational principles, theoretical formalization and ontological dimensions of the framework and the data model are &lt;a href=&#34;https://healis.eu/en/project/r3dm/#cross-references&#34;&gt;dating back to the year 2012&lt;/a&gt;. Our technology shares certain similarities with &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000104/&#34;&gt;Qlik&lt;/a&gt; associative technology, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000002/&#34;&gt;AtomicDB and X10SYS&lt;/a&gt; associative technology, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000103/#associative-model&#34;&gt;Sentences&lt;/a&gt; associative data model, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000101/&#34;&gt;Topic Maps&lt;/a&gt; data model and &lt;a href=&#34;https://en.wikipedia.org/wiki/Correlation_database&#34;&gt;correlation database model&lt;/a&gt;. The &lt;span class=&#34;markup-quote&#34;&gt;main difference of our technology from other similar associative technologies&lt;/span&gt; is that it has a solid theoretical background, a unified data modeling architecture and at the same time it is distinct in its design and implementation.&lt;/p&gt;
&lt;h2 id=&#34;architectural-overview-white-paper&#34;&gt;Architectural Overview (White Paper)&lt;/h2&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;/documents/WP-TriaClick-Architectural-Overview-Final.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;https://healis.eu/documents/WP-TriaClick-Architectural-Overview-Final.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;https://healis.eu/documents/WP-TriaClick-Architectural-Overview-Final.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;h2 id=&#34;implementations&#34;&gt;Implementations&lt;/h2&gt;
&lt;p&gt;There are four TRIADB prototypes implemented:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TRIADB on &lt;a href=&#34;https://healis.eu/en/talk/triadb_wolfram/&#34;&gt;OrientDB with Mathematica&lt;/a&gt; - 2016&lt;/li&gt;
&lt;li&gt;TRIADB on &lt;a href=&#34;https://healis.eu/en/talk/triadb_connected_data/&#34;&gt;Intersystems Cache with Python&lt;/a&gt; - 2017&lt;/li&gt;
&lt;li&gt;TRIADB on Redis with Python - 2018&lt;/li&gt;
&lt;li&gt;TRIADB on &lt;a href=&#34;https://healis.eu/en/post/20191025/&#34;&gt;MariaDB and ClickHouse with Python&lt;/a&gt; - 2019&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the last open-source release of TRIADB, MariaDB stores data dictionary information and ClickHouse data storage engines are used for processing and querying data. The associative, semiotic, hypergraph engine has a proprietary licence, although the sources are included in the release, and it is given the codename TriaClick.&lt;/p&gt;
&lt;h2 id=&#34;conference-presentations&#34;&gt;Conference Presentations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;16/11/2017&lt;/strong&gt; - &lt;a href=&#34;https://healis.eu/en/talk/triadb_connected_data/&#34;&gt;Connected Data London Conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19/06/2017&lt;/strong&gt; - &lt;a href=&#34;https://healis.eu/en/talk/triadb_wolfram/&#34;&gt;European Wolfram Technology Conference in Amsterdam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;key-differentiating-factors&#34;&gt;Key Differentiating Factors&lt;/h2&gt;
&lt;p&gt;The following is a list of technical specifications and features in the design and implementation of TRIADB. This same list is what makes &lt;span class=&#34;markup-quote&#34;&gt;TRIADB a unique and valuable product&lt;/span&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Multi-Perspective Database Framework: tuples, domain sets, objects, hypergraph, hierarchical&lt;/li&gt;
&lt;li&gt;Act both as an operational and data warehouse database with a 360 degree view&lt;/li&gt;
&lt;li&gt;Automatic fixed, primary indexing schema instead of user-defined secondary indexing&lt;/li&gt;
&lt;li&gt;Manage the references instead of data: relying on reference-based associations and logical identifiers&lt;/li&gt;
&lt;li&gt;No duplicates: single value instance based on system defined primitive data types&lt;/li&gt;
&lt;li&gt;Consolidation of multiple data resources and mapping on user-defined data models&lt;/li&gt;
&lt;li&gt;Management of data resources, data models and metadata&lt;/li&gt;
&lt;li&gt;Python Chain Query Language (CQL) that avoids namespace and impedance mismatch problem&lt;/li&gt;
&lt;li&gt;Interactive, free-form, contextual queries&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;business-strategy&#34;&gt;Business Strategy&lt;/h2&gt;
&lt;p&gt;We create strong partnerships with database vendors to implement and fine-tune TRIADB on top of their technology stack and we offer consulting services on how to apply Associative, Semiotic, Hypergraph technology. We are not selling licenses or software, we provide full stack solutions and add-on value for our own clients, or for the clients of the vendor, thus the system we build inherits the scaling, performance, availability and TCO of the vendor.&lt;/p&gt;
&lt;p&gt;Our associative, semiotic, hypergraph technology is open-source. We are seeking for developer&amp;rsquo;s community consensus on the use of it and we strongly believe that our technology will be eventually adapted by major semantic and database technology players in the IT industry.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triaclick-demo-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20190211 Pulse Article - TriaClick Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triaclick-architectural-overview-white-paper-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20190319 TriaClick Architectural Overview White Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triadb-v09-athanassios-hatzis/&#34;&gt;LinkedIn - 20191025 Pulse Article - TRIADB v0.9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Cache Python ORM</title>
      <link>https://healis.eu/en/project/cache_python/</link>
      <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/cache_python/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#source-code&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#about-the-project&#34;&gt;About the project&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#tests-and-demos&#34;&gt;Tests and Demos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;The project&amp;rsquo;s &lt;a href=&#34;https://github.com/healiseu/IntersystemsCacheORM&#34;&gt;source code at GitHub&lt;/a&gt;, was originally written and used as a module of &lt;a href=&#34;https://healis.eu/en/talk/triadb_connected_data/&#34;&gt;TRIADB&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id=&#34;about-the-project&#34;&gt;About the project&lt;/h2&gt;
&lt;p&gt;CacheORM module is an enhanced OOP porting of &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_using&#34;&gt;Intersystems Cache-Python binding&lt;/a&gt;. There are three classes implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CacheClient This is the super class of CachePython module. It wraps two functions from intersys.pythonbind module &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_using#GBPY_using_basics&#34;&gt;pythonbind3.connection()&lt;/a&gt; and &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_database&#34;&gt;pythonbind3.database()&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CacheQuery A subclass of CacheClient that wraps methods and adds extra functionality in &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_database&#34;&gt;intersys.pythonbind.database&lt;/a&gt; and &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_queries&#34;&gt;intersys.pythonbind.query classes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CacheClass A subclass of CacheClient, that wraps methods and adds extra functionality in &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_database&#34;&gt;intersys.pythonbind.database&lt;/a&gt; and &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_objects&#34;&gt;intersys.pythonbind.object&lt;/a&gt; classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY&#34;&gt;intersys.pythonbind&lt;/a&gt; package is a Python C extension that provides Python application with transparent connectivity to the objects stored in the Caché database.&lt;/p&gt;
&lt;h2 id=&#34;tests-and-demos&#34;&gt;Tests and Demos&lt;/h2&gt;
&lt;p&gt;There are two folders in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/healiseu/IntersystemsCacheORM/tree/master/testCacheORM&#34;&gt;testCacheORM&lt;/a&gt; contains python jupyter notebook files that demonstrate CacheQuery and CacheClass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/healiseu/IntersystemsCacheORM/tree/master/testCacheBinding&#34;&gt;testCacheBinding&lt;/a&gt; are tests written for Intersystems Cache python binding&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can simply compare tests with demos to appreciate the work in this project to leverage intersystems cache python binding.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/intersystems-cache-python-orm-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20180305 Pulse Article - HEALIS: Build valuable relations; establish effective communications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Yet another query language, really ?</title>
      <link>https://healis.eu/en/post/20180403/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20180403/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I have been reading an article for yet another query language, &lt;a href=&#34;https://www.hypergraphql.org/&#34;&gt;HypergraphQL&lt;/a&gt;. But do we really need another query language ? I do agree that it is always good to offer the developer a variety of choices for querying a database, especially if the new query language makes it easier or perhaps better in some sense to fetch or input data. But that&amp;rsquo;s not really a big deal, I will try to explain why in brief here.&lt;/p&gt;
&lt;p&gt;Whether it is a standard based &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/SQL&#34;&gt;SQL&lt;/a&gt;, &lt;a href=&#34;http://www.isotopicmaps.org/tmql/&#34;&gt;TMQL&lt;/a&gt;, &lt;a href=&#34;https://www.w3.org/XML/Query/&#34;&gt;XQuery&lt;/a&gt; language, or a more graph oriented query language like &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; (former Facebook Query language), &lt;a href=&#34;http://tinkerpop.apache.org/gremlin.html&#34;&gt;Gremlin&lt;/a&gt; and &lt;a href=&#34;https://www.opencypher.org/&#34;&gt;Cypher&lt;/a&gt;, the end user (developer) has to write down the query in some form according to the formal system of the language. That also implies that you do know your data model in some detail, i.e. structural form of data, instances vs object types, and kind of connections/links. This is essential to describe your query in the language.&lt;/p&gt;
&lt;p&gt;Therefore &lt;strong&gt;all Query Languages are dependent on their data model and naturally they also carry the deficiencies of their data model and several quirks of their vendor&lt;/strong&gt;. So in my opinion that is where all bets are off. Better show me a new data model, describe how it deviates from other established data models, in what terms it is better and most important the functional operations, the basic mechanisms behind the implementation of a query language that is based on this data model.&lt;/p&gt;
&lt;p&gt;Speaking about HypergraphQL, and former Facebook GraphQL that is not something new. They originate from &lt;a href=&#34;https://en.wikipedia.org/wiki/Freebase&#34;&gt;Freebase MQL&lt;/a&gt; language, which &lt;a href=&#34;https://discourse.cayley.io/t/query-languages-tour/191&#34;&gt;according to Barak Michener&lt;/a&gt;, a former employer of Metaweb Technologies and later on of Google, it was mainly developed in the period between 2006-2008 to elevate GQL a query language for a kind of triple store database (graphd). And if we decide to search further back MQL approach looks like the Query by Example (&lt;a href=&#34;https://en.wikipedia.org/wiki/Query_by_Example&#34;&gt;QBE&lt;/a&gt;) language for relational databases that was devised during the mid-1970s, I still remember Ashton-Tate &lt;a href=&#34;https://en.wikipedia.org/wiki/DBase&#34;&gt;dBase&lt;/a&gt; product that I was playing with as a BSc student.&lt;/p&gt;
&lt;p&gt;But what really puzzles me is that I hardly see a strong mathematical foundation, e.g. like Codd&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_algebra&#34;&gt;relational algebra&lt;/a&gt;, that covers important features of all these query languages I mentioned above. I am specifically referring to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;closed vs open world assumption&lt;/li&gt;
&lt;li&gt;closure under operations&lt;/li&gt;
&lt;li&gt;constrains&lt;/li&gt;
&lt;li&gt;updates&lt;/li&gt;
&lt;li&gt;joins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is why in a &lt;a href=&#34;https://healis.eu/en/post/20180310/&#34;&gt;previous article&lt;/a&gt; of mine I have proposed to return back to the roots and investigate better the Relational Algebra and these reasons that made both SQL and NoSQL DBMS to deviate from the original relational model path.&lt;/p&gt;
&lt;p&gt;For those that follow my posts, they are aware that I am not speaking purely from a theoretical point of view. There is an alternative data model (&lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;) that I propose, a particular software technology based on this (&lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Associative Semiotic Hypergraph&lt;/a&gt;) and two prototypes (&lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/project/hypermorph/&#34;&gt;HyperMorph&lt;/a&gt;) implemented and demonstrated with an intuitive functional declarative way to query things. Nevertheless performance is a top priority, and that is what I am currently investigating.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/yet-another-query-language-really-athanassios-hatzis-phd/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Back to the roots, Relational Data Model</title>
      <link>https://healis.eu/en/post/20180310/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20180310/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#back-to-the-roots&#34;&gt;Back to the roots&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#relational-model-vs-other-data-models&#34;&gt;Relational model vs Other data models&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#our-perspective&#34;&gt;Our perspective&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;back-to-the-roots&#34;&gt;Back to the roots&lt;/h2&gt;
&lt;p&gt;Recently, I realized that the &lt;strong&gt;associative, semiotic, hypergraph&lt;/strong&gt;, or in short the &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;R3DM/S3DM&lt;/a&gt;, technology framework we propose to be adopted in database management systems can be considered in many ways an extension to &lt;a href=&#34;https://en.wikipedia.org/wiki/Edgar_F._Codd&#34;&gt;Codd&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational Model&lt;/a&gt;. I am aware that this is a big claim and certainly this is not the place or the time to lay down my arguments, suffice it to say how this occurred to me.&lt;/p&gt;
&lt;p&gt;I have partially implemented &lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt; technology twice on top of two different &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_store&#34;&gt;data stores&lt;/a&gt; and I noticed that those &lt;strong&gt;add and get operations&lt;/strong&gt; we defined are closely related to Codd&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_algebra&#34;&gt;relational algebra operations&lt;/a&gt;, while data sets, i.e. domains, and a user defined type system match the &lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics)&#34;&gt;sets defined in mathematics&lt;/a&gt; and relational theory. Coincidentally Codd&amp;rsquo;s Relational logic goes back to Aristotle and the corner stone of our technology, which is the &lt;a href=&#34;https://healis.eu/en/project/r3dm/#computational-semiotic-triangle&#34;&gt;computational semiotic triangle&lt;/a&gt;, goes back to Aristotle too. I will briefly mention that one basic difference is that both the heading set and the body tuples of the Relation, in fact everything, are transformed and uniformly represented with numerical key references. Therefore it can also be called &lt;strong&gt;Reference Database Management System (RDBMS)&lt;/strong&gt;. All these are simply good indications. I believe we are on the right track.&lt;/p&gt;
&lt;p&gt;The truth is, and I will quote &lt;a href=&#34;https://en.wikipedia.org/wiki/Christopher_J._Date&#34;&gt;Chris Date&lt;/a&gt; here, that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;if you are proposing to replace technology A by technology B first is counted on you to understand technology A and then it is counted on you that there is some problem that technology A does not solve and technology B does solve&lt;/em&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the best person I have found to teach me Relational database technology, so that I can acquire an in-depth understanding, is Chris Date himself. The following video is a clip from an excellent, &lt;a href=&#34;http://shop.oreilly.com/product/0636920030553.do&#34;&gt;illuminating workshop that explains Codd&amp;rsquo;s Relational Theory&lt;/a&gt; to computer professionals, but most importantly, he shows what a real relational product would be like, and how and why it would be so much better than what’s currently available.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/qx0F7TfA8CI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;relational-model-vs-other-data-models&#34;&gt;Relational model vs Other data models&lt;/h2&gt;
&lt;p&gt;That said, allow me to have my doubts about whether many of the proponents of other database technologies, including those in SQL databases and those in NoSQL databases, have understood what are really the differences with respect to Relational model and at what abstraction level they occur. Again this is not the place or time to elaborate on this. Instead, I am inviting you to ponder on the architectural design of modern database management systems.&lt;/p&gt;
&lt;p&gt;You see in practice, it is too difficult to make a very clean separation between the physical, logical and conceptual levels of information. From an engineer&amp;rsquo;s point of view it is hard to separate theoretical from practical purposes. Moreover, many of these NoSQL DBMS, that are in fashion nowadays, are suited to solve a particular type of problem and this is why you often hear that big corporations and large companies have many different kinds of DBMS at the back-end. Not to mention that nowadays there is the trend to market many DBMS as multi-model database systems. And that made me also to realize that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;there has to be a distinction between those problems that one solves at the physical level e.g. physical layout, partition and availability and those that apply more at the logical-conceptual level e.g. integrity and data modeling. Therefore, I foresee that in the future systems will have to use a combination of these two levels that somehow will have to be tuned and made to work harmonically independent of each other&lt;/em&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;our-perspective&#34;&gt;Our perspective&lt;/h2&gt;
&lt;p&gt;This is our perspective towards the architectural design of modern database management systems that fully justifies our choice of &lt;strong&gt;marketing TRIADB as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Middleware&#34;&gt;middleware&lt;/a&gt;&lt;/strong&gt;. We are focusing to provide an &lt;strong&gt;efficient and effective solution at the logical and conceptual level&lt;/strong&gt; using an existing implementation of the database physical layer. Relational modeling theory applies here too, from what I understand it was the implementation details at the physical level and perhaps other naive simplifications that made many to depart from the original Relational model. So it&amp;rsquo;s time to return back to the roots and make some real progress.&lt;/p&gt;
&lt;p&gt;In case you, as a reader, have the same feelings and see some truth on my writing, I would be more than happy to discuss with you about the progress we are making with TRIADB and associative, semiotic, hypergraph technology and definitely exchange ideas and share some common thoughts on these database topics. Stay tuned.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/relational-database-vs-others-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20180305 Pulse Article - Relational Data Model : Back to the roots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Chris Date - SQL and Relational Theory Master Class - O&amp;rsquo;Reilly Workshop&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Athanassios I. Hatzis, LinkedIn post, March 2018&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TRIADB at Connected Data London</title>
      <link>https://healis.eu/en/talk/triadb_connected_data/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/talk/triadb_connected_data/</guid>
      <description>&lt;h2 id=&#34;video-recording-of-speech&#34;&gt;Video Recording of Speech&lt;/h2&gt;
&lt;p&gt;The following video is from a presentation and demonstration of TRIADB at &lt;a href=&#34;https://connected-data.london/connected-data-london-2017/&#34;&gt;Connected Data London conference on the 16th of November 2017&lt;/a&gt;. The event brings together top class innovators, thought leaders and practitioners in the field of Artificial Intelligence and Semantic Technology.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BiEAbpCOC1A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Unfortunately the light conditions were not ideal for the demonstration of our system. We recommend you visit the links at the right side of the following table to view Pandas notebooks in addition to the video above. You may also start the video at the corresponding time.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Pandas Notebook&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://youtu.be/BiEAbpCOC1A?t=5m1s&#34;&gt;05:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://test.healis.eu/TRIADB20171116/Traversal.html&#34;&gt;Traversal and Hypergraph&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://youtu.be/BiEAbpCOC1A?t=9m1s&#34;&gt;09:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://test.healis.eu/TRIADB20171116/NodeObjects.html&#34;&gt;Hypernodes, Hyperedges and Tuples&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://youtu.be/BiEAbpCOC1A?t=11m45s&#34;&gt;11:45&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://test.healis.eu/TRIADB20171116/HyperCollections.html&#34;&gt;Hypercollections&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://youtu.be/BiEAbpCOC1A?t=13m1s&#34;&gt;13:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://test.healis.eu/TRIADB20171116/Data_Model.html&#34;&gt;Data Model&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://youtu.be/BiEAbpCOC1A?t=15m30s&#34;&gt;15:30&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://test.healis.eu/TRIADB20171116/Mapping.html&#34;&gt;Mapping&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;slides-of-the-talk&#34;&gt;Slides of the talk&lt;/h2&gt;
&lt;iframe
  style=&#34;width: 100%; height: 500px;&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;
  src=&#34;http://www.slideshare.net/slideshow/embed_code/82217659?rel=0&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt;
&lt;/iframe&gt;

&lt;h2 id=&#34;screen-captures&#34;&gt;Screen Captures&lt;/h2&gt;








  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img1.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img1_hu9f2fbc5a7b2b6140b1e520132ee249ed_140448_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img2.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img2_hu4df91ef5ca4966b9794e52585d3f29da_130096_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img3.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img3_hu85db5d9239943d2756c8f2f354328790_81239_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img4.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img4_hu676c730d7a702c63cec8582f15e1e412_85147_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img5.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img5_hu5ff3b3f03d263e02c1ef7e7531bc07c3_77785_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img6.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img6_hu826266c34aa39368339914b8e817fd28_107259_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img7.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img7_hu7059e637d75a091a938cb26a84c93be7_150986_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img8.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img8_hu1a8d983db4a57324f4f553234fc6af27_95827_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img9.png&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/talk/triadb_connected_data/screen_captures/img9_hu7a79b6d4577f08d747f8650a08aab1be_202333_0x190_resize_lanczos_3.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;first two images&lt;/strong&gt; of our collection portray a hypegraph of seven records, two on the left (Parts), three in the center (Catalog Entries) and another two on the right (Suppliers). The main difference is that in the first one nodes are shown with values and in the second one with 2D numerical references. Images are aligned so you can switch back and forth with the left and right arrow keys.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;third image&lt;/strong&gt; shows execution of TRIADB Python commands on a Jupyter notebook. This is a traversal query that fetches the tuples that make the neighbourhood of the two parts that we saw in the first two images.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;fourth image&lt;/strong&gt; two records are drawn, they have common values for the weight and the name of the part. There is a red (partID=993) and a silver (partID=994) Acme Widget Washer but they do not share a common unit for the weight. This cleansing problem is solved in the &lt;strong&gt;fifth image&lt;/strong&gt; where the two parts share three common values.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;sixth image&lt;/strong&gt; visualizes the bipartite mapping solution. The fields on the left are mapped onto attributes on the right and the pandas 2D frame in the seventh image presents their names and key references.&lt;/p&gt;
&lt;p&gt;Finally the &lt;strong&gt;last two images&lt;/strong&gt; display a hypergraph data model for movies and a movie instance with many participants. Again you can switch back and forth with the left and right arrow keys.&lt;/p&gt;
&lt;h2 id=&#34;video-screen-capture-of-triadb&#34;&gt;Video Screen Capture of TRIADB&lt;/h2&gt;
&lt;p&gt;Screencast of TRIADB on a toy problem dataset with a junction table (Catalog) that bridges the other two tables (Supplier and Part). Videos demonstrate in detail the python client API functional operations of TRIADB system such as add models, add resources and records, get operations to retrieve data and hypergraph traversal operations.&lt;/p&gt;
&lt;p&gt;There are five videos in &lt;a href=&#34;https://www.youtube.com/playlist?list=PL_Z7O8S4ThCxqPZmqZiZTQx9pdMpt3dsj&#34;&gt;this playlist&lt;/a&gt; of HEALIS &lt;a href=&#34;https://www.youtube.com/channel/UCoCkNTkn1dAbtyr5EMvzc7w&#34;&gt;youtube channel&lt;/a&gt;. You may start watching the last video of this series to get an overall impression of TRIADB&lt;/p&gt;
&lt;h3 id=&#34;part-15&#34;&gt;Part 1/5&lt;/h3&gt;
&lt;p&gt;In this recording session we demonstrate the first Jupyter Notebook. We show how to use TRIADB functional commands to reset and rebuild the framework. And we explain a bit the associatve and semiotic architectural design of our framework.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-yYGU99mi2s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;part-25&#34;&gt;Part 2/5&lt;/h3&gt;
&lt;p&gt;In this video you will learn how to add a data model, how to search and retrieve information from the data model environment of TRIADB framework and how to visualize your data model.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GIlECSJEx3k&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;part-35&#34;&gt;Part 3/5&lt;/h3&gt;
&lt;p&gt;In this video we continue with adding resources, mapping these resources to the data model and finally adding records into TRIADB.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/SpxHBmlHAZw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;part-45&#34;&gt;Part 4/5&lt;/h3&gt;
&lt;p&gt;In this video we continue with GET operations on Supplier-Part-Catalog data set and we describe various environments according to S3DM/R3DM data model. These include the Data Types Environment (DTE), Data Values Environment (DVE), Data Resources Environment (DRE), Data Models Environment (DME) and Data Sets Environment (DSE).

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/_-Ve7XZ8OT0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;part-55&#34;&gt;Part 5/5&lt;/h3&gt;
&lt;p&gt;In this video, first we explain the hypergraph visual representation of our data model, then we compare it with relational data model and finally we traverse the hypergraph.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/uTchBCyfyxI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;acknowledgement&#34;&gt;Acknowledgement&lt;/h2&gt;
&lt;p&gt;We would like to thank Intersystems Cache for providing us with a license of Caché DBMS to test TRIADB.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triadb-connected-data-london-athanassios-i-hatzis-phd/&#34;&gt;LinkedIn - 20180103 Pulse Article - TRIADB at Connected Data London&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_Z7O8S4ThCxqPZmqZiZTQx9pdMpt3dsj&#34;&gt;Youtube - HEALIS Channel Playlist - TRIADB Supplier Part Catalog (SPC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://connected-data.london/connected-data-london-2017/&#34;&gt;Connected Data London - 2017 Event&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Are our old data model standards out of shape ?</title>
      <link>https://healis.eu/en/post/20170709/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170709/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#comparison-with-other-data-model-standards&#34;&gt;Comparison with other data model standards&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#namespace-problem&#34;&gt;Namespace problem&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#separate-abstraction-layers&#34;&gt;Separate abstraction layers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#granularity-with-air-units&#34;&gt;Granularity with AIR units&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#filtering-instead-of-querying&#34;&gt;Filtering instead of querying&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#a-solid-theoretical-background&#34;&gt;A solid theoretical background&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summarize&#34;&gt;Summarize&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Both Topic Maps and RDF/OWL exhibit signs of aging. In my opinion these signs do not indicate maturity levels but on the contrary they signal a re-examination of the data modeling, information representation problem. There is an emergent need to unify and exchange transformations between serialization formats (XML, JSON, etc), (graph) DBMS data model standards and semantic web data models.&lt;/p&gt;
&lt;p&gt;Hence this is my speech at European Wolfram Technology Conference 2017 about a new data modeling framework &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;R3DM/S3DM&lt;/a&gt; that is implemented on top of OrientDB graph database and coded in Wolfram Mathematica.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BZleqH7iMng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;comparison-with-other-data-model-standards&#34;&gt;Comparison with other data model standards&lt;/h2&gt;
&lt;p&gt;These are a few critical points to consider when you compare this data model with Topic Maps and RDF/OWL:&lt;/p&gt;
&lt;h3 id=&#34;namespace-problem&#34;&gt;Namespace problem&lt;/h3&gt;
&lt;p&gt;Both RDF/OWL and Topic Maps are suffering from namespace problems and complexity. In topic maps for example, when you want to define associations, i.e. n-ary relations, relationships you must specify at least type and roles. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Part(08:pid, &amp;quot;Acme Widget Washer&amp;quot;:pname, white:pcolor )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But in this representation you do not have a handle for the association instance and the context of roles has always to be present to assign meaning on values. Things become even more complicate with RDF association (type or instance) where everything has to be broken down in triples with labeled uni-directional edges.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Prt1 --pid--&amp;gt; 08, Prt1 --pname--&amp;gt; &amp;quot;Acme Widget Washer&amp;quot;, Prt1 --pcolor--&amp;gt; white}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The predicate of RDF triplet is causing more harm than good. Any SPARQL traversal algorithm is heavily dependent on these predicates, and in practice for large collaborative knowledge bases, e.g. Freebase, they used to label both directions to make traversal easier. You may also consider that owl:sameAs adds more complexity in the graph and traversal.&lt;/p&gt;
&lt;p&gt;Now compare these with the simplicity of Entity-Relationship model. The database vocabulary has the header of the association (relation) and the body contains tuples.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tuple type      : (pid, pname, pcolor)&lt;/code&gt;
&lt;code&gt;tuple instance  : (08, &amp;quot;Acme Widget Washer&amp;quot;, white)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Is there an alternative representation to combine these ? Yes there is, you make a &lt;strong&gt;uniform numerical representation&lt;/strong&gt; of types and instances, of entities and attributes, of data values and data types and you bind everything in a hypergraph space.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tuple type     : 233:0{85:0, 91:0, 34:0}&lt;/code&gt;
&lt;code&gt;tuple instance : 233:1[85:6, 91:2, 34:9]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The vocabulary of relational model (header) permits to have &lt;strong&gt;ordered tuples&lt;/strong&gt; of values (body), the numerical reference vectors of R3DM/S3DM model permits to have &lt;strong&gt;unordered tuples&lt;/strong&gt; and there is a handle that represents each tuple instance. In RDF to represent a tuple you have to break it down into triples where you repeat the &lt;code&gt;subject&lt;/code&gt;. And values (&lt;code&gt;objects&lt;/code&gt;) &lt;strong&gt;must be semantically accompanied by the predicate&lt;/strong&gt;. Thus R3DM/S3DM associative representation with numerical references is simpler and it proves to be more efficient with indexing too !&lt;/p&gt;
&lt;h3 id=&#34;separate-abstraction-layers&#34;&gt;Separate abstraction layers&lt;/h3&gt;
&lt;p&gt;It is important to separate digital information resources, e.g. web pages, files, folders, audio/video recordings, images, text documents etc from real things e.g. humans, organizations, objects, etc. It is also important to distinguish between a flexible model and its instances. But it is equally or more important to separate any abstract concept from data values (numerical, string, bits, etc). Because the first is the vehicle for human thinking and the second is the way computers are processing data. Therefore this gap has to be bridged somehow. R3DM/S3DM achieves this with an extra abstraction layer where everything is connected with &lt;a href=&#34;https://healis.eu/en/post/20150320/&#34;&gt;Atomic Information Resource&lt;/a&gt; (AIR) units. This AIR unit defines also the level of granularity. Instead of building everything with Topics, you use AIR units.&lt;/p&gt;
&lt;h3 id=&#34;granularity-with-air-units&#34;&gt;Granularity with AIR units&lt;/h3&gt;
&lt;p&gt;But the AIR unit has the advantage that can be indexed easily, it is represented with a numerical vector, an address that can pinpoint the exact location of an Entity-Attribute-Value item. It is similar to an IPv4 address of a machine (e.g. domain, network, server, node/device/machine). My question is the following. &lt;span class=&#34;markup-quote&#34;&gt;If we use such addresses for connecting machines on the internet, why don&amp;rsquo;t we establish a similar standard for connecting data ?&lt;/span&gt; An AIR unit is the fundamental powerful construction unit for smart data. It knows its siblings, its parent, its type, its nexus, its associated AIR units (nodes). A tuple of such units can stand on its own, without a header and its completely meaningful because the context has already been defined.&lt;/p&gt;
&lt;h3 id=&#34;filtering-instead-of-querying&#34;&gt;Filtering instead of querying&lt;/h3&gt;
&lt;p&gt;Thanks to the uniform representation of everything with AIR units that are connected with bidirectional edges there is no need to define a query language but instead you define powerful functional operations that filter and add data in an associative manner in a fully typed environment. R3DM/S3DM supports types for database metadata, data sources, models, entity types, attribute types, items (instances), link types and value types. Again everything is constructed with AIR units. Both bidirectional edges and a full type system that is based on primitives were key features of Metadata Freebase project and then Google&amp;rsquo;s knowledge graph.&lt;/p&gt;
&lt;h3 id=&#34;a-solid-theoretical-background&#34;&gt;A solid theoretical background&lt;/h3&gt;
&lt;p&gt;R3DM/S3DM data model is founded on the theory of semiosis. There have been attempts to connect RDF/OWL with Aristotle&amp;rsquo;s triangle of reference/meaning but in my opinion they fail to capture the essence of the abstraction mechanism in semiosis which is played by the sign as the vehicle of communication between the signifier and the signified.&lt;/p&gt;
&lt;h2 id=&#34;summarize&#34;&gt;Summarize&lt;/h2&gt;
&lt;p&gt;To summarize the power of R3DM/S3DM is hidden on its Atomic Information Resource units that are fully typed, addressable and can be dereferenced and the formation of n-ary bidirectional associations.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-6289775148434366465&#34;&gt;LinkedIn - 20170709 Topic Maps Group Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6289922338628734979&#34;&gt;LinkedIn - 20170709 Semantic Web Research Group Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/our-old-data-model-standards-out-shape-athanassios-i-hatzis-phd&#34;&gt;LinkedIn - 20170709 Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6262704855635365889&#34;&gt;LinkedIn - 20170409 Update about namespace problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The three dimensions of AI and a fourth one as the key to unlock them</title>
      <link>https://healis.eu/en/post/20170623/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170623/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#abstract&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In an awesome &lt;a href=&#34;http://www.darpa.mil/about-us/darpa-perspective-on-ai&#34;&gt;review of AI&lt;/a&gt; John Launchbury, special assistant to DIRO, DARPA, defined four dimensions of processing information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;perceiving&lt;/li&gt;
&lt;li&gt;learning&lt;/li&gt;
&lt;li&gt;abstracting&lt;/li&gt;
&lt;li&gt;reasoning&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-O01G3tSYpU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This is not any perspective on AI, it is a perspective from the founders and pioneers of internet. Although there has been significant progress with first and second generation AI systems in reasoning, learning and perceiving, abstraction has not been part of the game. In fact Launchbury could not say much about this in his talk.&lt;/p&gt;
&lt;p&gt;Nevertheless he explained clearly where we are heading in the &lt;strong&gt;third generation of AI systems&lt;/strong&gt;. Models and contextual information will play a critical role. But this is a pretty close match with &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiosis&#34;&gt;Aristotle’s theory of semiosis&lt;/a&gt;. The mechanism of abstraction is related to the ideal world of models and the world of real objects. Those two worlds are bridged by symbols, signs and these create meaning in contextual information. So this is the objective of third generation AI.&lt;/p&gt;
&lt;p&gt;It is not a coincidence that I have been investigating since 2012 how this &lt;a href=&#34;https://en.wikipedia.org/wiki/Triangle_of_reference&#34;&gt;triangle of meaning&lt;/a&gt; can be applied to the problem of information representation. Recently I have presented officially to the public &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;R3DM/S3DM&lt;/a&gt; data modeling framework in &lt;a href=&#34;https://healis.eu/en/talk/triadb_wolfram/&#34;&gt;European Wolfram Technology Conference&lt;/a&gt;. In one of his talks Conrad Wolfram emphasized how important is abstraction to education and learning. But so far this mechanism of abstraction has not been computable. This is what we anticipate to see in the near future.&lt;/p&gt;
&lt;p&gt;The mechanism of abstraction can unify these other three processes of perception-interpretation, learning, and reasoning. And it can also &lt;strong&gt;interconnect every thing on the internet, every bit of information, in the very same way our computers are interconnected with IP addresses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We are here to &lt;strong&gt;build powerful, meaningful relationships easily&lt;/strong&gt;. This is our mantra after all.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/three-dimensions-ai-fourth-one-key-unlock-them-hatzis-phd&#34;&gt;LinkedIn - 23/06/2017 Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Associative Semiotic Hypergraph API in Mathematica for Next-Generation BI Systems</title>
      <link>https://healis.eu/en/talk/triadb_wolfram/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/talk/triadb_wolfram/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://healis.eu/en/project/r3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt; is a conceptual data model that attempts to unify existing data model standards by elevating n-ary relationships on a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypergraph&#34;&gt;hypergraph&lt;/a&gt;, a.k.a associations. In this framework semantics are defined and explained with three alternative paradigms (&lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming&#34;&gt;object-oriented&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)&#34;&gt;network graph&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiotics&#34;&gt;semiotics&lt;/a&gt;). It is the last one that gives birth to its name and this is also the cornerstone of its reference mechanism. R3DM/S3DM redefines RDBMS as a &lt;strong&gt;Reference Database Management System&lt;/strong&gt; with a set of functional operations that match those of SQL statements and are implemented in Wolfram Language.&lt;/p&gt;
&lt;p&gt;Based on these operations we demonstrate interactively using Wolfram Notebook interface how we can create R3DM/S3DM environment on top of &lt;a href=&#34;https://orientdb.org/&#34;&gt;OrientDB Graph Database&lt;/a&gt; and how we can add a Domain Model or a Data Set. We also present R3DM/S3DM filtering mechanism for traversing and cleansing and we compare and review these command operations in &lt;a href=&#34;https://www.qlik.com/us/products/qlikview&#34;&gt;Qlikview&lt;/a&gt; graphical user environment.&lt;/p&gt;
&lt;p&gt;The output of this interactive exploration of data modeling, processing and analysis and any result set can be returned in the form of a table using Wolfram Language constructs such as &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;List(s)&lt;/a&gt;, &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule(s)&lt;/a&gt;, &lt;a href=&#34;https://reference.wolfram.com/language/ref/Association.html&#34;&gt;Association(s)&lt;/a&gt; and &lt;a href=&#34;https://reference.wolfram.com/language/ref/Dataset.html&#34;&gt;Dataset(s)&lt;/a&gt;. There is also the option of visualizing hypergraphs with the &lt;a href=&#34;https://reference.wolfram.com/language/ref/Graph.html&#34;&gt;Graph network&lt;/a&gt; function and attribute sets as column charts.&lt;/p&gt;
&lt;p&gt;Finally we discuss our future business plan and we share with you our mantra:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;We build powerful meaningful relationships easily&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;recording-of-the-talk&#34;&gt;Recording of the talk&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BZleqH7iMng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6289712416192372736/&#34;&gt;LinkedIn - 09/07/2017 Update about my youtube video presentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Many-to-Many Relationships</title>
      <link>https://healis.eu/en/post/20170420/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170420/</guid>
      <description>&lt;h2 id=&#34;in-the-past&#34;&gt;In the Past&lt;/h2&gt;
&lt;p&gt;A many to many relationship is represented with an associative entity. Experts and non-experts in IT field know that this is one of the most important topics in Entity-Relationship and Relational theory. Seven years ago, when I started my data modeling saga, searching for SQL joins returned numerous results and few of them were on XML data. But I could hardly find any discussion about how a join table is related to the theory of two international data model standards, namely RDF and Topic Maps. A year later, in 2010 W3C started publishing &lt;a href=&#34;https://www.w3.org/TR/rdb-direct-mapping/&#34;&gt;&amp;ldquo;A Direct Mapping of Relational Data to RDF&amp;rdquo;&lt;/a&gt;. Coincidentally, back in 2009-2010 the &lt;a href=&#34;https://en.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL movement&lt;/a&gt; was born and Graph Databases started becoming a hot topic but nodes and edges were shrouded in disorientation for users of relational databases.&lt;/p&gt;
&lt;h2 id=&#34;in-the-present&#34;&gt;In the Present&lt;/h2&gt;
&lt;p&gt;It is 2017 and in my opinion the situation with associative entities has become darn confusing. Edges of a Property Graph data model are bidirectional but RDF links are unidirectional. A bridge-table of an Entity-Relationship schema has links only at the many side, i.e. we have an intersection of two one-to-many relationships. Foreign keys of a bridge table can be conveyed to RDF objects but for integrity and cardinality constrains you have to use OWL. Topic Maps use bidirectional associations with roles, therefore they are closer to the property graph data model. Each data model has a query language SQL, SPARQL, TMQL, Cypher, OrientDB SQL and GraphQL. There are significant differences among them and you have to understand the model in order to process or store efficiently data.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;I took a firm decision to clear a bit this info-glut with a series of articles in associative data modeling written with a hands-on practice style:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160825/&#34;&gt;Part 1/6&lt;/a&gt; is about Entity-Relationship data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160902/&#34;&gt;Part 2/6&lt;/a&gt; discusses Topic-Map data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160913/&#34;&gt;Part 3/6&lt;/a&gt; is focusing on Property Graph data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20161220/&#34;&gt;Part 4/6&lt;/a&gt; is explaining RDF Graph data model and Sentences associative data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170211/&#34;&gt;Part 5/6&lt;/a&gt; is a demonstration of QlikView associative data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Part 6/6&lt;/a&gt; presents R3DM/S3DM associative semiotic hypergraph data modeling perspective&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/49970/49970-6183777238341681155&#34;&gt;LinkedIn Semantic Web Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6183777764466786305&#34;&gt;LinkedIn Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2013423/2013423-6183768777587453956&#34;&gt;LinkedIn Data Scientists Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/108904/108904-6183776147260608513&#34;&gt;LinkedIn Data Warehouse &amp;amp; Business Intelligence Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6183774369735544834&#34;&gt;LinkedIn Database &amp;amp; Data Store Professionals Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6183771432149884931&#34;&gt;LinkedIn Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6183764505768534020&#34;&gt;LinkedIn Database Experts Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Associative Semiotic Hypergraph based on R3DM/S3DM</title>
      <link>https://healis.eu/en/post/20170412/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170412/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#abstract&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#r3dm-definition&#34;&gt;R3DM Definition&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architecture-overview&#34;&gt;Architecture Overview&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#conceptual-perspective&#34;&gt;Conceptual Perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logical-perspective&#34;&gt;Logical Perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#instances-perspective&#34;&gt;Instances Perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#semantic-perspective&#34;&gt;Semantic Perspective&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#environment-type-systems&#34;&gt;Environment Type Systems&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#database-type-system-dbs&#34;&gt;Database Type System (DBS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#model-type-system-mts&#34;&gt;Model Type System (MTS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#entity-type-system-ets&#34;&gt;Entity Type System (ETS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#attribute-type-system-ats&#34;&gt;Attribute Type System (ATS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#items-type-system-its&#34;&gt;Items Type System (ITS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#value-type-system-vts&#34;&gt;Value Type System (VTS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-sources-type-system-dss&#34;&gt;Data Sources Type System (DSS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#link-type-system-lts&#34;&gt;Link Type System (LTS)&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#functional-operations&#34;&gt;Functional Operations&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#get-anything&#34;&gt;Get Anything&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-anything&#34;&gt;Add anything&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#filtering&#34;&gt;Filtering&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#case1-condition-and-sorting-order&#34;&gt;Case1: Condition and Sorting Order&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#case2-condition-and-cleansing&#34;&gt;Case2: Condition and Cleansing&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#case3-graph-traversal&#34;&gt;Case3: Graph Traversal&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-end&#34;&gt;The End&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In this last post for this series &lt;code&gt;Associative Semiotic Hypergraph&lt;/code&gt; technology is introduced to the public with a demonstration of a fully functional prototype that is built in &lt;a href=&#34;http://orientdb.com/&#34;&gt;OrientDB&lt;/a&gt; multi-model DBMS and coded with &lt;a href=&#34;http://www.wolfram.com/language/?source=nav&#34;&gt;Wolfram Language&lt;/a&gt;. This is the first working prototype that is based on &lt;strong&gt;&lt;a href=&#34;https://healis.eu/en/project/r3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;&lt;/strong&gt; conceptual, computational semiotics framework, the theoretical framework behind our technology.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It is remarkable how we turned an electronic device that is processing only 1s and 0s to an inseparable intelligent companion and trustworthy assistant. There is a long &lt;a href=&#34;http://www.wolframalpha.com/docs/timeline/computable-knowledge-history-6.html&#34;&gt;historical record of technological achievements&lt;/a&gt; in the development of computable information and the interactive engagement of the user. In every step of our technological progress we made systems with better performance, pushing towards a simpler, extensible, modifiable, scalable and generic logic. And the key behind this imaginative use of computers is the captivating abstract thinking process of the human brain. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; conceptual and logical framework is an attempt to model databases with the very same intimate mechanism that creates models. In this endeavor, there could not be a better theory as the base of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; other than Aristotle&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiosis&#34;&gt;Semiosis&lt;/a&gt;. &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiotics&#34;&gt;Semiotics&lt;/a&gt; is the study of meaning-making and it binds semantics with symbolic representation and transformation which is the bread and butter of computer programs and digital storage. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is not only conceived along this theory, it is also founded on those semiotic principles.&lt;/p&gt;
&lt;h3 id=&#34;r3dm-definition&#34;&gt;R3DM Definition&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;R3DM - &lt;strong&gt;Representation(Resource, Realization)&lt;/strong&gt; or S3DM - &lt;strong&gt;Sign(Signified, Signifier)&lt;/strong&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Computational_semiotics&#34;&gt;computational semiotic&lt;/a&gt; framework with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Morphism&#34;&gt;mathematical morphism&lt;/a&gt; that formalizes the architectural design of &lt;a href=&#34;http://hypergraphdb.org/&#34;&gt;associative&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_model_of_data&#34;&gt;hypergraph&lt;/a&gt; databases.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Following this definition we will unfold &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; and explain its main characteristics starting with the classic three layered database architecture.&lt;/p&gt;
&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h2&gt;
&lt;p&gt;One of the main purposes of &lt;a href=&#34;https://www.zachman.com/ea-articles-reference/58-conceptual-logical-physical-it-is-simple-by-john-a-zachman&#34;&gt;Zachman&amp;rsquo;s conceptual, logical, and physical database design&lt;/a&gt;, is to provide data independence at the application-user level. The three layers are in descending levels of abstraction where the conceptual model is the most abstract and the physical data model the least abstract or most concrete.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Conceptual_schema&#34;&gt;conceptual model&lt;/a&gt; usually refers to the domain of discourse and describes the semantics of the application without any reference to the database technology. On the contrary, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Logical_data_model&#34;&gt;logical data model&lt;/a&gt; implements the concept model in terms of abstract data types, (e.g. List, Set, Map, Graph). In the following list you can see the correspondence between these two layers for five popular data models.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conceptual Schema&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Predicates&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entities and Relationships&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_Maps&#34;&gt;Topics, Associations and Occurences&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;Subjects, Objects and Predicates&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_database&#34;&gt;Classes and Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logical Structure&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;n-ary Relation, Tuples and Attributes&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Table, Rows and Columns&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypergraph&#34;&gt;Hyperedges, Hypernodes&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_databasehttps://en.wikipedia.org/wiki/Type_system&#34;&gt;Nodes, Edges and Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_(computer_science)&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both conceptual and logical layers should act independently of the underlying &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_engine&#34;&gt;database engine&lt;/a&gt;, i.e. &lt;a href=&#34;https://en.wikipedia.org/wiki/Physical_data_model&#34;&gt;physical data model&lt;/a&gt;. The following is an indicative list of what is normally included in this layer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Physical Data Storage Organization&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_engine#Data_orientation_and_clustering&#34;&gt;Data orientation (rows/columns, correlational)&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_structure&#34;&gt;Data structure&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_storage&#34;&gt;Object storage&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Block_(data_storage)&#34;&gt;Block storage&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_cluster&#34;&gt;Data cluster&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_index&#34;&gt;Database index&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conceptual-perspective&#34;&gt;Conceptual Perspective&lt;/h3&gt;
&lt;p&gt;Regarding to the conceptual data model &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is using terms that are well-known among database experts, i.e. &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt;. In &lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt; segment we can view instances of &lt;strong&gt;Supplier&lt;/strong&gt;, &lt;strong&gt;Part&lt;/strong&gt; and &lt;strong&gt;Catalog&lt;/strong&gt; &lt;code&gt;Entities&lt;/code&gt; and the &lt;code&gt;Attributes&lt;/code&gt; that describe them. Remember that in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; play the role of abstract concepts that we associate to create models of our data, they are NOT containers or instances of data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity&#34;&gt;&lt;code&gt;Entity&lt;/code&gt;&lt;/a&gt; is something that has a discrete, independent existence,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. &lt;em&gt;Eiffel Tower&lt;/em&gt; (Building), &lt;em&gt;Apple Inc&lt;/em&gt; (Company), &lt;em&gt;Porsche 993 GT2 with a specific VIN&lt;/em&gt; (Car)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Attribute_(computing)&#34;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; is a piece of information that describes an &lt;code&gt;Entity&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. (referring to the above &lt;code&gt;Entities&lt;/code&gt;) &lt;em&gt;300m&lt;/em&gt; (Height),  &lt;em&gt;US$215.639&lt;/em&gt; (Revenue), &lt;em&gt;WP0ZZZ99ZTS392124&lt;/em&gt; (VIN)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/#sect-association&#34;&gt;&lt;code&gt;Association&lt;/code&gt;&lt;/a&gt; represents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An N-ary relation of an &lt;code&gt;Entity&lt;/code&gt; with its &lt;code&gt;Attributes&lt;/code&gt; (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;e.g. Part{ID, Description, Color, Weight}&lt;/li&gt;
&lt;li&gt;e.g. &lt;em&gt;Part998 {998, &amp;ldquo;Fire Hydrant Cap&amp;rdquo;, &amp;ldquo;Red&amp;rdquo;, 7.2}&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;An N-ary relationship between one or more &lt;code&gt;Entities&lt;/code&gt;, sharing one or more common &lt;code&gt;Attributes&lt;/code&gt;, that is defined by the roles they play in the association (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;e.g. Film {StarringActor1, StarringActor2, Director}&lt;/li&gt;
&lt;li&gt;e.g. FilmID { ActorID1, ActorID2, DirectorID }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Code.1&lt;/strong&gt; - Result sets from SQL queries on Supplier, Part and Catalog tables. The same result sets are drawn in &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig1&#34;&gt;&lt;strong&gt;Fig.1&lt;/strong&gt;&lt;/a&gt; with a hypergraph and in &lt;a href=&#34;https://healis.eu/en/post/20170412/#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; segment they are assimilated with AIR units in &lt;code&gt;Associations&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/sqlresultset&#39;&#34; &gt; View Code.1 &lt;/button&gt;



&lt;h3 id=&#34;logical-perspective&#34;&gt;Logical Perspective&lt;/h3&gt;
&lt;p&gt;Changing now our perspective with a focus on the logical building blocks, &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; can be viewed as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypergraph&#34;&gt;hypergraph&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig1&#34;&gt;&lt;strong&gt;Fig.1&lt;/strong&gt;&lt;/a&gt;, comprised of three data structures &lt;code&gt;hyperatoms&lt;/code&gt; (hypernodes), &lt;code&gt;hyperbonds&lt;/code&gt; (hyperedges), and &lt;code&gt;hyperlinks&lt;/code&gt; (edges).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;hyperbond&lt;/code&gt; represents graphically a complex data structure (e.g. tuple, JSON object). The role of &lt;code&gt;hyperbond&lt;/code&gt; is to connect a set of &lt;code&gt;hyperatoms&lt;/code&gt; in order to form associations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;hyperatom&lt;/code&gt; represents graphically an atomic data item (e.g. record value, a key-value pair of a JSON object).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;hyperlink&lt;/code&gt; graphically speaking is a &lt;a href=&#34;http://mathworld.wolfram.com/GraphEdge.html&#34;&gt;Graph Edge&lt;/a&gt; that connects bidirectionally a &lt;code&gt;hyperatom&lt;/code&gt; to &lt;code&gt;hyperbond&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SPC_Hypergraph_with_values-1024x362.jpg&#34; data-caption=&#34;A hypergraph of Supplier Part Catalog for Part No. 998 with its four Catalog entries and its four Suppliers. Hyperedges are in green and hyperatoms are in red&#34;&gt;

&lt;img src=&#34;SPC_Hypergraph_with_values-1024x362.jpg&#34; alt=&#34;A hypergraph of Supplier Part Catalog for Part No. 998 with its four Catalog entries and its four Suppliers. Hyperedges are in green and hyperatoms are in red&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;SPC Hypergraph&lt;/h4&gt;
  &lt;p&gt;
    A hypergraph of Supplier Part Catalog for Part No. 998 with its four Catalog entries and its four Suppliers. Hyperedges are in green and hyperatoms are in red
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;instances-perspective&#34;&gt;Instances Perspective&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Entity&lt;/code&gt; or &lt;code&gt;Attribute&lt;/code&gt; in R3DM/S3DM are &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Class_(computer_programming)&#34;&gt;Types&lt;/a&gt;&lt;/strong&gt; and represent uniquely a single &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics)&#34;&gt;Set&lt;/a&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Instance_(computer_science)&#34;&gt;Instances&lt;/a&gt;&lt;/strong&gt; also known as items (see also &lt;a href=&#34;https://healis.eu/en/post/20170412/#items-type-system-its&#34;&gt;Items Type System&lt;/a&gt;). &lt;code&gt;Entities&lt;/code&gt; or &lt;code&gt;Attributes&lt;/code&gt; can be thought as &lt;strong&gt;references&lt;/strong&gt; to &lt;code&gt;Collections&lt;/code&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig2&#34;&gt;&lt;strong&gt;Fig.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;Meta-Domain-Instance%20Levels-600x407.jpg&#34; data-caption=&#34;Fig. 2 - Meta Level and Domain Level, i.e. Domain Abstractions and Specializations are abstract types, e.g. a Person, a Credit Card, an Item and refer to the Instance Level. The Instance Level includes domain particular instances, e.g. Tom the person, his Credit Card with No: XXXX, an Item ZZZZ that he purchased&#34;&gt;

&lt;img src=&#34;Meta-Domain-Instance%20Levels-600x407.jpg&#34; alt=&#34;Fig. 2 - Meta Level and Domain Level, i.e. Domain Abstractions and Specializations are abstract types, e.g. a Person, a Credit Card, an Item and refer to the Instance Level. The Instance Level includes domain particular instances, e.g. Tom the person, his Credit Card with No: XXXX, an Item ZZZZ that he purchased&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Domain Abstractions and Specializations&lt;/h4&gt;
  &lt;p&gt;
    Fig. 2 - Meta Level and Domain Level, i.e. Domain Abstractions and Specializations are abstract types, e.g. a Person, a Credit Card, an Item and refer to the Instance Level. The Instance Level includes domain particular instances, e.g. Tom the person, his Credit Card with No: XXXX, an Item ZZZZ that he purchased
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Collection&lt;/code&gt; (set of instances) is a generic container for items with no duplicates. A &lt;code&gt;Collection&lt;/code&gt; can have one or more representative concepts (&lt;code&gt;Entities&lt;/code&gt; or &lt;code&gt;Attributes&lt;/code&gt;). We have two types of collection, &lt;code&gt;Datum Collection&lt;/code&gt; and &lt;code&gt;Nexus Collection&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Datum Item&lt;/code&gt; (datum) can be thought as an instance of a particular &lt;code&gt;Attribute&lt;/code&gt; type that points to a single atomic piece of data (atomic value). A &lt;code&gt;Datum Collection&lt;/code&gt; contains &lt;code&gt;Datum Items&lt;/code&gt; (data). In our hypergraph perspective &lt;code&gt;Datum Items&lt;/code&gt; are represented with &lt;code&gt;hyperatoms&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Nexus Item&lt;/code&gt; (nexus) can be thought as an instance of a particular &lt;code&gt;Entity&lt;/code&gt; type with a role of associating, binding together, &lt;code&gt;Datum Items&lt;/code&gt;. A &lt;code&gt;Nexus Collection&lt;/code&gt; is a type of collection which holds &lt;code&gt;Nexus items&lt;/code&gt; (nexuses). The graphic equivalent of &lt;code&gt;Nexus Items&lt;/code&gt; is the &lt;code&gt;hyperbond&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ponder for a moment here, it is a common ground to consider a type, i.e. class, as a container of its instances. But that is not the case in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; where abstract concepts (types) have an independent existence and refer to collections, i.e. the containers of instances.&lt;/p&gt;
&lt;span class=&#34;markup-quote&#34;&gt;This separation between containers of items (instances) and abstract concepts (types) is extremely important as it decouples the data modeling layer from the data collections that are ingested into the database&lt;/span&gt;
&lt;h3 id=&#34;semantic-perspective&#34;&gt;Semantic Perspective&lt;/h3&gt;
&lt;p&gt;Data, e.g. names, codes, quantities, time, location, categorical are meaningless without context. They are separated, isolated bits of information with no related context. Data inherits more meaning when the data are processed within a context. This is exactly the purpose of &lt;a href=&#34;https://en.wikipedia.org/wiki/Semantic_data_model&#34;&gt;semantic data modeling&lt;/a&gt;, a data modeling technique to define the meaning of data within the context of its interrelationships with other data. Semantic models can be either fact oriented, e.g. RDF triples, or object oriented e.g. Entities and Relationships. The disadvantage of the second is that you have to manage dissimilar 2D structures (tables) that are dependent of a fixed database schema and not connected or related directly. The drawbacks of the first are the labeled edges, the modeling of n-ary relations, the inseparable mixture of plain and typed literal triples that represent values with RDF links that represent resources, the &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-642-02121-3_39&#34;&gt;Semantic Web Identity Crisis&lt;/a&gt; to name a few. &lt;strong&gt;R3DM/S3DM assimilates both fact and object-oriented views by defining an atomic information reference unit which is based on semiotics&lt;/strong&gt;. Naturally, with this solution we escape from many of the above problems. This is one of the most innovative aspects of this framework.&lt;/p&gt;
&lt;h4 id=&#34;object-oriented-view&#34;&gt;Object-Oriented View&lt;/h4&gt;
&lt;p&gt;The most commercially successful semantic model is &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entity-Relationship&lt;/a&gt; data model. In the first post of this series we discussed the conceptual data model that Chen is using to represent the tuples of &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;relational data model&lt;/a&gt;. &lt;a href=&#34;https://healis.eu/en/post/20160825/#fig2&#34;&gt;Fig. 2&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20160825/#fig3&#34;&gt;Fig. 3&lt;/a&gt; shows that Chen is using either Entity Set, Attributes and Value Sets or Entity Set(s), Relationship Set(s), Attributes and Value Sets to form an &lt;code&gt;Association&lt;/code&gt;. The key point here is that &lt;strong&gt;Entity set and Attributes in both cases are separated from the Value sets&lt;/strong&gt;. Indeed, this is the design principle that is followed in any modern relational DBMS. There is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_dictionary&#34;&gt;data dictionary&lt;/a&gt;, also known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Metadata_repository&#34;&gt;metadata repository&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Metadata_registry&#34;&gt;metadata registry&lt;/a&gt;, that stores among other things names and descriptions of Entity Sets, Relationships and their Attributes that construct a &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_schema&#34;&gt;database schema&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Semantically speaking, the database schema and its &lt;a href=&#34;https://en.wikipedia.org/wiki/Metadata&#34;&gt;metadata&lt;/a&gt; describe the meaning of its instances, i.e. Entity relations, Entity relationships and Attribute Value sets. For this purpose, in the current OrientDB implementation of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; each one of these sets is &lt;strong&gt;defined explicitly&lt;/strong&gt; and is represented with an &lt;a href=&#34;http://orientdb.com/docs/last/Concepts.html#class&#34;&gt;OrientDB Class&lt;/a&gt;. There is another reason we keep separate the actual data values. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; uses a &lt;strong&gt;single instance value-based storage&lt;/strong&gt;. Each unique value in the raw data is stored only once. With this feature there is some resemblance with the data model of &lt;a href=&#34;https://en.wikipedia.org/wiki/Correlation_database&#34;&gt;Correlation Database&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;network-graph-view&#34;&gt;Network Graph View&lt;/h4&gt;
&lt;p&gt;While it is helpful to view the higher-level &lt;strong&gt;&lt;a href=&#34;https://healis.eu/en/post/20170412/#environment-type-systems&#34;&gt;Type System Architecture of R3DM/S3DM&lt;/a&gt;&lt;/strong&gt; through an object-oriented filter, it is important to understand that at a low-level &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; consists of nodes and edges. In particular, the prototype framework we describe in this article is built on top of &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Document-and-graph-model.html#the-graph-model&#34;&gt;OrientDB Graph engine&lt;/a&gt; with &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Working-with-graphs.html#lightweight-edges&#34;&gt;Lightweight Edges&lt;/a&gt; and a hypergraph structure, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig9&#34;&gt;&lt;strong&gt;Fig.9&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In previous posts of this series we have made a comparison of the &lt;code&gt;Association&lt;/code&gt; construct with &lt;a href=&#34;https://healis.eu/en/post/20160825&#34;&gt;Relational tuples&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000101/&#34;&gt;Topic Map Association&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000102/&#34;&gt;RDF triplet&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20161220&#34;&gt;Property Graph nodes and edges&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170211&#34;&gt;Qlik binary coded records&lt;/a&gt;. Such semantic models, with the exception of Qlik technology, are fact oriented and semantics are typically expressed by binary or n-ary relations between data elements. In &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; the graph is usually undirected with &lt;a href=&#34;https://healis.eu/en/post/20170412/#link-type-system-lts&#34;&gt;symmetric and typed binary relations&lt;/a&gt; between the &lt;code&gt;hyperbond&lt;/code&gt; and the &lt;code&gt;hyperatom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This low-level graph view of the system can be implemented in many ways. For example you can have two constructs, e.g. tables, one for the nodes and another for the edges (see the work of Simon Williams in &lt;a href=&#34;https://healis.eu/en/post/20161220/#associative-model&#34;&gt;Sentences database&lt;/a&gt;), or you can use a key-value store that saves tuples (&lt;a href=&#34;http://blog.hostilefork.com/brief-tour-graphd-scott-meyer/&#34;&gt;Graphd&lt;/a&gt; the back store of Freebase) or you can also have a native triple store.&lt;/p&gt;
&lt;h4 id=&#34;semiotic-view&#34;&gt;Semiotic View&lt;/h4&gt;
&lt;p&gt;So far we have seen how we can contextualize data using &lt;code&gt;Association&lt;/code&gt; construct. This is the mechanism to assimilate tuples of data. Nevertheless, values in a tuple or literals/resources in a triple are meaningless in isolation. In the first case you need either the head and the type of the relation (table and column names), in the second case you need the label and direction on the edge (Predicate) that connects the Subject and the Object to give meaning in the binary relation. To quote Ron Everett,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every table is a silo. Every cell is an atom of data with no awareness of its contexts, or how it fits in to anything beyond its cell. It can be located by external intelligence but on its own it’ s a “dumb” participant in the system - the ultimate disconnected micro - fragment accessible only by knowing the column and the record it exists in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and according to him,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The alternative is to replace the data elements with information at the atomic level of the system. Instead of a data atom in a table, we have an information atom with no table.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; Ron Everett &lt;!-- raw HTML omitted --&gt; in &amp;ldquo;&lt;a href=&#34;https://www.linkedin.com/pulse/introduction-associative-information-systems-n-normal-letennier&#34;&gt;Introduction to Associative Information Systems&lt;/a&gt; - (N) Normal Form&amp;rdquo;
{: .small}&lt;/p&gt;
&lt;p&gt;Therefore the trick here is to build &lt;code&gt;Associations&lt;/code&gt;, based on a uniform representation of its members and the roles they play, in a similar way to Topic Map &lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/#sect-association&#34;&gt;Association items&lt;/a&gt;. For this purpose we have introduced &lt;a href=&#34;https://healis.eu/en/post/20170211/#air-units&#34;&gt;Atomic Information Resource (AIR)&lt;/a&gt; unit in the previous post of this series. Now we will view &lt;code&gt;AIR&lt;/code&gt; with more detail and in action. For each &lt;code&gt;AIR&lt;/code&gt; unit we maintain a record of information. For simplicity and for demonstration purposes, the &lt;code&gt;AIR&lt;/code&gt; unit in the current implementation of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is equivalent to &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Record-ID.html&#34;&gt;OrientDB Record ID&lt;/a&gt; (RID).&lt;/p&gt;
&lt;p&gt;For example the &lt;code&gt;Supplier&lt;/code&gt; result set in &lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt; is transformed to an associative set and each cell of &lt;code&gt;Supplier&lt;/code&gt; table is represented with an &lt;code&gt;RID&lt;/code&gt; (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; - &lt;em&gt;Get &lt;code&gt;Supplier&lt;/code&gt; Associative Set&lt;/em&gt;). Columns of &lt;code&gt;Part&lt;/code&gt; table, e.g. &lt;code&gt;pid&lt;/code&gt; (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;), and any of its values are also represented with &lt;code&gt;RIDs&lt;/code&gt; (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; - &lt;em&gt;Get &lt;code&gt;Datum&lt;/code&gt; where Parts.pid=998&lt;/em&gt;). The single &lt;code&gt;Part&lt;/code&gt; tuple where &lt;code&gt;pid=998&lt;/code&gt;, (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;) is considered to be an instance of a &lt;code&gt;Entity&lt;/code&gt; and has an &lt;code&gt;RID&lt;/code&gt; too (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; - &lt;em&gt;Get tuples that this Datum is part of&lt;/em&gt;).&lt;/p&gt;
&lt;span class=&#34;markup-quote&#34;&gt;This way AIR information representation serves two principal functions; information resource identification and location addressing, i.e. dereferencing and retrieval.&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Code.2&lt;/strong&gt; - Associative sets are presented with values or in RID (reference key) format. The equivalent result sets are drawn in the hypergraph of &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig1&#34;&gt;&lt;strong&gt;Fig.1&lt;/strong&gt;&lt;/a&gt; and fetched with SQL in (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;) segment. The document record in OrientDB with RID &lt;strong&gt;#60:7&lt;/strong&gt; is an instance of &lt;code&gt;prtID Attribute&lt;/code&gt; collection. We can read the &lt;code&gt;Datum&lt;/code&gt; value, find which &lt;code&gt;Attribute&lt;/code&gt; collection (class) it belongs to, and get its siblings, i.e. other &lt;code&gt;Datum&lt;/code&gt; items of the class. In the same &lt;code&gt;Datum&lt;/code&gt; record we can see its row context associates, i.e. &lt;code&gt;Nexus Items&lt;/code&gt;. These are the five tuples it participates, one &lt;code&gt;Part&lt;/code&gt; relation (&lt;strong&gt;#52:7&lt;/strong&gt;) and four &lt;code&gt;Catalog&lt;/code&gt; relationships (&lt;strong&gt;#53:7, #53:11, #53:12, #53:16&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getFromDataItem&#39;&#34; &gt; View Code.2 Frame &lt;/button&gt;



&lt;p&gt;There are two steps towards this transformation of tuples. First we create a &lt;a href=&#34;https://healis.eu/en/post/20170412/#value-type-system-vts&#34;&gt;value type system&lt;/a&gt;, i.e. a place where we store atomic values based on their type. And second we apply a uniform representation on everything, i.e. data and metadata. This turns our DBMS to a &lt;strong&gt;Reference Database Management System (RDBMS)&lt;/strong&gt;, i.e. redefining this way the acronym of &lt;strong&gt;Relational Database Management Systems&lt;/strong&gt;. Remember that deep down to an atomic level we store single instance values. &lt;strong&gt;It is only the reference keys to those values that we manage&lt;/strong&gt;. This enables a cellular granularity on &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. Metadata with a high granularity allows for deeper, more detailed, and more structured information and enables greater levels of technical manipulation.&lt;/p&gt;
&lt;p&gt;This uniform &lt;em&gt;Representation&lt;/em&gt; and management of abstract information &lt;em&gt;Resources&lt;/em&gt; (Models, Data Sources, Metadata) with AIR units in &lt;strong&gt;R3DM&lt;/strong&gt; is the &lt;em&gt;Realization&lt;/em&gt; of the fact that underneath there is a separate storage layer of single instance data values.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S3DM&lt;/strong&gt; framework is based on the powerful theory of the semiotic triangle also known as the triangle of meaning or the triangle of reference. We use key references (&lt;em&gt;Signs-Symbols&lt;/em&gt;), to represent abstract things (&lt;em&gt;Signified Concepts&lt;/em&gt;) in our mind. We encode these into data containers, i.e. forms that the sign takes, for the storage of data values (&lt;em&gt;Signifiers&lt;/em&gt;), &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt;&lt;/a&gt;.
{: .btn .btn&amp;ndash;success}&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;r3dm_semiotic_triangle_porsche-1200x839.jpg&#34; data-caption=&#34;Fig. 3 - R3DM/S3DM Triangle of Meaning, Semiotic Triangle, Triangle of Reference&#34;&gt;

&lt;img src=&#34;r3dm_semiotic_triangle_porsche-1200x839.jpg&#34; alt=&#34;Fig. 3 - R3DM/S3DM Triangle of Meaning, Semiotic Triangle, Triangle of Reference&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 3 - R3DM/S3DM Triangle of Meaning, Semiotic Triangle, Triangle of Reference
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This trilateral principle permits a uniform treatment of semantics, syntax, storage and structure of information based on symbolic representation. The very same principle is applied to the architectural design of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; type system.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;h2 id=&#34;environment-type-systems&#34;&gt;Environment Type Systems&lt;/h2&gt;
&lt;p&gt;In the previous section we have seen that &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; can be seen from many perspectives. At a lower level we have a network graph of nodes and edges. In OrientDB &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Document-and-graph-model.html#the-graph-model&#34;&gt;graph model&lt;/a&gt; these are instances of the &amp;ldquo;V&amp;rdquo; (for Vertex) and &amp;ldquo;E&amp;rdquo; (for Edges) classes. At a higher level, based on those two classes, we build a hierarchically organized &lt;a href=&#34;https://en.wikipedia.org/wiki/Namespace&#34;&gt;namespace&lt;/a&gt; in OrientDB &lt;a href=&#34;http://orientdb.com/docs/last/Paginated-Local-Storage.html&#34;&gt;paginated local storage&lt;/a&gt; (plocal). This is the database &lt;code&gt;Environment&lt;/code&gt;, the highest organizational structure, a logical container that it may represent a business environment, a user environment, even a programming environment. Its role is to group related classes into eight &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system&#34;&gt;type systems&lt;/a&gt;. Seven of them manage vertices and one of them is for the different types of edges, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;. The process of initializing and defining the structures in OrientDB database is fully automated by reading the schema of the type system from a JSON file, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;

 
 
 
 
 
 &lt;figure&gt;
 
   &lt;a data-fancybox=&#34;&#34; href=&#34;OrientDB_R3DM_REG.png&#34; data-caption=&#34;Fig. 4 (Left)- Information about R3DM/S3DM hierarchical type system stored in DBRegistry subsystem&#34;&gt;
 
 &lt;img src=&#34;OrientDB_R3DM_REG.png&#34; alt=&#34;Fig. 4 (Left)- Information about R3DM/S3DM hierarchical type system stored in *DBRegistry* subsystem&#34; &gt;
 &lt;/a&gt;
 
 
 &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
   &lt;h4&gt;&lt;/h4&gt;
   &lt;p&gt;
     Fig. 4 (Left)- Information about R3DM/S3DM hierarchical type system stored in &lt;em&gt;DBRegistry&lt;/em&gt; subsystem
     
     
     
   &lt;/p&gt; 
 &lt;/figcaption&gt;
 
 &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;

 
 
 
 
 
 &lt;figure&gt;
 
   &lt;a data-fancybox=&#34;&#34; href=&#34;R3DM_REG_JSON.png&#34; data-caption=&#34;Fig. 5 (Right) - Schema of R3DM/S3DM hierarchical type system in a JSON format. For simplicity, in the current implementation Items Type System (ITS) is not present. Entity Type System (ETS) and Attribute Type System (ATS) OrientDB classes compose this missing system&#34;&gt;
 
 &lt;img src=&#34;R3DM_REG_JSON.png&#34; alt=&#34;Fig. 5 (Right) - Schema of R3DM/S3DM hierarchical type system in a JSON format. For simplicity, in the current implementation Items Type System (ITS) is not present. Entity Type System (ETS) and Attribute Type System (ATS) OrientDB classes compose this missing system&#34; &gt;
 &lt;/a&gt;
 
 
 &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
   &lt;h4&gt;&lt;/h4&gt;
   &lt;p&gt;
     Fig. 5 (Right) - Schema of R3DM/S3DM hierarchical type system in a JSON format. For simplicity, in the current implementation Items Type System (ITS) is not present. Entity Type System (ETS) and Attribute Type System (ATS) OrientDB classes compose this missing system
     
     
     
   &lt;/p&gt; 
 &lt;/figcaption&gt;
 
 &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi/&#34;&gt;DBAPI project&lt;/a&gt; in Wolfram Language has been extended to cover all R3DM/S3DM functionality. For example, an &lt;code&gt;Environment&lt;/code&gt; is added with &lt;code&gt;OR3addEnvironment&lt;/code&gt; command, (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code3&#34;&gt;&lt;strong&gt;Code.3&lt;/strong&gt;&lt;/a&gt;), and we retrieve any metadata about it with the &lt;code&gt;OR3getAnything&lt;/code&gt; command (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code4&#34;&gt;&lt;strong&gt;Code.4&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3addEnvironment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mp\R3DM_TypeSystem.json&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R3DB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Code.3&lt;/strong&gt; - We pass the schema file (JSON), the name of the database (R3DB), the username and the password. Metadata for the newly created classes are stored in the &lt;code&gt;DBRegistry&lt;/code&gt; subsystem &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.4&lt;/strong&gt; - Retrieval of Environment System Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command. By default it is returning a List of references (RIDs) unless we specify a specific format for the structure e.g. Dataset.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getSystemTypes&#39;&#34; &gt; View Code.4 &lt;/button&gt;



&lt;h3 id=&#34;database-type-system-dbs&#34;&gt;Database Type System (DBS)&lt;/h3&gt;
&lt;p&gt;Classes that start with the letters DB such as &lt;code&gt;DBLog&lt;/code&gt;, &lt;code&gt;DBUser&lt;/code&gt;, &lt;code&gt;DBOperation&lt;/code&gt;, and &lt;code&gt;DBUserRole&lt;/code&gt; are used to store the user &lt;code&gt;Environment&lt;/code&gt; metadata useful for administrative, security, and monitoring purposes (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code5&#34;&gt;&lt;strong&gt;Code.5&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.5&lt;/strong&gt; - Retrieval of Primitive Database Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command as a List of references or as as Dataset.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getPrimitiveTypes&#39;&#34; &gt; View Code.5 &lt;/button&gt;



&lt;p&gt;We have already seen the &lt;code&gt;DBRegistry&lt;/code&gt; subsystem where information about the schema of &lt;code&gt;Environment&lt;/code&gt; is stored, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;. Another class &lt;code&gt;DBObject&lt;/code&gt; is used for casting multi-type role playing at a node (&lt;code&gt;Object&lt;/code&gt; is an instance of a &lt;code&gt;Type&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;model-type-system-mts&#34;&gt;Model Type System (MTS)&lt;/h3&gt;
&lt;p&gt;Next we will examine how we can add a new domain model in the system. Usually at this stage the database expert draws the entity-relationship diagram of the model which is a graph of &lt;code&gt;Entities&lt;/code&gt;, &lt;code&gt;Attributes&lt;/code&gt; and relationships. In &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt; we present a similar diagram for our Supplier-Part-Catalog data set and in &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig9&#34;&gt;&lt;strong&gt;Fig.9&lt;/strong&gt;&lt;/a&gt; we have drawn the same diagram in OrientDB &lt;a href=&#34;http://orientdb.com/docs/master/Graph-Editor.html&#34;&gt;Graph Editor&lt;/a&gt;. The main difference with ER diagrams is that relationships/relations here have a direct representation on the system with the edges (&lt;strong&gt;R3DM/S3DM&lt;/strong&gt; links) and dictionary metadata are explicitly defined and stored in &lt;code&gt;MTS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;R3DM_SPC_model.png&#34; data-caption=&#34;Fig. 6 - The schema diagram of SupplierPartCatalog Model (red). Entities (blue boxes) and Attributes (green ovals) are written with their full names (blue) and short names (purple) that take positions outside each shape. Entity boxes inside carry their type (red) and their super-type (blue). While inside each Attribute oval super-type (black) and value type (red) is written. We can also see two types of links. LTS_EA (blue) connects Entities with Attributes and LTS_WP (brown) is linking the model with its Entities.&#34;&gt;

&lt;img src=&#34;R3DM_SPC_model.png&#34; alt=&#34;Fig. 6 - The schema diagram of SupplierPartCatalog Model (red). Entities (blue boxes) and Attributes (green ovals) are written with their full names (blue) and short names (purple) that take positions outside each shape. Entity boxes inside carry their type (red) and their super-type (blue). While inside each Attribute oval super-type (black) and value type (red) is written. We can also see two types of links. LTS_EA (blue) connects Entities with Attributes and LTS_WP (brown) is linking the model with its Entities.&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 6 - The schema diagram of SupplierPartCatalog Model (red). Entities (blue boxes) and Attributes (green ovals) are written with their full names (blue) and short names (purple) that take positions outside each shape. Entity boxes inside carry their type (red) and their super-type (blue). While inside each Attribute oval super-type (black) and value type (red) is written. We can also see two types of links. LTS_EA (blue) connects Entities with Attributes and LTS_WP (brown) is linking the model with its Entities.
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We have &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/json/.json&#34;&gt;serialized the domain model&lt;/a&gt; graph of &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt; in the same manner as the schema of the type system and the task of loading and building the model is simplified again with the following single function call (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code6&#34;&gt;&lt;strong&gt;Code.6&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3addDomainModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mp\SPCModel.json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Code.6&lt;/strong&gt; - The only parameter required in &lt;em&gt;OR3addDomainModel&lt;/em&gt; is the &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/json/.json&#34;&gt;schema definition file&lt;/a&gt; of the model. This function call will instruct OrientDB to create classes for all &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; of the &lt;code&gt;Model&lt;/code&gt;. All the metadata from the schema, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;, will be stored in &lt;code&gt;MTS&lt;/code&gt; and will be available for retrieval with &lt;code&gt;OR3getAnything&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Using the powerful &lt;code&gt;OR3getAnything&lt;/code&gt; function in the context of &lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi/&#34;&gt;DBAPI&lt;/a&gt;&lt;code&gt;OrientR3S3&lt;/code&gt; package we can retrieve metadata, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;, for any Model, Entity or Attribute. The result set can be in the form of Wolfram Language &lt;a href=&#34;http://reference.wolfram.com/language/ref/Dataset.html&#34;&gt;&lt;code&gt;Dataset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://reference.wolfram.com/language/ref/List.html&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;http://reference.wolfram.com/language/ref/Graph.html&#34;&gt;&lt;code&gt;Graph&lt;/code&gt;&lt;/a&gt; data structures (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code.7&lt;/strong&gt; - Three examples of the &lt;code&gt;OR3getAnything&lt;/code&gt; function where we retrieve OrientDB records for &lt;code&gt;Models&lt;/code&gt;, &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; respectively. The function call is translated to OrientDB RESTful API command and the JSON response from the DBMS is transformed to Wolfram Language data structures for further processing and visualization. It worths noticing the hypergraph representation which is the equivalent graphical form of Model&amp;rsquo;s schema diagram in &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getModelEntityAttribute\/&#39;&#34; &gt; View Code.7 &lt;/button&gt;



&lt;p&gt;To maintain compatibility and interoperability with ontologies and other vocabularies for structured data on the Internet such as &lt;a href=&#34;http://schema.org/&#34;&gt;schema.org&lt;/a&gt; we categorize &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; of any &lt;code&gt;Model&lt;/code&gt; according to OrientDB classes that typically form the hierarchical structure of &lt;code&gt;Entity Type System&lt;/code&gt; and &lt;code&gt;Attribute Type System&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;entity-type-system-ets&#34;&gt;Entity Type System (ETS)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Entity Types&lt;/code&gt; usually refer to abstract entity types. They are used to create schema templates for popular entity types. Metadata are kept in DB_Registry and as usual they can be retrieved with &lt;code&gt;OR3getAnything&lt;/code&gt; command (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code8&#34;&gt;&lt;strong&gt;Code.8&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.8&lt;/strong&gt; - Retrieval of Entity Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;Entity Type&lt;/code&gt; we can view its type and its super-type as well as the name and shortname that can be accessed.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getEntityTypes&#39;&#34; &gt; View Code.8 &lt;/button&gt;



&lt;p&gt;As an example consider the schema diagram of &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt; where we have three entity sub types, &lt;strong&gt;&lt;code&gt;ORGANIZATION&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PRODUCT&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;DATACATALOGUE&lt;/code&gt;&lt;/strong&gt;  where we classify the &lt;code&gt;Supplier&lt;/code&gt;, &lt;code&gt;Product&lt;/code&gt; and &lt;code&gt;Catalogue&lt;/code&gt; entity collections respectively (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;, &lt;em&gt;Get Entities section&lt;/em&gt;).&lt;/p&gt;
&lt;h3 id=&#34;attribute-type-system-ats&#34;&gt;Attribute Type System (ATS)&lt;/h3&gt;
&lt;p&gt;Similarly, &lt;code&gt;Attribute Types&lt;/code&gt; refer to abstract attribute types. Each attribute can participate in one or more &lt;code&gt;Entity Types&lt;/code&gt; and that is how schema templates are formed. In our &lt;code&gt;Supplier-Product-Catalogue&lt;/code&gt; data model, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;, attributes can be classified as &lt;strong&gt;&lt;code&gt;CATEGORICAL&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Supplier_status&lt;/code&gt;, &lt;code&gt;Part_color&lt;/code&gt;, &lt;code&gt;Part_unit&lt;/code&gt;, &lt;code&gt;Catalog_check&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;IDENTITY&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Supplier_id&lt;/code&gt;, &lt;code&gt;Part_id&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Part_nameEN&lt;/code&gt;, &lt;code&gt;Supplier_nameEN&lt;/code&gt;, &lt;code&gt;Supplier_city&lt;/code&gt;, &lt;code&gt;Supplier_country&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;QUANTITY&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Part_weight&lt;/code&gt;, &lt;code&gt;Catalog_price&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;COUNT&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Catalog_total&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;TIME&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Catalog_date&lt;/code&gt;) and &lt;strong&gt;&lt;code&gt;DESCRIPTION&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Supplier_address&lt;/code&gt;). The following &lt;code&gt;OR3getAnything&lt;/code&gt; command demonstrates how we can draw metadata about this type system (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code9&#34;&gt;&lt;strong&gt;Code.9&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.9&lt;/strong&gt; - Retrieval of Attribute Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;Attribute Type&lt;/code&gt; we can view its type and its super-type as well as the name and shortname that can be accessed.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getAttributeTypes&#39;&#34; &gt; View Code.9 &lt;/button&gt;



&lt;p&gt;Each of these attribute classes above (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;, &lt;em&gt;Get Attributes section&lt;/em&gt;) refers to an attribute collection of data items that has a value type. For example, &lt;code&gt;Supplier_status&lt;/code&gt;, &lt;code&gt;Part_id&lt;/code&gt;, &lt;code&gt;Catalog_total&lt;/code&gt;, &lt;code&gt;Supplier_id&lt;/code&gt; are of value type &lt;strong&gt;INT&lt;/strong&gt; (integer) and &lt;code&gt;Part_weight&lt;/code&gt; is of value type &lt;strong&gt;REA&lt;/strong&gt; (real).&lt;/p&gt;
&lt;h3 id=&#34;items-type-system-its&#34;&gt;Items Type System (ITS)&lt;/h3&gt;
&lt;p&gt;This is the system of items collections, i.e. where &lt;code&gt;Entity&lt;/code&gt; and &lt;code&gt;Attribute&lt;/code&gt; reference instances are stored (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#instances-perspective&#34;&gt;Instances Perspective&lt;/a&gt;). In our demo these are represented with OrientDB classes, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig7&#34;&gt;&lt;strong&gt;Fig.7&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;OrientDB_entity_attribute_item_records-770x584.png&#34; data-caption=&#34;Fig. 7 - Two Select SQL queries with OrientDB Studio manager. The first one returns four Entity records and the second one returns four Attribute records. Each Entity and Attribute record is represented with an item from a collection. These items in turn are represented with a reference key which is OrientDB @rid&#34;&gt;

&lt;img src=&#34;OrientDB_entity_attribute_item_records-770x584.png&#34; alt=&#34;Fig. 7 - Two Select SQL queries with OrientDB Studio manager. The first one returns four Entity records and the second one returns four Attribute records. Each Entity and Attribute record is represented with an item from a collection. These items in turn are represented with a reference key which is OrientDB @rid&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 7 - Two Select SQL queries with OrientDB Studio manager. The first one returns four Entity records and the second one returns four Attribute records. Each Entity and Attribute record is represented with an item from a collection. These items in turn are represented with a reference key which is OrientDB @rid
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;For simplicity&amp;rsquo;s sake we have not constructed &lt;code&gt;ITS&lt;/code&gt; separately but we used OrientDB classes instead to populate them with instances of &lt;code&gt;Entity&lt;/code&gt; and &lt;code&gt;Attribute&lt;/code&gt; types. Nevertheless the idea is the same, segregate the abstract concepts, &lt;strong&gt;TYPES&lt;/strong&gt;, from the domain particular &lt;strong&gt;INSTANCES&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;value-type-system-vts&#34;&gt;Value Type System (VTS)&lt;/h3&gt;
&lt;p&gt;According to our Semiotic View (&lt;a href=&#34;https://healis.eu/en/post/20170412/#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt;&lt;/a&gt;) key &lt;strong&gt;REFERENCES&lt;/strong&gt; (RIDs) represent &lt;strong&gt;RESOURCES&lt;/strong&gt; from &lt;code&gt;DBS&lt;/code&gt;, &lt;code&gt;MTS&lt;/code&gt;, &lt;code&gt;ETS&lt;/code&gt;, &lt;code&gt;ATS&lt;/code&gt;, &lt;code&gt;ITS&lt;/code&gt;, &lt;code&gt;LTS&lt;/code&gt;, &lt;code&gt;DSS&lt;/code&gt; and encoded form of data, i.e. &lt;strong&gt;REALIZATION&lt;/strong&gt; of data values. These values have domains that are based on OrientDB primitive data types, e.g. &lt;em&gt;Integer&lt;/em&gt;, &lt;em&gt;Double&lt;/em&gt;, &lt;em&gt;DateTime&lt;/em&gt;, &lt;em&gt;String&lt;/em&gt; and types  that are defined in the &lt;strong&gt;Value Type System&lt;/strong&gt; (&lt;code&gt;VTS&lt;/code&gt;),  &lt;a href=&#34;https://healis.eu/en/post/20170412/#code10&#34;&gt;&lt;strong&gt;Code.10&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.10&lt;/strong&gt; - Retrieval of Value Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;Attribute Type&lt;/code&gt; we can view its RID, type, super-type, name, shortname and the &lt;a href=&#34;http://orientdb.com/docs/master/Types.html&#34;&gt;OrientDB data type&lt;/a&gt; that is based on.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getValueTypes&#39;&#34; &gt; View Code.10 &lt;/button&gt;



&lt;p&gt;Data values are stored together in ordered &lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics)&#34;&gt;sets&lt;/a&gt; based on &lt;code&gt;Value Types&lt;/code&gt;, e.g. all integers in one set (&lt;code&gt;VTS_Integer&lt;/code&gt;), identifiers in another (&lt;code&gt;VTS_Encoded&lt;/code&gt;), and so on. This optimizes the access and management of values. Each &lt;code&gt;Item Collection&lt;/code&gt; is a subset of values, i.e. a subset of a value set, &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig8&#34;&gt;&lt;strong&gt;Fig.8&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;OrientDB-four%20values%20of%20supplierID-943x202.png&#34; &gt;

&lt;img src=&#34;OrientDB-four%20values%20of%20supplierID-943x202.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Figure 8:&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Fig.8 - A subset of the &lt;code&gt;VTS_Integer&lt;/code&gt; value set. This record set is obtained with OrientDB SQL select command. Each one of these records is pointed from a &lt;code&gt;datum&lt;/code&gt; item of the &lt;code&gt;Supplier_id&lt;/code&gt; collection (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig7&#34;&gt;&lt;strong&gt;Fig.7&lt;/strong&gt;&lt;/a&gt;) using the &lt;a href=&#34;http://orientdb.com/docs/master/Types.html&#34;&gt;OrientDB Link type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elements of both &lt;code&gt;Value Sets&lt;/code&gt; and &lt;code&gt;Item Collections&lt;/code&gt; are unique, i.e. a single instance of each one. In OrientDB this is implemented by setting &lt;a href=&#34;http://orientdb.com/docs/master/SB-Tree-index.html&#34;&gt;SB-Tree index with UNIQUE keys&lt;/a&gt; in both &lt;code&gt;Value set&lt;/code&gt; and &lt;code&gt;Item Collection&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;data-sources-type-system-dss&#34;&gt;Data Sources Type System (DSS)&lt;/h3&gt;
&lt;p&gt;Yet there is another type system in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; framework that is reserved for the input of data sets, the &lt;code&gt;Data Sources Type System&lt;/code&gt; (DSS). A &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_set&#34;&gt;&lt;code&gt;Data Set&lt;/code&gt;&lt;/a&gt; is considered to be a number of related collections that usually correspond to the contents of &lt;a href=&#34;https://en.wikipedia.org/wiki/Flat_file_database&#34;&gt;flat files&lt;/a&gt; or database tables. During the process of adding a &lt;code&gt;Data Set&lt;/code&gt;we do not store the values but only the structure and properties, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code11&#34;&gt;&lt;strong&gt;Code.11&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.11&lt;/strong&gt; - Demonstration of the &lt;code&gt;OR3addDataSet&lt;/code&gt; command with three parameters, the name of the new DataSet that will be created, the working path and the filenames of the flat files to inspect. This function call will instruct OrientDB to create a new class to store information about the structure of these flat files. These metadata will be available for retrieval with &lt;code&gt;OR3getAnything&lt;/code&gt; command (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code12&#34;&gt;&lt;strong&gt;Code.12&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/addDataSet&#39;&#34; &gt; View Code.11 &lt;/button&gt;



&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.12&lt;/strong&gt; - Retrieval of a &lt;code&gt;DataSet&lt;/code&gt; structure, e.g. name, shortname, type, supertype, path, table names, table types, column names, etc, with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DSS&lt;/code&gt; system.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getDSSTypes&#39;&#34; &gt; View Code.12 &lt;/button&gt;



&lt;h3 id=&#34;link-type-system-lts&#34;&gt;Link Type System (LTS)&lt;/h3&gt;
&lt;p&gt;Last but not least the aforementioned &lt;a href=&#34;https://healis.eu/en/post/20170412/#network-graph-view&#34;&gt;&lt;strong&gt;symmetric and typed binary relation&lt;/strong&gt;&lt;/a&gt; is a bidirectional link, i.e. &lt;code&gt;hyperlink&lt;/code&gt;, that is used to connect a &lt;code&gt;hyperatom&lt;/code&gt; to a &lt;code&gt;hyperbond&lt;/code&gt; to form &lt;a href=&#34;https://healis.eu/en/post/20170412/#conceptual-perspective&#34;&gt;&lt;code&gt;Associations&lt;/code&gt;&lt;/a&gt;. We have two kinds of &lt;code&gt;hyperlinks&lt;/code&gt;, directed and undirected. Directed links are used to form directed associations of a specific type, e.g. &lt;code&gt;Entity&lt;/code&gt;-&lt;code&gt;Attribute&lt;/code&gt;, &lt;code&gt;Whole&lt;/code&gt;-&lt;code&gt;Part&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;-&lt;code&gt;Instance&lt;/code&gt; &lt;a href=&#34;https://healis.eu/en/post/20170412/#fig9&#34;&gt;&lt;strong&gt;Fig.9&lt;/strong&gt;&lt;/a&gt;. Depending on which direction we traverse the link, outgoing or incoming we have two different labels to assist us in reading and understanding the semantics of the binary relation. In all cases metadata about the &lt;code&gt;Link Type System&lt;/code&gt; (LTS) are currently stored in &lt;code&gt;DB_Registry&lt;/code&gt; and as usual we can retrieve link types with &lt;code&gt;OR3getAnything&lt;/code&gt; command, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code13&#34;&gt;&lt;strong&gt;Code.13&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Code.13&lt;/strong&gt; - Retrieval of Link Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;ASSOCIATION&lt;/code&gt; type we can view its supertype, name, short name, and the labels for outgoing or incoming traversal direction.&lt;/p&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/getLinkTypes&#39;&#34; &gt; View Code.13 &lt;/button&gt;



&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;OrientDB_GraphEditor_SPC_Model-1269x625.png&#34; data-caption=&#34;Fig.9 - Schema diagram of Supplier-Part-Catalog model in OrientDB Graph Editor. Red edges connect Entities to Attributes and green edge connect the Model to Entities. We can also view the type of R3DM/S3DM link in LTS system as a label on the edge&#34;&gt;

&lt;img src=&#34;OrientDB_GraphEditor_SPC_Model-1269x625.png&#34; alt=&#34;Fig.9 - Schema diagram of Supplier-Part-Catalog model in OrientDB Graph Editor. Red edges connect Entities to Attributes and green edge connect the Model to Entities. We can also view the type of R3DM/S3DM link in LTS system as a label on the edge&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Figure 9:&lt;/h4&gt;
  &lt;p&gt;
    Fig.9 - Schema diagram of Supplier-Part-Catalog model in OrientDB Graph Editor. Red edges connect Entities to Attributes and green edge connect the Model to Entities. We can also view the type of R3DM/S3DM link in LTS system as a label on the edge
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;functional-operations&#34;&gt;Functional Operations&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;OrientR3S3 Package&lt;/strong&gt; extends &lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi_project/orientdb-package/&#34;&gt;OrientDB RESTful API package&lt;/a&gt; in Mathematica with a powerful functional set of commands that cover all operations in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. These operations fall in four categories, &lt;strong&gt;get&lt;/strong&gt;, &lt;strong&gt;update&lt;/strong&gt;, &lt;strong&gt;delete&lt;/strong&gt;, &lt;strong&gt;add&lt;/strong&gt; (&lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi_project/guda&#34;&gt;GUDA&lt;/a&gt;). The main idea here is to define standard &lt;a href=&#34;http://reference.wolfram.com/language/tutorial/SettingUpFunctionsWithOptionalArguments.html&#34;&gt;&lt;strong&gt;named optional arguments&lt;/strong&gt;&lt;/a&gt; for any of these functional categories and then allow their values, default or mandatory, to be given using Wolfram Language transformation rules. We have already started viewing examples of this functional approach to data management with the &lt;code&gt;OR3getAnything&lt;/code&gt; command, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code4&#34;&gt;&lt;strong&gt;Code.4&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code5&#34;&gt;&lt;strong&gt;Code.5&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code8&#34;&gt;&lt;strong&gt;Code.8&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code9&#34;&gt;&lt;strong&gt;Code.9&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code10&#34;&gt;&lt;strong&gt;Code.10&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code12&#34;&gt;&lt;strong&gt;Code.12&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code13&#34;&gt;&lt;strong&gt;Code.13&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-anything&#34;&gt;Get Anything&lt;/h3&gt;
&lt;p&gt;By varying the named optional arguments we pass to &lt;code&gt;OR3getAnything&lt;/code&gt; public function of the &lt;strong&gt;OrientR3S3 Package&lt;/strong&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#code14&#34;&gt;&lt;strong&gt;Code.14&lt;/strong&gt;&lt;/a&gt;, we can retrieve or search for anything in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; and we can also ask to &lt;strong&gt;return&lt;/strong&gt; the result in a specified format e.g. &lt;code&gt;Dataset&lt;/code&gt;, &lt;code&gt;References&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, and &lt;code&gt;Associations&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Search&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:01&amp;#34;&lt;/span&gt;, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prtName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:02&amp;#34;&lt;/span&gt;, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Acme Widget Washer&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Systems&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SYSTEM&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;, debug&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, check&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PRIMITIVE&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;, debug&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASSOCIATION&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VALUE&amp;#34;&lt;/span&gt;,       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MODEL&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENTITY&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ATTRIBUTE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:01&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATASET&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:01&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TABLE&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:01&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMN&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mapping&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;,         get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;,         get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bigraph&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;supplierMRules, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssociationWithValueTypes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;supplierMRules, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssociationWithNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Items&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entities&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:5&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entities&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attributes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Model&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attributes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RulesWithNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attributes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:5&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whole&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RulesWithNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;,    values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;,       values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;,       values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;58:0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FieldsDataset&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Collections&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:11&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DataItems&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Association&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssociationWithFields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Code.14&lt;/strong&gt; - Examples of the &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;strong&gt;OrientR3S3 Wolfram Language package&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;add-anything&#34;&gt;Add anything&lt;/h3&gt;
&lt;p&gt;We have not reached the development phase of integrating all &lt;strong&gt;add&lt;/strong&gt; operation in an &lt;code&gt;OR3addAnything&lt;/code&gt; function of &lt;strong&gt;OrientR3S3 Package&lt;/strong&gt;. Instead of this unified function we have defined many others such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addEnvironment&lt;/code&gt; &lt;em&gt;[ envstruct, envname, usrname, usrpwd ]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code13&#34;&gt;Code13&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addDomainModel&lt;/code&gt; &lt;em&gt;[ jsonFileName]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code6&#34;&gt;Code6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addDataSet&lt;/code&gt; &lt;em&gt;[ datasetName, dataSetPath, fileNames]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code11&#34;&gt;Code11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, we have seen how we can add an &lt;a href=&#34;https://healis.eu/en/post/20170412/#environment-type-systems&#34;&gt;Environment Type System&lt;/a&gt;, a &lt;a href=&#34;https://healis.eu/en/post/20170412/#model-type-system-mts&#34;&gt;Domain Model&lt;/a&gt; and a &lt;a href=&#34;https://healis.eu/en/post/20170412/#data-sources-type-system-dss&#34;&gt;Data Source&lt;/a&gt;. The last two and those that follow are repetitive actions in data analytics lifecycle, i.e. &lt;strong&gt;data sources import&lt;/strong&gt;, &lt;strong&gt;modeling&lt;/strong&gt;, &lt;strong&gt;mapping&lt;/strong&gt;, &lt;strong&gt;ingestion&lt;/strong&gt;,  [&lt;strong&gt;filtering and aggregation&lt;/strong&gt;][].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addMapping&lt;/code&gt; &lt;em&gt;[columns, attributes, mappingRules]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code15&#34;&gt;Code15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a problem of matching the Columns of a Table or in general fields of a data set with the Attributes of an Entity in a data model.&lt;/p&gt;
&lt;p&gt;We can have fields from multiple data sources that are mapped in the same model. The following code section &lt;a href=&#34;https://healis.eu/en/post/20170412/#code15&#34;&gt;Code15&lt;/a&gt; demonstrates how we perform the mapping of the &lt;code&gt;Columns&lt;/code&gt; from the three &lt;code&gt;Tables&lt;/code&gt; of a data set that we added in &lt;a href=&#34;https://healis.eu/en/post/20170412/#code12&#34;&gt;Code12&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Code.15&lt;/strong&gt; demonstrates the mapping of data fields onto &lt;code&gt;Attributes&lt;/code&gt; in three steps. &lt;strong&gt;Step1:&lt;/strong&gt; retrieve metadata from the &lt;code&gt;Data Set&lt;/code&gt; and the &lt;code&gt;Model&lt;/code&gt;, &lt;strong&gt;Step2:&lt;/strong&gt; specify the mapping rules, &lt;strong&gt;Step3:&lt;/strong&gt; store the mapping.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/addMapping&#39;&#34; &gt; View Code.15 &lt;/button&gt;



&lt;p&gt;Mapping is necessary in order to proceed with the data ingestion. This allows seamless integration of data from multiple data sources on the model we design in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. The following three &lt;strong&gt;add&lt;/strong&gt; operations are used in populating &lt;code&gt;Entity&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; items collections with reference instances and the &lt;code&gt;Value Type System&lt;/code&gt; with data values. Records, i.e. tuples, are assimilated by creating associations (&lt;a href=&#34;https://healis.eu/en/post/20170412/#code16&#34;&gt;Code16&lt;/a&gt;).&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;code&gt;OR3addValue&lt;/code&gt; &lt;em&gt;[className, propertyValue, propertyName]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code16&#34;&gt;Code16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OR3addNexus&lt;/code&gt; &lt;em&gt;[className]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code16&#34;&gt;Code16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OR3addEdge&lt;/code&gt;  &lt;em&gt;[edgeClass, fromItem, toItem]&lt;/em&gt; - &lt;a href=&#34;https://healis.eu/en/post/20170412/#code16&#34;&gt;Code16&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Code.16&lt;/strong&gt; demonstrates the ingestion of three data sources (TSV files). First we read headers and body from each file in memory. Then we &lt;strong&gt;get&lt;/strong&gt; the mapping of &lt;code&gt;Columns&lt;/code&gt; from the stored &lt;code&gt;Dataset&lt;/code&gt; onto the &lt;code&gt;Attributes&lt;/code&gt; of each &lt;code&gt;Entity&lt;/code&gt; and finally we &lt;strong&gt;add&lt;/strong&gt; values, collections items and associations.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/addValues&#39;&#34; &gt; View Code.16 &lt;/button&gt;



&lt;h2 id=&#34;filtering&#34;&gt;Filtering&lt;/h2&gt;
&lt;p&gt;It should have become apparent that &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; operates in a different way than other database models. Instead of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_definition_language&#34;&gt;Data definition language&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_manipulation_language&#34;&gt;Data manipulation language&lt;/a&gt; or a Query language (&lt;a href=&#34;https://en.wikipedia.org/wiki/SQL&#34;&gt;SQL&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/SPARQL&#34;&gt;SPARQL&lt;/a&gt;) the functional, uniform set of commands that we have seen in the previous section due to the consistent structure of its type systems and the &lt;code&gt;AIR&lt;/code&gt; units makes it easier to manipulate data and elements of the database.&lt;/p&gt;
&lt;p&gt;One of the most characteristic features of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is the ability to filter data in a seamless standard way instead of accessing data with a query plan which may vary between database models.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;p&gt;This filtering operation is similar to &lt;a href=&#34;http://www.qlik.com/us/products/qlikview&#34;&gt;QlikView&lt;/a&gt; and we will make a contrast with the same data set and example case we used in the &lt;a href=&#34;https://healis.eu/en/post/20170211/#explorefilter-data-via-selections&#34;&gt;5th article of this series&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;case1-condition-and-sorting-order&#34;&gt;Case1: Condition and Sorting Order&lt;/h3&gt;
&lt;p&gt;In this case we are looking for the &lt;code&gt;Supplier&lt;/code&gt; that has the minimum &lt;code&gt;Catalog&lt;/code&gt; &lt;code&gt;Price&lt;/code&gt; for a &lt;code&gt;Red Fire Hydrant Cap&lt;/code&gt; and we want to retrieve &lt;em&gt;supID&lt;/em&gt;, &lt;em&gt;supName&lt;/em&gt;, &lt;em&gt;supCity&lt;/em&gt;, &lt;em&gt;supCountry&lt;/em&gt;, &lt;em&gt;catPrice&lt;/em&gt;, &lt;em&gt;catQuantity&lt;/em&gt;, &lt;em&gt;prtID&lt;/em&gt;, &lt;em&gt;prtName&lt;/em&gt;, and &lt;em&gt;prtColor&lt;/em&gt;. The following &lt;a href=&#34;https://healis.eu/en/post/20170412/#code17&#34;&gt;SQL SELECT query&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#code18&#34;&gt;SPARQL query&lt;/a&gt; retrieve a result set using the relational or the RDF data model respectively.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code.17&lt;/strong&gt; - SQL query: sort &lt;code&gt;Catalog&lt;/code&gt; prices for a &lt;code&gt;Red Fire Hydrant Cap&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; suppliers.sid, suppliers.sname, suppliers.scountry,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catcost, &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catqnt,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       parts.pid, parts.pname, parts.pcolor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;   suppliers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; (parts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; parts.pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catpid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; suppliers.sid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catsid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt;  (( ( parts.pid ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; ))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catcost;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code.18&lt;/strong&gt; - SPARQL query: sort &lt;code&gt;Catalog&lt;/code&gt; prices for a &lt;code&gt;Red Fire Hydrant Cap&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supName &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supCountry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catQuantity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtName &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtColor &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt dc:identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;xsd:int .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt rdf:label &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtName .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:color &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtColor .            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasPart &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:cost &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OPTIONAL &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:quantity &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catQuantity .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasVendor &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup rdf:label &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supName .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:country &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supCountry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code. 19&lt;/strong&gt; - We have coded two solutions for the testing case using our &lt;code&gt;DBAPI&lt;/code&gt; &lt;code&gt;OrientR3S3&lt;/code&gt; package. In the first one (see condensed form in &lt;a href=&#34;https://healis.eu/en/post/20170412/#code20&#34;&gt;Code20&lt;/a&gt;) &lt;code&gt;Catalog Tuples&lt;/code&gt; are filtered then sorted with a single command ! The first tuple in the resulting set is the one we are looking for. Then we use filtering on &lt;code&gt;Part&lt;/code&gt; and &lt;code&gt;Supplier&lt;/code&gt; sets to obtain other information. Finally we project and we &lt;code&gt;Join&lt;/code&gt; all three tuples deleting any duplicates. In the second solution we start by filtering &lt;code&gt;Catalog&lt;/code&gt; collections, then we find the &lt;code&gt;Datum&lt;/code&gt; with the minimum &lt;code&gt;Catalog price&lt;/code&gt;. Then we filter &lt;code&gt;Catalog&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; and &lt;code&gt;Part&lt;/code&gt; tuples, we project and join the final tuples.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/filteringCase&#39;&#34; &gt; View Code.19 &lt;/button&gt;



&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code.20&lt;/strong&gt; R3DM/S3DM Filtering. This is the condensed version of &lt;a href=&#34;https://healis.eu/en/post/20170412/#code19&#34;&gt;Code.19&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#66d9ef&#34;&gt;SUP&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;PRT&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;CAT&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;spcModel, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entities&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prtID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;spcModel, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prtID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fval1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prtID, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    minCatPriceTuple &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SortBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CAT&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fval1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getValue&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[[3]] &amp;amp;][[1]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    catTuple &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; minCatPriceTuple &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getValue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fval2    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; minCatPriceTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    supTuple&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SUP&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fval2, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prtTuple&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PRT&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fval1, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prtTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ;; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;catTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ;; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;supTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DeleteDuplicates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case2-condition-and-cleansing&#34;&gt;Case2: Condition and Cleansing&lt;/h3&gt;
&lt;p&gt;This is a case of detecting and correcting an inaccurate value from a record set that is returned by specifying a condition.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code. 21&lt;/strong&gt; - This is an example of cleansing in two phases, detection and correction. Here we can spot the error by filtering collection sets with the condition &lt;code&gt;prtName=Acme Widget Washer&lt;/code&gt;. There are two values in &lt;code&gt;prtUnit&lt;/code&gt; collection &lt;code&gt;kg&lt;/code&gt; and &lt;code&gt;kb&lt;/code&gt;. The second one should be &lt;code&gt;kg&lt;/code&gt;, it is a typographical error. We can fix this by deleting the &lt;code&gt;hyperlink&lt;/code&gt; that connects the &lt;code&gt;nexus 52:3&lt;/code&gt; (&lt;code&gt;red hyperbond&lt;/code&gt;), with the &lt;code&gt;datum kb&lt;/code&gt; (&lt;code&gt;green hyperatom&lt;/code&gt;), and then adding a new &lt;code&gt;hyperlink&lt;/code&gt; from &lt;code&gt;52:3&lt;/code&gt; to &lt;code&gt;datum 64:1&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/dataCleansing&#39;&#34; &gt; View Code.21 &lt;/button&gt;



&lt;h3 id=&#34;case3-graph-traversal&#34;&gt;Case3: Graph Traversal&lt;/h3&gt;
&lt;p&gt;This is how we perform graph traversal in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. Instead of visiting each vertex in the graph we filter &lt;code&gt;hyperbonds&lt;/code&gt; on account of the &lt;code&gt;hyperatoms&lt;/code&gt; they share.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code. 22&lt;/strong&gt; - We start by specifying a condition, e.g. visiting a single &lt;code&gt;hyperatom&lt;/code&gt;. This is a green node on the &lt;strong&gt;first hypergraph&lt;/strong&gt; with the label &lt;code&gt;Acme Widget Washer&lt;/code&gt;. Now we can get &lt;code&gt;hyperbonds&lt;/code&gt; (red nodes) and find all its siblings. This is also a visual representation of &lt;code&gt;Part&lt;/code&gt; tuples. There are two &lt;code&gt;Part&lt;/code&gt; items with the description &lt;code&gt;Acme Widget Washer&lt;/code&gt;. One has &lt;code&gt;Silver&lt;/code&gt; color, the other is &lt;code&gt;Red&lt;/code&gt; and both of them weigh &lt;code&gt;142.88kg&lt;/code&gt;. In the same hypergraph we have also two identifiers &lt;code&gt;993&lt;/code&gt; and &lt;code&gt;994&lt;/code&gt; these are &lt;code&gt;prtID Attribute&lt;/code&gt; values that are shared with &lt;code&gt;Catalog Entity&lt;/code&gt; tuples. Therefore in the &lt;strong&gt;second hypergraph&lt;/strong&gt; we have filtered &lt;code&gt;Catalog&lt;/code&gt; tuples and we have drawn three of them that are related to these two &lt;code&gt;Part&lt;/code&gt; items. This time there are common &lt;code&gt;hyperatoms&lt;/code&gt;, those with a supplier identifier (1081, 1084), that are shared between &lt;code&gt;Catalog&lt;/code&gt; and &lt;code&gt;Supplier&lt;/code&gt;. In the &lt;strong&gt;third hypergraph&lt;/strong&gt; we get a complete 360 degrees view of our case by filtering the &lt;code&gt;Supplier Entity&lt;/code&gt;. Now we can see that there are two &lt;code&gt;Suppliers&lt;/code&gt; one located in USA that supplies both &lt;code&gt;Part&lt;/code&gt; items and the other in &lt;code&gt;UK&lt;/code&gt; that supplies only the &lt;code&gt;Silver Acme Widget Washer&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;


&lt;button class=&#34;btn  btn-success&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;http:\/\/test.healis.eu\/post000107\/graphTraversal&#39;&#34; &gt; View Code.22 &lt;/button&gt;



&lt;p&gt;In all three cases we have demonstrated that there are two ways to present the resulting data set from filtering. We can either return item collections, i.e. sets of values for each &lt;code&gt;Attribute&lt;/code&gt; we are interested in, or projected tuples from each &lt;code&gt;Entity&lt;/code&gt; separately or in a consolidated multi-grid flat form.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have presented &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; data modeling framework from a multi-perspective view. The building blocks of &lt;a href=&#34;https://healis.eu/en/post/20170412/#conceptual-perspective&#34;&gt;&lt;strong&gt;conceptual&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#logical-perspective&#34;&gt;&lt;strong&gt;logical&lt;/strong&gt;&lt;/a&gt; perspective are paired up. &lt;a href=&#34;https://healis.eu/en/post/20170412/#instances-perspective&#34;&gt;&lt;strong&gt;Types are separated from instances&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#semantic-perspective&#34;&gt;&lt;strong&gt;semantics&lt;/strong&gt;&lt;/a&gt; are defined and explained with three alternative paradigms &lt;a href=&#34;https://healis.eu/en/post/20170412/#object-oriented-view&#34;&gt;&lt;strong&gt;object-oriented&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#network-graph-view&#34;&gt;&lt;strong&gt;network graph&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#semiotic-view&#34;&gt;&lt;strong&gt;semiotics&lt;/strong&gt;&lt;/a&gt;. It is the interpreted, encoded (materialized) and representative forms in the triangle of reference that gave &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; its name. This trilateral principle is applied to everything including the architectural design of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The eight type systems of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; play the role of a formal upper level ontology and its construction is based on the &lt;a href=&#34;http://neuro.gr/NULO/toc.htm&#34;&gt;Neurorganon Upper Level Ontology&lt;/a&gt; (NULON). Terms of this ontology describe the framework with a hierarchical organizational structure that defines schemata and types for &lt;a href=&#34;https://healis.eu/en/post/20170412/#model-type-system-mts&#34;&gt;models&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#entity-type-system-ets&#34;&gt;entities&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#attribute-type-system-ats&#34;&gt;attributes&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#items-type-system-its&#34;&gt;items&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#value-type-system-vts&#34;&gt;values&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#data-sources-type-system-dss&#34;&gt;data sources&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#link-type-system-lts&#34;&gt;links&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#database-type-system-dbs&#34;&gt;database metadata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In terms of querying and managing data there is a set of &lt;a href=&#34;https://healis.eu/en/post/20170412/#functional-operations&#34;&gt;functional operations&lt;/a&gt; that match SQL &lt;code&gt;Select&lt;/code&gt;, &lt;code&gt;Insert&lt;/code&gt;, &lt;code&gt;Update&lt;/code&gt;, &lt;code&gt;Delete&lt;/code&gt; statements and there is a &lt;a href=&#34;https://healis.eu/en/post/20170412/#filtering&#34;&gt;filtering mechanism&lt;/a&gt; implemented which is equivalent to SQL &lt;code&gt;Where&lt;/code&gt; conditions. Thanks to the powerful Wolfram Language transformations we can return results in the form of a table, &lt;code&gt;Rule&lt;/code&gt; set, &lt;code&gt;Association&lt;/code&gt; set, &lt;code&gt;Dataset&lt;/code&gt;, or even a network graph. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; has also been defined as a &lt;a href=&#34;https://healis.eu/en/post/20170412/#r3dm-definition&#34;&gt;&lt;strong&gt;functional representation of information resources that are mapped to a materialized form (realization)&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is an attempt to unify existing popular data models. The key element to achieve this is the association construct. We have devoted five posts of this series to highlight differences and similarities of &lt;a href=&#34;https://healis.eu/en/post/20160825&#34;&gt;Relational&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000101/&#34;&gt;Topic Map&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000102/&#34;&gt;Property Graph&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20161220&#34;&gt;RDF&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170211&#34;&gt;Qlik&lt;/a&gt; data models that are dependent on associations. And the innovative aspect of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is that it avoids namespace, addressing, and identification problems by adopting a uniform representation of everything with numerical vector references.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is a framework to construct a &lt;strong&gt;Reference Database Management System&lt;/strong&gt;, it is &lt;strong&gt;RDBMS&lt;/strong&gt; redefined. The first class citizen in this system is the &lt;strong&gt;Reference&lt;/strong&gt;. It is not the &lt;strong&gt;tuple&lt;/strong&gt; of Entity-Relationship data model, or the &lt;strong&gt;triplet&lt;/strong&gt; of RDF/OWL data model, or even the &lt;strong&gt;nodes and edges&lt;/strong&gt; of the graph data model. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is based on &lt;strong&gt;Atomic Information Reference&lt;/strong&gt; units (&lt;code&gt;AIR&lt;/code&gt;) and it can assimilate table, column, tuple, key-value, triplet, associations and graph data structures. This kind of granularity of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; controls also the level of information detail that will be presented to the user e.g. show only &lt;code&gt;hyperbonds&lt;/code&gt; i.e. Entity instances.&lt;/p&gt;
&lt;p&gt;Information resources are not handled by name in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;, they are always represented and function as meaningful keys (numerical vectors). We escape from the namespace entanglement and alleviate the complexity of linked data by smart &lt;code&gt;AIR&lt;/code&gt; units that are represented in a uniform way and their digital form can be processed, retrieved and stored efficiently and/or combined to create composite information structures. Where bit is the basic construction unit for data, &lt;code&gt;AIR&lt;/code&gt; becomes the fundamental processing unit for structured information. It is now possible to have a giant global graph (GGG) network of information resources based on the power of semiosis with a reference mechanism that is not built with character strings (URL) but it is similar to the Internet Protocol address (IP).&lt;/p&gt;
&lt;p&gt;This is our mantra, &lt;strong&gt;build valuable relations; establish effective communications&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;The End&lt;/h2&gt;
&lt;p&gt;&amp;hellip; or perhaps the beginning of a new era in databases and data modeling.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6257915101387591680&#34;&gt;LinkedIn - 20170412 Update about duration, effort and acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/r3dms3dm-build-powerful-relationships-easily-hatzis-phd&#34;&gt;LinkedIn - 20170412 Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6257927185156444160&#34;&gt;LinkedIn - 20170412 Update about LinkedIn article and request for comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6262704855635365889/&#34;&gt;LinkedIn - 20170426 Update about RDF predicate and literal triplets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6273400181287456768&#34;&gt;LinkedIn - 20170525 Update and comment - Post of Theodore Hills - &amp;ldquo;Data Architecture COMN Sense: Relationships and Semantics&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2357895/2357895-6273439543236657153&#34;&gt;LinkedIn - 20170525 Data Modeling Group -  Relational-Graph DBMS, how do we bridge the gap ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6265895258345783296/&#34;&gt;LinkedIn - 20170525 Update and comment - Post of Theodore Hills - &amp;ldquo;Understand Relational to Understand the Secrets of Data&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/athanassios.hatzis/posts/10212982570867520&#34;&gt;Facebook - 20170412 Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Disqus    - &lt;a href=&#34;http://healis.eu/r3dm_project/post000107/#disqus_thread&#34;&gt;Number of Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://disqus.com/home/discussion/channel-healis/r3dms3dm_build_powerful_meaningful_cohesive_relationships_easily/&#34;&gt;Disqus   - Discussion Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/forum/topics/r3dm-s3dm-a-semiotic-data-modelling-framework-to-power-on-disk&#34;&gt;Data Science Central - 20170510 Discussion - R3DM/S3DM : A Semiotic Data Modelling Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/forum/topics/sql-to-nosql-translator?commentId=6448529%3AComment%3A567101&#34;&gt;Data Science Central - 20170525 Discussion Comment on SQL to NoSQL translator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;© Athanassios I. Hatzis, March 2017&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Modelling Topologies of a Graph Database</title>
      <link>https://healis.eu/en/post/20170228/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170228/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#graph-databases-per-data-model&#34;&gt;Graph Databases Per Data Model&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;p&gt;There is a lot of confusion with the definition of graph databases. In my opinion, any definition that avoids any reference to the semantics of nodes and edges or their internal structure is preferable. Failing to follow this guideline, it is unavoidable to favor specific implementations, e.g. &lt;a href=&#34;http://neo4j.com/developer/graph-database/&#34;&gt;Property Graph Databases&lt;/a&gt; or &lt;a href=&#34;http://en.wikipedia.org/wiki/Triplestore&#34;&gt;Triple Stores&lt;/a&gt;, and you may easily become myopic to other types that are based on different models, e.g. &lt;a href=&#34;http://hypergraphdb.org/&#34;&gt;hypergraph databases&lt;/a&gt;, or different data storage paradigms, e.g. &lt;a href=&#34;http://en.wikipedia.org/wiki/Key-value_database&#34;&gt;key-value stores&lt;/a&gt;. Therefore, I propose we adopt a vendor neutral definition, such as the following one, which cannot exclude any future type of graph database.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Graph Database is a database that uses a graph topology, i.e. vertices and edges, to manage information at the conceptual level independent of the logical and physical implementation of the graph data structure - &lt;a href=&#34;https://www.linkedin.com/pulse/data-modelling-topologies-graph-database-athanassios-i-hatzis-phd&#34;&gt;Athanassios I. Hatzis&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;graph-databases-per-data-model&#34;&gt;Graph Databases Per Data Model&lt;/h2&gt;
&lt;p&gt;That said, there are many differences regarding to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_abstraction_layer&#34;&gt;abstraction layer&lt;/a&gt; of databases. These affect everything — visualization, query language, indexing, scaling, and transactions. Now, let me focus on the conceptual/logical layer, where my work is based. Depending on the structure of nodes and edges, one can describe the following three different data models.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Property Graph Data Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Directed Labeled Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entity-centric with embedded properties and edges with bidirectional linking to nodes&lt;/li&gt;
&lt;li&gt;Neo4J, OrientDB, ArrangoDB, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Triple/Quadruple Data Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Directed Labeled Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Edge-centric with unidirectional linking on vertices&lt;/li&gt;
&lt;li&gt;GraphDB, AllegroGraph, OpenLink Virtuoso, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Associative Data Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hypergraph/Bipartite Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Hypernodes, Hyperedges with bidirectional linking&lt;/li&gt;
&lt;li&gt;Topic Map Data Model, R3DM/S3DM, X10SYS (AtomicDB), HypergraphDB, Qlik Technology&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two main differences between &lt;strong&gt;(1)&lt;/strong&gt; and &lt;strong&gt;(2)&lt;/strong&gt;. First, the type of edges in a property graph, by definition, is bidirectional. You can traverse any edge both ways, despite the fact there is a direction on the edge. On the contrary, with RDF, you have to define two labeled edges with opposite directions to achieve bidirectional linking. And secondly, in literal triples, object parts are properties of a subject part, but they are not first-class citizens and they are not embedded inside the structure of Entity nodes of a property graph.&lt;/p&gt;
&lt;p&gt;I left the associative data model as the last thing to mention. &lt;strong&gt;R3DM/S3DM is the reincarnation of Topic Maps&lt;/strong&gt;, the de facto standard for the representation of associations. The following series of posts on associative data modeling is written with a hands-on practice style. It is an attempt to clear the information glut of many-to-many relationships (a.k.a associations) with a thorough examination of well-known data models and at the same time introduce R3DM/S3DM to the public.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160825/&#34;&gt;Part 1/6&lt;/a&gt; - Relation, Relationship, and Association&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160902/&#34;&gt;Part 2/6&lt;/a&gt; - Association in Topic Map Data Model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160913/&#34;&gt;Part 3/6&lt;/a&gt; - Association in Property Graph Data Model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20161220/&#34;&gt;Part 4/6&lt;/a&gt; - Association in RDF Data Model and Sentences associative data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170211/&#34;&gt;Part 5/6&lt;/a&gt; - Qlik Associative Mode&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Part 6/6&lt;/a&gt; - R3DM/S3DM Associative Semiotic Hypergraph Data Model&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;The verdict from this quick review on graph databases is that I have reasons to believe that associative data modeling is far more powerful and expressive than the other two. I foresee that DBMS vendors that will incorporate in their products R3DM/S3DM technology will eventually have a significant competitive advantage.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/data-modelling-topologies-graph-database-athanassios-i-hatzis-phd&#34;&gt;LinkedIn - 27/02/2017 Pulse Article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6263485831336599552&#34;&gt;LinkedIn - 28/04/2017 Post about Robin Bloor on driving BI in real-time&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6263495928863432704&#34;&gt;LinkedIn - 28/04/2017 Post about Thomas Frisendal on atomic data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217&#34;&gt;LinkedIn - 04/05/2017 Featured on Semantic Web Research Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034&#34;&gt;LinkedIn - 04/05/2017 Featured on Computational Semiotics Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3732032/3732032-6265904280549629955&#34;&gt;LinkedIn - 04/05/2017 IT Professionals Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62438/62438-6265907308967137283&#34;&gt;LinkedIn - 04/05/2017 Business Analytics Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/1814785/1814785-6265911933967433731&#34;&gt;LinkedIn - 04/05/2017 Big Data Analytics Strategy Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/23006/23006-6265914043991752705&#34;&gt;LinkedIn - 04/05/2017 Big Data Analytics BI &amp;amp; Visualization Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6273393604094492672/&#34;&gt;LinkedIn - 25/05/2017 Post Comment SQL to NoSQL translator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/data-modelling-topologies-of-a-graph-database&#34;&gt;DZone    - 17/03/2017 Article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/permalink.php?story_fbid=1260208257411844&amp;id=811804875585520&#34;&gt;Facebook - 04/05/2017 HEALIS Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.datasciencecentral.com/profiles/blogs/data-modelling-topologies-of-a-graph-database&#34;&gt;Data Science Central - 17/06/2017 Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Quick Guide on How to Prevail in the Graph Database Arena</title>
      <link>https://healis.eu/en/post/20170213/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170213/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#definition-of-graph-databases&#34;&gt;Definition of Graph Databases&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#many-to-many-relationships&#34;&gt;Many-to-many Relationships&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#multi-model-database-engine&#34;&gt;Multi-model Database Engine&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#physical-versus-logical-perspective&#34;&gt;Physical versus Logical Perspective&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conceptual-framework&#34;&gt;Conceptual Framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#query-language&#34;&gt;Query Language&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#business-analytics&#34;&gt;Business Analytics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are endless discussions in the databases arena about which DBMS is best suited for operational or data warehousing analytics, which one is the most efficient for online transaction processing, or which one is suitable for semantic integration. Recently graph databases are growing in popularity, especially in the enterprise space, and perhaps that adds more headache on those vendors that try to differentiate from competition and on those clients that are completely uncertain how to embrace this database technology.&lt;/p&gt;
&lt;h2 id=&#34;definition-of-graph-databases&#34;&gt;Definition of Graph Databases&lt;/h2&gt;
&lt;p&gt;Recently &lt;a href=&#34;http://www.bloor.eu/&#34;&gt;Bloor&lt;/a&gt; published a report about &lt;a href=&#34;http://www.bloorresearch.com/research/market-report/graph-and-rdf-databases-2016/&#34;&gt;Graph and RDF Databases&lt;/a&gt;. The author, &lt;a href=&#34;http://www.bloorresearch.com/profiles/philip-howard/https://en.wikipedia.org/wiki/ACID&#34;&gt;Philip Howard&lt;/a&gt;, claims that &amp;ldquo;&lt;em&gt;the difference between a true graph product and a triple store is that the former supports index free adjacency (which means you can traverse a graph without needing an index) and the latter doesn&amp;rsquo;t&lt;/em&gt;&amp;rdquo;. On the contrary Weinberger, CEO of ArrangoDB, argues that this is not a fundamental criterion on what is a graph database. In a post titled &amp;ldquo;&lt;a href=&#34;https://www.arangodb.com/2016/04/index-free-adjacency-hybrid-indexes-graph-databases/&#34;&gt;Index Free Adjacency or Hybrid Indexes for Graph Databases&lt;/a&gt;&amp;rdquo; he proposes that the definition of graph database remains&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;a database that uses graph structures for semantic queries with nodes, edges and properties to represent and store data independent of the way the data is stored internally - Claudius Weinberger&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed, in the same Bloor report a distinction between native and non-native graph databases is made based on their engine. In my opinion, any definition that avoids any reference to the semantics of nodes and edges or their internal structure is preferable. Failing to follow this guideline, it is unavoidable to favor specific implementations, e.g. Property Graph Databases or Triple Stores, and you may easily become myopic to other types that are based on different models, e.g. hypergraph databases, or different data storage paradigms, e.g. key-value stores. Therefore, I propose we adopt a vendor neutral definition, such as the following one, which cannot exclude any future type of graph database.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Graph Database is a database that uses a graph topology, i.e. vertices and edges, to manage information at the conceptual level independent of the logical and physical implementation of the graph data structure - Athanassios I. Hatzis, 28th February 2017&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;many-to-many-relationships&#34;&gt;Many-to-many Relationships&lt;/h2&gt;
&lt;p&gt;In another recently published Spotlight paper by Bloor, &lt;a href=&#34;http://www.bloorresearch.com/research/spotlight/all-about-graphs-a-primer/&#34;&gt;&amp;ldquo;All about graphs: a primer&amp;rdquo;&lt;/a&gt;, the author discusses the Graph data model and highlights the representational differences of a many-to-many relationship including those of bipartite, hypergraph and associative graphs. He observes that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;unlike other new database approaches, graphs cannot easily be subsumed by the leading relational database vendors because the architectural constraints of graphs do not fit easily within the relational paradigm - Philip Howard&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He mentions that the two main variants on entity relationships are labeled property graphs and &lt;code&gt;subject-predicate-object&lt;/code&gt; triples. In practice, although the idea of relationships (associations) between entities is at the heart of Peter Chen&amp;rsquo;s Entity-Relationship model, &lt;a href=&#34;https://healis.eu/en/post/20160825#fig2&#34;&gt;&lt;strong&gt;Fig.2&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20160825#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt;&lt;/a&gt;, there are subtle dissimilarities in its implementation on various graph databases. &lt;a href=&#34;https://healis.eu/en/about#athanassios&#34;&gt;A. Hatzis&lt;/a&gt;, in a &lt;a href=&#34;https://healis.eu/en/post/20170420/&#34;&gt;series of posts on associative data modeling&lt;/a&gt;, that is written with a hands-on practice style, attempts to clear the information glut of this topic with a thorough examination of graph data models.&lt;/p&gt;
&lt;h2 id=&#34;multi-model-database-engine&#34;&gt;Multi-model Database Engine&lt;/h2&gt;
&lt;p&gt;The graph engine and the type of data model are critical factors for any graph database. Therefore it is not strange that many vendors have started marketing their DBMS as a multi-model. We have extensive and long experience with two such products, &lt;a href=&#34;http://orientdb.com/orientdb/&#34;&gt;OrientDB&lt;/a&gt; and &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GIC_intro&#34;&gt;Intersystems Cache&lt;/a&gt;. The former supports Graph, Document, Key/Value, and Object models, the latter is an object database with relational access, integrated support for JSON documents and a multidimensional key-value storage mechanism that can be easily extended to cover Graph data model. Generally speaking, we have reasons to believe that &lt;strong&gt;multi-model DBMS will dominate the database market&lt;/strong&gt;. Currently OrientDB has become a leading player in the graph databases and Intersystems Cache is one of the best operational DBMS according to &lt;a href=&#34;https://www.gartner.com/doc/3467318/magic-quadrant-operational-database-management&#34;&gt;Magic Quadrant report&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;physical-versus-logical-perspective&#34;&gt;Physical versus Logical Perspective&lt;/h2&gt;
&lt;p&gt;Not only has a multi-model database been flexible with its logical schema, but it also has a unified storage data architecture. Although the developer should hardly need access to the physical implementation details of the storage engine, an API for direct use of the engine is desirable and beneficial for many reasons. Most important, this kind of architecture allows someone to build a customized database management system. In theory, ANSI/SPARC three level architecture (external, conceptual/logical and physical) is an effort to allow these three perspectives to be relatively independent of each other, but &lt;strong&gt;in practice the front-end of a DBMS is most often strongly dependent on the back-end storage data model&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;loose coupling&lt;/a&gt; can be achieved with associative/multidimensional arrays. No matter what is their physical implementation, i.e. hash tables or trees, based on this abstract data type you can &lt;a href=&#34;http://mgateway.com/docs/universalNoSQL.pdf&#34;&gt;model all four NoSQL database types&lt;/a&gt;, (Key/Value, Tabular/Columnar, Document, Graph). For one reason or another, we are of the opinion that &lt;strong&gt;associative/multidimensional arrays will eventually prevail in the world of databases&lt;/strong&gt;. There is already strong competition for their best physical implementation and sparse, column-family store, databases have proven to be very popular (&lt;a href=&#34;http://hbase.apache.org/book.html#architecture&#34;&gt;HBase&lt;/a&gt;, &lt;a href=&#34;http://www.hypertable.com/documentation/architecture/&#34;&gt;Hypertable&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/bigtable/&#34;&gt;BigTable&lt;/a&gt;, &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GIC_intro&#34;&gt;Intersystems Cache&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are other properties that are crucial for &lt;a href=&#34;https://en.wikipedia.org/wiki/Operational_database&#34;&gt;operational database management systems&lt;/a&gt; such as &lt;a href=&#34;https://en.wikipedia.org/wiki/ACID&#34;&gt;ACID transactions&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_database&#34;&gt;distributed data architecture&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Scalability&#34;&gt;scalability&lt;/a&gt;. Whether we are talking for a multi-model or single model graph databases, there is a tendency to use them for on-line transaction processing therefore these properties are worth having. And again in terms of architectural design there is always the problem of how to achieve a loose coupling between the physical structures of a database and the application logic.&lt;/p&gt;
&lt;h2 id=&#34;conceptual-framework&#34;&gt;Conceptual Framework&lt;/h2&gt;
&lt;p&gt;With that said it brings us to the question on what kind of logical/conceptual data model architecture to use. Our R3DM/S3DM framework is based on the powerful theory of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Triangle_of_reference&#34;&gt;semiotic triangle&lt;/a&gt;. We use numerical vectors (signs), to encode abstract things in our mind (signified) to which the sign refers, e.g. Person, name, Car, model. We associate these with  data containers-forms that the sign takes for the storage of data values (signifier), i.e. primitive data types (see also &lt;a href=&#34;https://en.wikipedia.org/wiki/Signified_and_signifier&#34;&gt;Signified and Signifier&lt;/a&gt;). This trilateral principle of our framework permits a uniform treatment of semantics, syntax and storage of information based on a symbolic representation. This way we define a fundamental, atomic information resource unit, &lt;a href=&#34;https://healis.eu/en/post/20150320/&#34;&gt;(AIR)&lt;/a&gt;. Those units, in turn, can be easily shaped to form any tabular, hierarchical, or graph data structure in a unified way. For example, study this &lt;a href=&#34;https://healis.eu/en/post/20170211#r3dm-hypergraph-representation&#34;&gt;R3DM hypergraph representation&lt;/a&gt; of Qlikview associative model. &lt;a href=&#34;https://en.wikipedia.org/wiki/Granularity&#34;&gt;Data granularity&lt;/a&gt; can be also deeply connected and related to the definition of a fundamental unit of processing.&lt;/p&gt;
&lt;p&gt;Based on this single primitive construct as a building block, (AIR), we have implemented seven type systems for an upper level management of any DBMS. These are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;SYSTEM&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;SHORTNAME&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. SYS_Dataset&lt;/td&gt;
&lt;td&gt;DSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. SYS_DomainModel&lt;/td&gt;
&lt;td&gt;DMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. SYS_EntityType&lt;/td&gt;
&lt;td&gt;ETS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4. SYS_AttributeType&lt;/td&gt;
&lt;td&gt;ATS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. SYS_ValueType&lt;/td&gt;
&lt;td&gt;VTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6. SYS_LinkType&lt;/td&gt;
&lt;td&gt;LTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7. SYS_Database&lt;/td&gt;
&lt;td&gt;DBS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We characterize Datasets, Domain Models (schemas), Entities, Attributes, etc, as information resources, values are information realization and our AIR units that represent everything are called information representations or simply references. Our current implementation phase has been completed on top of OrientDB and a forthcoming article will present R3DM/S3DM architecture in detail. In the past, &lt;a href=&#34;https://www.linkedin.com/pulse/why-google-shuts-down-freebase-30th-june-2015-hatzis-phd&#34;&gt;Freebase collaborative knowledge graph&lt;/a&gt; had a type system that was built on primitive constructs.&lt;/p&gt;
&lt;h2 id=&#34;query-language&#34;&gt;Query Language&lt;/h2&gt;
&lt;p&gt;Yet another decisive norm in databases is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_language&#34;&gt;query language&lt;/a&gt;. With RDF directed, labeled graph data format and with &lt;a href=&#34;https://en.wikipedia.org/wiki/Triplestore&#34;&gt;RDF store&lt;/a&gt; databases respectively, e.g. &lt;a href=&#34;https://virtuoso.openlinksw.com/&#34;&gt;OpenLink Virtuoso&lt;/a&gt;, &lt;a href=&#34;http://allegrograph.com/allegrograph/&#34;&gt;AllegroGraph&lt;/a&gt; and &lt;a href=&#34;http://ontotext.com/products/graphdb/&#34;&gt;Ontotext GraphDB&lt;/a&gt;, &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt; query language is a standard way to retrieve data. On the contrary the query language of property graph databases varies a lot. There are similar to SQL APIs such as those of &lt;a href=&#34;http://orientdb.com/orientdb/&#34;&gt;OrientDB&lt;/a&gt; and &lt;a href=&#34;https://www.arangodb.com/&#34;&gt;ArrangoDB&lt;/a&gt;, &lt;a href=&#34;https://neo4j.com/&#34;&gt;Neo4J&lt;/a&gt; is using its own Cypher declarative graph query language and there is also the Gremlin open-source graph programming language.&lt;/p&gt;
&lt;p&gt;Another approach is that of &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; which is similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Freebase#Overview&#34;&gt;Freebase MQL query language&lt;/a&gt;. Queries are shaped in JSON hierarchical format with patterns that follow the schema of the graph database.&lt;/p&gt;
&lt;p&gt;We have developed a &lt;a href=&#34;https://healis.eu/en/post/20160210/&#34;&gt;functional RESTful API&lt;/a&gt; that can be served as a prototype for a uniform, universal treatment of data language. Commands and their parameters can become more efficient and they can be simplified if we take on account the hierarchical relationship of Server, Database, Class, Property and Record containers. There are five sets of commands for getting, updating, deleting, adding and linking information. Current implementation is built with Wolfram Language and we will expose more details in a forthcoming article where we analyze R3DM/S3DM architecture.&lt;/p&gt;
&lt;h2 id=&#34;business-analytics&#34;&gt;Business Analytics&lt;/h2&gt;
&lt;p&gt;Last but not least, there is an emerging need for databases that can function as both analytic and operational. In particular, the modern data warehouse should unify all client&amp;rsquo;s transactional databases as well as integrate other external data sources that enable data cleansing, validation and enhancement. Not only that, but for quick and smart business analytics the interface should be both user friendly and functionally powerful. We are aware of such a player in this market segment with a technology that possess similar features to our R3DM/S3DM framework. This is the reason that we devoted &lt;a href=&#34;https://healis.eu/en/post/20170211/&#34;&gt;one of our articles&lt;/a&gt; to describe &lt;a href=&#34;http://www.qlik.com/us/products/qlikview&#34;&gt;QlikView&amp;rsquo;s&lt;/a&gt; unique, award-winning, in-memory associative technology.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Make no mistake, relational databases are the past of computer database technology. Graph databases are the present and the future. This quick review on what we considered important criteria for graph database related technology products might leave the reader in more perplexity than satisfaction. This is our perspective, we wanted to share some of our knowledge with experts and chief technology persons on this field so that we could discuss the matter in more detail with them. The future will show in how many of these discussion topics we were right.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/quick-guide-how-prevail-graph-database-arena-hatzis-phd&#34;&gt;LinkedIn - Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6236916644548091906&#34;&gt;LinkedIn - Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6236916721563901952&#34;&gt;LinkedIn - Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/108904/108904-6236916684649828353&#34;&gt;LinkedIn - Data Warehouse &amp;amp; Business Intelligence Architects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-6236916721589059584&#34;&gt;LinkedIn - Computational Semiotics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6236916585051881475&#34;&gt;LinkedIn - Database &amp;amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/73235/73235-6236915823848628225&#34;&gt;LinkedIn - Database Developers and Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2357895/2357895-6273464481200902148&#34;&gt;LinkedIn - Data Modeling Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6236886400814452736&#34;&gt;LinkedIn - Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6236916721589059585&#34;&gt;LinkedIn - Database Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/4344857/4344857-6236916644548091907&#34;&gt;LinkedIn - OrientDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/1969109/1969109-6236915855192657924&#34;&gt;LinkedIn - MUMPS and Cache Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-criteria-to-differentiate-graph-databases/answer/Athanassios-Hatzis-PhD&#34;&gt;Quora - Question and Answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/a-quick-guide-to-prevail-in-the-graph-database-arena&#34;&gt;DZone - Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/profiles/blogs/a-quick-guide-on-how-to-prevail-in-the-graph-database-arena&#34;&gt;Data Science Central - Blog Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.intersystems.com/post/how-intersystems-cach%C3%A9-fits-graph-database-arena&#34;&gt;Intersystems Developer Community - 21/2/2017 Post about how Intersystems Cache fits in the Graph Database Arena&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Qlik Associative Model</title>
      <link>https://healis.eu/en/post/20170211/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170211/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction-to-qliks-associative-model&#34;&gt;Introduction to Qlik&amp;rsquo;s Associative Model&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#qliks-in-memory-associative-architecture&#34;&gt;Qlik&amp;rsquo;s In-Memory Associative Architecture&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#loading-the-data&#34;&gt;Loading the data&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#explorefilter-data-via-selections&#34;&gt;Explore/Filter Data via Selections&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#r3dm-hypergraph-representation&#34;&gt;R3DM Hypergraph Representation&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#air-units&#34;&gt;AIR Units&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#future-plans&#34;&gt;Future Plans&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction-to-qliks-associative-model&#34;&gt;Introduction to Qlik&amp;rsquo;s Associative Model&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&#34;https://healis.eu/en/post/20161220/#discussion&#34;&gt;discussion session&lt;/a&gt; of the previous post of our series we mentioned two basic reasons that make &lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;RDF&lt;/a&gt; data modeling and consequently &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt; query mechanism disadvantageous with an interactive and associative data exploration and data integration as that of &lt;a href=&#34;http://www.qlik.com/us/products/qlikview&#34;&gt;QlikView&lt;/a&gt;/&lt;a href=&#34;http://www.qlik.com/us/products/qlik-sense&#34;&gt;Qliksense&lt;/a&gt;. These are the naming of predicate terms that connect resources and literals and the unidirectional architectural design of the edges. We have already demonstrated this issue with the &lt;a href=&#34;https://healis.eu/en/post/20161220/#associative-model&#34;&gt;associative model schema design&lt;/a&gt; of a Movies domain in Freebase, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig12&#34;&gt;&lt;strong&gt;Fig.12&lt;/strong&gt;&lt;/a&gt;, and the modeling of our Supplier-Parts-Catalogue toy example in Sentences, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig15&#34;&gt;&lt;strong&gt;Fig.15&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig16&#34;&gt;&lt;strong&gt;Fig.16&lt;/strong&gt;&lt;/a&gt; and OrientDB Property Graph, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;. In this post we continue our journey with Qlik&amp;rsquo;s associative data model.&lt;/p&gt;
&lt;h2 id=&#34;qliks-in-memory-associative-architecture&#34;&gt;Qlik&amp;rsquo;s In-Memory Associative Architecture&lt;/h2&gt;
&lt;p&gt;Qlik&amp;rsquo;s competitive advantage over other BI tools is that it manages associations in memory at the engine level and not at the application level [(English,2010)]&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This management of data, is deep down to an atomic level of data (&lt;a href=&#34;http://www.businessdictionary.com/definition/granularity.html&#34;&gt;Granularity&lt;/a&gt;), i.e. &lt;strong&gt;every data point in every field of a table is associated with every other data point anywhere in the entire schema&lt;/strong&gt; [(English,2010)]&lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. We will follow Qlik&amp;rsquo;x QIX engine stepwise approach with the goal of performing an interactive data exploration [(Ferguson,2015,p.10)]&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; of our Suppliers-Parts-Catalogue data set.&lt;/p&gt;
&lt;h3 id=&#34;loading-the-data&#34;&gt;Loading the data&lt;/h3&gt;
&lt;p&gt;The first step is to bring data into memory. A multi-table &lt;strong&gt;read-only&lt;/strong&gt;, in-memory, compressed, binary, columnar data model is created. Data from each source data table is converted into two types of in memory data structure : [(Ferguson,2015,p.12)]&lt;sup id=&#34;fnref1:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A set of columns that contain binary values, i.e. references, &lt;strong&gt;for each distinct original value&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A compressed binary data table by &lt;strong&gt;replacing each row/column cell value with a binary reference&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the following statements, [QlikView script syntax, p.242]&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, load data from the &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Parts.tsv&#34;&gt;Parts&lt;/a&gt; and &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Suppliers.tsv&#34;&gt;Suppliers&lt;/a&gt; tables that are stored in Excel files and reconstruct eleven unique columns and two read-only binary representation of these tables in memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prtName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prtColor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prtWeight&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prtUnit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FROM&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SupplierPartCatalogue&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SuppliersPartsCatalogue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;xlsx&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ooxml&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;embedded&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labels&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Part&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supAddress&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supCity&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supCountry&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supStatus&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FROM&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SupplierPartCatalogue&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SuppliersPartsCatalogue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;xlsx&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ooxml&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;embedded&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labels&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If two fields have the same name in two different tables (i.e. a relationship) then they have the same columnar binary representation. In order to resolve ambiguities and to associate over fields that have the same name, unique column naming is required. This is the case for our third associative, i.e. bridge, junction table. Field names &lt;code&gt;catSID&lt;/code&gt; and &lt;code&gt;catPID&lt;/code&gt; have already been loaded and represented with the columns &lt;code&gt;supID&lt;/code&gt; and &lt;code&gt;prtID&lt;/code&gt;. The next &lt;code&gt;LOAD&lt;/code&gt; statement is using the alias operator (&lt;code&gt;as&lt;/code&gt;) to handle unique column naming.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;catSID&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;catPID&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;catPrice&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;catTotal&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;catDate&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;catChk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FROM&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SupplierPartCatalogue&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SuppliersPartsCatalogue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;xlsx&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ooxml&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;embedded&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labels&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Catalogue&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;qlikview-spc-TableView-390x360.jpg&#34; &gt;

&lt;img src=&#34;qlikview-spc-TableView-390x360.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;QlikView Internal/Source Table View&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Once the script is executed we can review the data table structure, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig1&#34;&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;&lt;/a&gt;, with the Table Viewer. The three tables are associated with two connectors that bidirectionally link them through their common fields. This layout is quite similar with the Entity-Relationship diagram of Microsoft Access database schema, &lt;a href=&#34;https://healis.eu/en/post/20160825/#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt;&lt;/a&gt;. A QlikView association resembles a SQL natural outer join. However, an outer join in SQL is unidirectional. An association always results in a full (bidirectional) linkage. In practice we have two completely different approaches. In a typical SQL join query we repeatedly search the index because of the join condition.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;QlikView associative engine (QIX) knows how every data point is associated, therefore it can effectively determine (infers) and flag all distinct column values and all rows in each data table upon user&amp;rsquo;s selection&lt;/strong&gt; &lt;sup id=&#34;fnref2:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;the-blind-spot&#34;&gt;The Blind Spot&lt;/h4&gt;
&lt;p&gt;Depending only on memory, QlikView can load many whole tables without joins, instead of a limited view from the main dataset. Other query-based BI tools usually aggregate an extracted subset of data and return it in the form of a result set. This result set is completely divorced from the original data set and this very act of extraction breaks associations. For example, find out how a piece of data contained in a query relates to another piece of data outside the query [(QlikView Whitepaper, October 2010, p.3)]&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. You may think also of an internal combustion engine analogy . With the query-based paradigm, we would look at individual parts of the engine in isolation, (see the header image of our post). Using QlikView associative technology, we have access to a digital model of a complete working engine and we can tweak any part to see how that affects other parts and the engine on the whole.&lt;/p&gt;
&lt;h3 id=&#34;explorefilter-data-via-selections&#34;&gt;Explore/Filter Data via Selections&lt;/h3&gt;
&lt;p&gt;In this section we will examine QlikView associative aspect from the user&amp;rsquo;s experience point of view. &amp;ldquo;&lt;em&gt;Central to QlikView is the concept of a user-defined selection state. As users click around in a QlikView document, they indicate which subsets of data they are interested in analyzing and which subsets should be ignored&lt;/em&gt;, [(QlikView Whitepaper, September 2011, p.10)]&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;. To demonstrate the visual effect of associations, i.e. the relationship between a value in one field and a value in another, we arranged a number of [Sheet Objects, p.457]&lt;sup id=&#34;fnref1:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; in our Main worksheet. We chose [Table Boxes, p.507]&lt;sup id=&#34;fnref2:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to present rows of data from our Tables and [List Boxes, p.459]&lt;sup id=&#34;fnref3:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to display a list of all possible values of a specific field. We have also added a [Current Selections Box, p.519]&lt;sup id=&#34;fnref4:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to list user&amp;rsquo;s selected field values and a [Search Object, p.569]&lt;sup id=&#34;fnref5:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; for searching for information anywhere in the document, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig2&#34;&gt;&lt;strong&gt;Fig.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;qlikview-spc-NoneSelected-2138x741.jpg&#34; data-caption=&#34;QlikView Sheet Object in an unselected state with Table Boxes, Current Selections, and a Search Box on the left side and a Container with List Boxes for Fields representation on the right side&#34;&gt;

&lt;img src=&#34;qlikview-spc-NoneSelected-2138x741.jpg&#34; alt=&#34;QlikView Sheet Object in an unselected state with Table Boxes, Current Selections, and a Search Box on the left side and a Container with List Boxes for Fields representation on the right side&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    QlikView Sheet Object in an unselected state with Table Boxes, Current Selections, and a Search Box on the left side and a Container with List Boxes for Fields representation on the right side
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Now you can see visually what is associated and is not associated with any particular selection. For instance, [&lt;strong&gt;Fig.3&lt;/strong&gt;]&lt;sup id=&#34;fnref6:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; displays the state of our Worksheet when the user selected the Part item with ID value equal to &lt;code&gt;998&lt;/code&gt;. The &lt;code&gt;List Box&lt;/code&gt; of the field (&lt;strong&gt;prtID&lt;/strong&gt;) with the value &lt;code&gt;998&lt;/code&gt; appears in green and it has also been added to the &lt;code&gt;Current Selections&lt;/code&gt; list. In other &lt;code&gt;List Boxes&lt;/code&gt;, unrelated values in all other fields appear in gray and those that are related appear in white. At the same time, when the user interacts with this particular &lt;code&gt;List Box&lt;/code&gt; all the rows of &lt;code&gt;Table Boxes&lt;/code&gt; are instantly filtered to reflect this new context.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;qlikview-spc-PartSelected-2138x741.jpg&#34; data-caption=&#34;Table Boxes on the left side are filtered and values of the List Boxes on the right appear in white or gray according to the current selection (green)&#34;&gt;

&lt;img src=&#34;qlikview-spc-PartSelected-2138x741.jpg&#34; alt=&#34;Table Boxes on the left side are filtered and values of the List Boxes on the right appear in white or gray according to the current selection (green)&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Table Boxes on the left side are filtered and values of the List Boxes on the right appear in white or gray according to the current selection (green)
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So far we have seen how we can get the resulting data after user&amp;rsquo;s selection in two possible formats, a list of values (&lt;code&gt;List Box&lt;/code&gt;) for each field of the data Table, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt;&lt;/a&gt;, and a grid (&lt;code&gt;Table Box&lt;/code&gt;) with tuples (records), &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;. You may also notice in our visual setup that we have a &lt;code&gt;Derived Relation&lt;/code&gt; red grid with selected fields from all three Tables of our data set. This grid is automatically constructed with those tuples that appear in the other three grids (&lt;code&gt;Catalogue Table Box&lt;/code&gt;, &lt;code&gt;Part Table Box&lt;/code&gt; and &lt;code&gt;Supplier Table Box&lt;/code&gt;). We should make it clear that the update of this &lt;code&gt;Derived Relation&lt;/code&gt; under the hood is not performing any kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Join_(SQL)&#34;&gt;Join (SQL)&lt;/a&gt; operation. The effect of tuples filtering and shading of list values is demonstrated with &lt;strong&gt;animated gif images&lt;/strong&gt; in three states. There is the &lt;strong&gt;Unselected State&lt;/strong&gt;, then there is the &lt;strong&gt;Part with ID value &lt;code&gt;998&lt;/code&gt;&lt;/strong&gt; selected state, and from those &lt;code&gt;Catalog&lt;/code&gt; entries for this specific &lt;code&gt;Part&lt;/code&gt;, (4 entries, one for each &lt;code&gt;Supplier&lt;/code&gt;), we &lt;strong&gt;select the &lt;code&gt;Supplier&lt;/code&gt; with the minimum &lt;code&gt;Catalog&lt;/code&gt; price&lt;/strong&gt; and that is our third state.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;tables.gif&#34; data-caption=&#34;Animated Grids of Tuples&#34;&gt;

&lt;img src=&#34;tables.gif&#34; alt=&#34;Animated Grids of Tuples&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Animated Grids of Tuples
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;columns.gif&#34; data-caption=&#34;Animated Lists of Values from Table Fields&#34;&gt;

&lt;img src=&#34;columns.gif&#34; alt=&#34;Animated Lists of Values from Table Fields&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Animated Lists of Values from Table Fields
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;r3dm-hypergraph-representation&#34;&gt;R3DM Hypergraph Representation&lt;/h2&gt;
&lt;p&gt;With the Associative Data Modeling there can be a third way to present data. This is the one that engages the user with the visualization of network graphs. In the previous post of our series, we have drawn an R3DM Hypergraph, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig14&#34;&gt;&lt;strong&gt;Fig. 14&lt;/strong&gt;&lt;/a&gt;, and we described associations according to R3DM terminology. We have used exactly the same data of this case study example, i.e. find the &lt;strong&gt;Supplier&lt;/strong&gt; with the minimum &lt;strong&gt;Catalog&lt;/strong&gt; price for &lt;strong&gt;Part&lt;/strong&gt; with &lt;code&gt;prtID&lt;/code&gt; value &lt;code&gt;998&lt;/code&gt;, to draw &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig2&#34;&gt;&lt;strong&gt;Fig.2&lt;/strong&gt; &lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt; &lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt; &lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt; &lt;/a&gt;. This time we have redrawn hypergraph of &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig14&#34;&gt;&lt;strong&gt;Fig. 14&lt;/strong&gt;&lt;/a&gt; with the help of &lt;a href=&#34;http://orientdb.com/docs/last/Graph-Editor.html&#34;&gt;OrientDB Graph Editor&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;. Every string label and numerical value of &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig14&#34;&gt;&lt;strong&gt;Fig. 14&lt;/strong&gt;&lt;/a&gt; has been replaced with a unique OrientDB record identifier, &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Record-ID.html&#34;&gt;&lt;strong&gt;(RID - clusterID : clusterPosition)&lt;/strong&gt;&lt;/a&gt;. In effect, this is how we implemented R3DM/S3DM &lt;a href=&#34;https://healis.eu/en/post/20150320/#signified-sign-signifier-alternative-paradigm&#34;&gt;&lt;code&gt;Sign&lt;/code&gt; layer&lt;/a&gt;. Each data item becomes an Atomic Information Resource &lt;a href=&#34;https://healis.eu/en/post/20150320/#atomicdb-computational-semiotic-analysis-in-r3dm&#34;&gt;(AIR) unit&lt;/a&gt; with a symbolic representation of a 2D vector &lt;strong&gt;(Entity/Attribute Type : Instance)&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;air-units&#34;&gt;AIR Units&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;From Data Items in any structure (Table/Entity/Triple/JSON/XML) to data model reconstruction with Information Atoms&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;span class=&#34;markup-quote&#34;&gt;AIR units can represent in a uniform way anything, i.e. Entities, Attributes, Values, Types, Databases, etc. Their vector form can be indexed, linked, retrieved, stored efficiently, and we can use AIR units to build associations and assimilate composite information structures such as records (tuples).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To visualize R3DM associations using AIR units we have color coded the graph and we added a legend at the left side, &lt;a href=&#34;https://healis.eu/en/post/20170211/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;. Entities are distinguished from attributes by the size of the disk and grouping of entities and attributes is depicted with different shades of a color (green for Suppliers, brown for Parts, purple for Catalog items). We can easily see four &lt;code&gt;Catalog&lt;/code&gt; items (#70:7, #70:11, #70:12, #70:16) associations with the four &lt;code&gt;Suppliers&lt;/code&gt; (#68:0, #68:1, #68:2, #68:3) and the &lt;code&gt;Part&lt;/code&gt; (#69:7) with ID value &lt;code&gt;998&lt;/code&gt; (#77:7) that is drawn in the center of the graph with the black disk around it. USA suppliers (#68:0, #68:1) share the value of their common &lt;code&gt;supCountry&lt;/code&gt; attribute (#75:0). One of them (#68:1) has a Catalog entry (#70:11) with the minimum catalog price,&lt;code&gt;catPrice&lt;/code&gt;, (#82:9). We can also see the formation of tuples for Supplier (4), Catalog (4) and Part (1).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;OrientDB-GraphCanvas-Part998-1312x723.png&#34; data-caption=&#34;R3DM Color Coded Associations with AIR units&#34;&gt;

&lt;img src=&#34;OrientDB-GraphCanvas-Part998-1312x723.png&#34; alt=&#34;R3DM Color Coded Associations with AIR units&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    R3DM Color Coded Associations with AIR units
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Regarding to the immense advantage of using AIR units to reconstruct hierarchical, table, or graph structures, we can also refer to the following QlikTech patent. In the &amp;ldquo;&lt;em&gt;Summary of the Invention&lt;/em&gt;&amp;rdquo; section we read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;each different data element value of each data element type is assigned a binary code and the data records are stored in binary-coded form. On account of the binary coding, very rapid searches can be conducted in the tables&lt;/strong&gt;. - Qliktech International AB Patent, May 2001&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;future-plans&#34;&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;It is rather unfortunate that the basis of QlikView&amp;rsquo;s evolutionary associative technology has been confined to the market of proprietary software products. In HEALIS we have made the difference by opening up these database design key principles for discussion with experts of the field and we have made them part of our R3DM/S3DM conceptual framework.&lt;/p&gt;
&lt;p&gt;We have gone a step further to implement our framework on top of OrientDB and Intersystems Cache DBMS and instead of writing SQL queries, we have abstracted the programming of a set of functional operations that match the selection and filtering of data. We plan to continue with the last part of this post series in order to fully demonstrate how we build our system and how we test it with the Suppliers-Parts-Catalogue data set.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/associative-data-modeling-demystified-part-5-hatzis-phd&#34;&gt;LinkedIn - Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6236167845613568004&#34;&gt;LinkedIn - Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6236180969989251073&#34;&gt;LinkedIn - Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/108904/108904-6236172407980326916&#34;&gt;LinkedIn - Data Warehouse &amp;amp; Business Intelligence Architects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-6236177589032099844&#34;&gt;LinkedIn - Computational Semiotics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/138726/138726-6236177288338251780&#34;&gt;LinkedIn - Semantic Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/4737538/4737538-6236176794991624196&#34;&gt;LinkedIn - Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6236179423113154563&#34;&gt;LinkedIn - Database &amp;amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/73235/73235-6236176889279582212&#34;&gt;LinkedIn - Database Developers and Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/60636/60636-6236177288338251779&#34;&gt;LinkedIn - Linked Data Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6236171505877815296&#34;&gt;LinkedIn - Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6236177294906523652&#34;&gt;LinkedIn - Database Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/72977/72977-6238347871217942530&#34;&gt;LinkedIn - QlikView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.qlik.com/groups/german-user-group/blog/2017/02/12/qlikview-associative-model-explained-a-perspective-on-r3dm-hypergraph&#34;&gt;Qlik Community - German User Group - Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.qlik.com/thread/249547&#34;&gt;Qlik Community - Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;D. English, &amp;ldquo;White Paper: Understanding QlikView&amp;rsquo;s Associative Architecture&amp;rdquo;, QlikTech International AB, May 2010&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;M. Ferguson, &amp;ldquo;White Paper: Interactive Data Exploration With An In-Memory Analytics Engine&amp;rdquo;, QlikTech International AB, May 2015 &lt;a href=&#34;https://www.google.gr/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjm1aKMne_RAhUCtBoKHWqZBKsQFggkMAA&amp;url=http%3A%2F%2Fglobal.qlik.com%2Fuk%2F~%2Fmedia%2FFiles%2Fresource-library%2Fglobal-us%2Fregister%2Fwhitepapers%2FWP-Interactive-Data-Exploration-and-Analysis-EN.ashx&amp;usg=AFQjCNHPdA7lr1ztLjYmx8Vgv7Qxkbx65g&amp;bvm=bv.145822982,d.d2s&#34;&gt;(pdf)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&amp;ldquo;QlikView Reference Manual v11.20 SR2&amp;rdquo;, QlikTech International AB, Lund, Sweden, 2013 &lt;a href=&#34;http://semanticommunity.info/@api/deki/files/24990/QlikView_Reference_Manual.pdf&#34;&gt;(pdf)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref4:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref5:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref6:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&amp;ldquo;The Associative Experience QlikView&amp;rsquo;s Overwhelming Advantage&amp;rdquo;, QlikTech International AB, October 2010 &lt;a href=&#34;https://www.google.gr/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0ahUKEwidjr_8rvHRAhXKuBoKHVDgBJsQFggtMAE&amp;url=http%3A%2F%2Fwww.hyperintel.com%2Fwp-content%2Fuploads%2FQV-10-AssocExp_Whitepaper_A4.pdf&amp;usg=AFQjCNE-Ttjtu2qH-fGZry_rn9WA9kOVcQ&amp;sig2=ns6WuIBNLd_S2-LYYtE9gg&#34;&gt;(pdf)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&amp;ldquo;QlikView Architectural Overview&amp;rdquo;, QlikTech International AB, September 2011 &lt;a href=&#34;https://community.qlik.com/servlet/JiveServlet/downloadBody/7673-102-1-10318/WP-QlikView-Architectural-Overview-EN.pdf&#34;&gt;(pdf)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://www.google.com/patents/US6236986&#34;&gt;Method and Device for Extracting Information from a Database&lt;/a&gt;&amp;rdquo;, QlikTech International AB, May 2001&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Association in RDF Data Model</title>
      <link>https://healis.eu/en/post/20161220/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20161220/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction-to-rdf&#34;&gt;Introduction to RDF&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#rdf-and-linked-data&#34;&gt;RDF and Linked Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#association-in-rdf&#34;&gt;Association in RDF&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#associative-model&#34;&gt;Associative Model&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#association-in-r3dm&#34;&gt;Association in R3DM&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#discussion&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction-to-rdf&#34;&gt;Introduction to RDF&lt;/h2&gt;
&lt;p&gt;In the previous post, &lt;a href=&#34;https://healis.eu/en/post/20160913/&#34;&gt;Part-3&lt;/a&gt;, of this series we explored the Property Graph data model. It is now time to write about another Graph data model with a long history behind it, the Resource-Description-Framework (&lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;RDF&lt;/a&gt;). We will see how we can define an association in RDF and what are the differences with other data models that we analyzed in previous posts of our series.&lt;/p&gt;
&lt;p&gt;RDF is a graph-based data model that has been designed to represent information as a &lt;strong&gt;labeled directed graph&lt;/strong&gt;. In RDF, a description of a resource, i.e. any type of thing, is represented as a number of triples. Each triple has a subject, predicate, and object. Alternatively if you want to think in terms of &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entity-Relationship&lt;/a&gt; model, these three parts of the triple become the Entity-Attribute-Value. This is also known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model&#34;&gt;EAV&lt;/a&gt; model. For instance the Entity subject &lt;code&gt;Part:998&lt;/code&gt; of our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Parts.tsv&#34;&gt;Parts&lt;/a&gt; table in the &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue&#34;&gt;example data set&lt;/a&gt; of our series can be &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/ttl/parts.ttl&#34;&gt;serialized&lt;/a&gt; in Turtle syntax as :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Part:998 rdf:label        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@en&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         schema:color     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@en&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         schema:weight    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7.2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;xsd:&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         schema:unitText  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@en&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         dc:identifier    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;xsd:&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These &lt;code&gt;rdf:label&lt;/code&gt;, &lt;code&gt;schema:color&lt;/code&gt;, &lt;code&gt;schema:weight&lt;/code&gt;, &lt;code&gt;schema:unitText&lt;/code&gt;, &lt;code&gt;dc:identifier&lt;/code&gt; are attributes of this Entity instance and &amp;ldquo;Fire Hydrant Cap&amp;rdquo;, &amp;ldquo;Red&amp;rdquo;, &amp;ldquo;7.2&amp;rdquo;, &amp;ldquo;lb&amp;rdquo; and &amp;ldquo;998&amp;rdquo; are atomic values with an accompanied data type, see also &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig7&#34;&gt;&lt;strong&gt;Fig. 7&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rdf-and-linked-data&#34;&gt;RDF and Linked Data&lt;/h2&gt;
&lt;p&gt;But RDF is not like any other data model, it has been selected from &lt;a href=&#34;https://en.wikipedia.org/wiki/World_Wide_Web_Consortium&#34;&gt;W3C&lt;/a&gt; as one of the Web technologies, together with &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;HTTP&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_resource_identifier&#34;&gt;URIs&lt;/a&gt;, to &lt;strong&gt;extend the hyperlinking of documents to a set of best practices for publishing and interlinking structured data on global scale&lt;/strong&gt;. Today the term &lt;a href=&#34;https://en.wikipedia.org/wiki/Linked_data&#34;&gt;Linked Data&lt;/a&gt; refers to these standards, and the extension of the Web is also known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Semantic_Web&#34;&gt;Semantic Web&lt;/a&gt;. The predecessor of RDF, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Semantic_network&#34;&gt;Semantic Network Model&lt;/a&gt;, was formed in the early 1960s. The main difference is that arcs and nodes in RDF are identified using HTTP URIs and dereferenced (i.e., looked up) over the HTTP protocol. If we use &lt;a href=&#34;https://en.wikipedia.org/wiki/N-Triples&#34;&gt;N-Triples&lt;/a&gt; syntax to serialize the same resource &lt;code&gt;Part:998&lt;/code&gt; we take:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#label&amp;gt;  &amp;#34;Fire Hydrant Cap&amp;#34;@en .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://schema.org/color&amp;gt;                           &amp;#34;Red&amp;#34;@en .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://schema.org/weight&amp;gt;                          &amp;#34;7.2&amp;#34;^^&amp;lt;http://www.w3.org/2001/XMLSchema#double&amp;gt; .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://schema.org/unitText&amp;gt;                        &amp;#34;lb&amp;#34;@en .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://purl.org/dc/elements/1.1/identifier&amp;gt;        &amp;#34;998&amp;#34;^^&amp;lt;http://www.w3.org/2001/XMLSchema#int&amp;gt; .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that the &lt;code&gt;object&lt;/code&gt; part of the triple is an &lt;a href=&#34;https://www.w3.org/TR/rdf11-concepts/#section-Datatypes&#34;&gt;RDF literal&lt;/a&gt; and datatypes are used to represent values such as strings, numbers and dates. These triples are called &lt;strong&gt;Literal triples&lt;/strong&gt; and describe the properties of resources. In our example these &lt;code&gt;literal triples&lt;/code&gt; describe five properties of the &lt;code&gt;Part:998&lt;/code&gt; resource. This type of RDF triples is distinguished from the other type which is &lt;strong&gt;RDF Links&lt;/strong&gt; and describe the relationship between two resources. For example if we want to express with the same syntax all the vendors of &lt;code&gt;Part:998&lt;/code&gt; we will form these triples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://www.wikidata.org/property/hasVendor&amp;gt;  &amp;lt;http://example.org/spc/Supplier/1081&amp;gt; .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://www.wikidata.org/property/hasVendor&amp;gt;  &amp;lt;http://example.org/spc/Supplier/1082&amp;gt; .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://www.wikidata.org/property/hasVendor&amp;gt;  &amp;lt;http://example.org/spc/Supplier/1083&amp;gt; .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#75715e&#34;&gt;//example.org/spc/Part/998&amp;gt;   &amp;lt;http://www.wikidata.org/property/hasVendor&amp;gt;  &amp;lt;http://example.org/spc/Supplier/1084&amp;gt; .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is also the equivalent result set at &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig1&#34;&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;&lt;/a&gt; presented in a compact form from the following &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt; query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;Suppliers &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; Part &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; Supplier: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;example.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;spc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Supplier&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; Part: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;example.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;spc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Part&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; xsd: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www.w3.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2001&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;XMLSchema&lt;span style=&#34;color:#f92672&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; wd: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www.wikidata.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;property&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; dc: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;purl.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;elements&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	BIND(wd:hasVendor &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;p)    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt that has id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt dc:identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;xsd:int .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; Find &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt; items (&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat) &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; a reference &lt;span style=&#34;color:#66d9ef&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasPart &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt; item (&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat) find the vendor that supplies &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;part998-suppliers-result-set.jpg&#34; data-caption=&#34;Result set from SPARQL query to find the suppliers of Part:98&#34;&gt;

&lt;img src=&#34;part998-suppliers-result-set.jpg&#34; alt=&#34;Result set from SPARQL query to find the suppliers of Part:98&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Result set from SPARQL query to find the suppliers of Part:98
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig1&#34;&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;&lt;/a&gt; The URI with &lt;a href=&#34;https://en.wikipedia.org/wiki/QName&#34;&gt;QName&lt;/a&gt; &lt;code&gt;wd:hasVendor&lt;/code&gt;,  in the &lt;code&gt;predicate&lt;/code&gt; position defines the type of relationship between a &lt;code&gt;subject&lt;/code&gt; with QName &lt;code&gt;Part:998&lt;/code&gt; and an &lt;code&gt;object&lt;/code&gt; with any of these QNames (&lt;code&gt;Supplier:1081&lt;/code&gt;, &lt;code&gt;Supplier:1082&lt;/code&gt;, &lt;code&gt;Supplier:1083&lt;/code&gt;, &lt;code&gt;Supplier:1084&lt;/code&gt;). Both subject and object URIs are in the same namespace (&lt;code&gt;http://example.org/spc/&lt;/code&gt;), these are called &lt;strong&gt;Internal RDF links&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One way to think these &lt;strong&gt;RDF links&lt;/strong&gt; is as a &lt;strong&gt;labeled directed graph&lt;/strong&gt;. Each triple is a directed arc that connects a subject, e.g. &lt;code&gt;Part:998&lt;/code&gt;, with an object, e.g. &lt;code&gt;Supplier:1084&lt;/code&gt;,  and the predicate is the label of the arc, &lt;code&gt;wd:hasVendor&lt;/code&gt;. For example the previous result set can be represented with the following graph in &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig2&#34;&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;gruff-part998-suppliers.jpg&#34; data-caption=&#34;Suppliers of Part:998&#34;&gt;

&lt;img src=&#34;gruff-part998-suppliers.jpg&#34; alt=&#34;Suppliers of Part:998&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Suppliers of Part:998
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;But the graph for the data model of our example is slightly more complicated because there are intermediate nodes, i.e. inventory items that represent records from the &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Catalog.tsv&#34;&gt;Catalog&lt;/a&gt; table, that &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_entity&#34;&gt;&lt;strong&gt;associate&lt;/strong&gt;&lt;/a&gt;, bridge &lt;strong&gt;Suppliers&lt;/strong&gt; with &lt;strong&gt;Parts&lt;/strong&gt; &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig3&#34;&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;gruff-part998-suppliers-and-inventory-items.jpg&#34; data-caption=&#34;Suppliers of Part:998 with intermediate Inventory Items nodes&#34;&gt;

&lt;img src=&#34;gruff-part998-suppliers-and-inventory-items.jpg&#34; alt=&#34;Suppliers of Part:998 with intermediate Inventory Items nodes&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Suppliers of Part:998 with intermediate Inventory Items nodes
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Another distinction of &lt;strong&gt;RDF links&lt;/strong&gt; to &lt;strong&gt;Outgoing&lt;/strong&gt; and &lt;strong&gt;Incoming&lt;/strong&gt; can be seen in &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig3&#34;&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;&lt;/a&gt;. For example &lt;code&gt;Part:998&lt;/code&gt; has four incoming &lt;strong&gt;RDF links&lt;/strong&gt; of type &lt;code&gt;wd:hasPart&lt;/code&gt; and &lt;code&gt;Item:7&lt;/code&gt; has two outgoing &lt;strong&gt;RDF links&lt;/strong&gt; of type &lt;code&gt;wd:hasPart&lt;/code&gt; and &lt;code&gt;wd:hasVendor&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;In fact the SPARQL query above has been written taking in consideration this graph. In order to traverse the nodes you must know both the type of &lt;strong&gt;RDF link&lt;/strong&gt; and its direction. &lt;strong&gt;In RDF graph data model edges are unidirectional&lt;/strong&gt;. In order to define bidirectional edges we have to define both outgoing and incoming  &lt;strong&gt;RDF links&lt;/strong&gt; for each node, i.e. two predicates &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig4&#34;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;gruff-part998-suppliers-bidirectional.jpg&#34; data-caption=&#34;RDF bidirectional&#34;&gt;

&lt;img src=&#34;gruff-part998-suppliers-bidirectional.jpg&#34; alt=&#34;RDF bidirectional&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    RDF bidirectional
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;association-in-rdf&#34;&gt;Association in RDF&lt;/h2&gt;
&lt;p&gt;We can now compare these &lt;a href=&#34;https://healis.eu/en/post/20160902/#topic-map-serialization&#34;&gt;five associations&lt;/a&gt; of &lt;code&gt;Part:998&lt;/code&gt; with &lt;strong&gt;RDF links&lt;/strong&gt; of the graph in &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig6&#34;&gt;&lt;strong&gt;Fig. 6&lt;/strong&gt;&lt;/a&gt;.  One of them is composed with all outgoing triples of &lt;code&gt;Part:998&lt;/code&gt;, i.e. &lt;code&gt;Part:998&lt;/code&gt; is the subject of the triple &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig5&#34;&gt;&lt;strong&gt;Fig. 5&lt;/strong&gt;&lt;/a&gt;. These &lt;code&gt;literal triples&lt;/code&gt; describe five properties of &lt;code&gt;Part:998&lt;/code&gt; resource, yellow boxes of &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig6&#34;&gt;&lt;strong&gt;Fig. 6&lt;/strong&gt;&lt;/a&gt;, and another RDF link is for the type of resource, i.e. &lt;code&gt;Item&lt;/code&gt; (grey box).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; outgoing triples &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;specific&lt;/span&gt; part
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; Part: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;example.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;spc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Part&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;o &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BIND(Part:&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;o .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;part998-outgoing-triples-result-set.jpg&#34; data-caption=&#34;Result set of all outgoing triples for Part:998&#34;&gt;

&lt;img src=&#34;part998-outgoing-triples-result-set.jpg&#34; alt=&#34;Result set of all outgoing triples for `Part:998`&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Result set of all outgoing triples for &lt;code&gt;Part:998&lt;/code&gt;
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The resource &lt;code&gt;Part:998&lt;/code&gt; participates in four associations with &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/ttl/catalog.ttl&#34;&gt;&lt;strong&gt;Inventory&lt;/strong&gt; resources&lt;/a&gt;,  as the object of a triple. These are the four incoming &lt;strong&gt;RDF links&lt;/strong&gt; of &lt;code&gt;Part:998&lt;/code&gt; in &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig3&#34;&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig6&#34;&gt;&lt;strong&gt;Fig. 6&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;gruff-part998.jpg&#34; data-caption=&#34;Five associations of Part:998, four with the green boxes and one with the yellow boxes&#34;&gt;

&lt;img src=&#34;gruff-part998.jpg&#34; alt=&#34;Five associations of `Part:998`, four with the green boxes and one with the yellow boxes&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Five associations of &lt;code&gt;Part:998&lt;/code&gt;, four with the green boxes and one with the yellow boxes
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can write the following SPARQL query to ask for all the suppliers of &lt;code&gt;Part:998&lt;/code&gt; sorted by their catalog price.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;Suppliers &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; Part &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; (Red Fire Hydrant Cap) sorted &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; their &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt; price
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; xsd: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www.w3.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2001&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;XMLSchema&lt;span style=&#34;color:#f92672&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; wd: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www.wikidata.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;property&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;.org&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; rdf: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;www.w3.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1999&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rdf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;syntax&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ns&lt;span style=&#34;color:#f92672&#34;&gt;#&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PREFIX&lt;/span&gt; dc: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;purl.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dc&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;elements&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supName &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supCountry &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catQuantity &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtName &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtColor &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt that has id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; its name &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; color &lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt dc:identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;xsd:int .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt rdf:label &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtName .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:color &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtColor .            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; Find &lt;span style=&#34;color:#66d9ef&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt; items (&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat) &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; a reference &lt;span style=&#34;color:#66d9ef&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; their price &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; quantity &lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasPart &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:cost &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OPTIONAL &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:quantity &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catQuantity .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt; item (&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat) find the vendor that supplies &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; their name &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; the country &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; origin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasVendor &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup rdf:label &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supName .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:country &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supCountry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may consider the analogy between this query and the result set at &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig7&#34;&gt;&lt;strong&gt;Fig. 7&lt;/strong&gt;&lt;/a&gt; and the equivalent &lt;a href=&#34;https://healis.eu/en/post/20160913/#join-vs-edge&#34;&gt;OrientDB SQL query and the result set from a &lt;strong&gt;Property Graph&lt;/strong&gt; data model&lt;/a&gt;. The main differences are that in &lt;strong&gt;Property Graph&lt;/strong&gt; data model you can traverse edges in both directions, (incoming, outcoming), the filtering part (&lt;code&gt;where&lt;/code&gt;) in SPARQL is significantly longer, and the starting point is represented in a different manner (edge vs link).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;graphdb-part998-sup-catprices-1137x178.jpg&#34; data-caption=&#34;Suppliers of Part 998 (Red Fire Hydrant Cap) sorted by their catalog price&#34;&gt;

&lt;img src=&#34;graphdb-part998-sup-catprices-1137x178.jpg&#34; alt=&#34;Suppliers of Part 998 (Red Fire Hydrant Cap) sorted by their catalog price&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;fig7&lt;/h4&gt;
  &lt;p&gt;
    Suppliers of Part 998 (Red Fire Hydrant Cap) sorted by their catalog price
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;gruff-part998-suppliers-catprices-1210x710.jpg&#34; data-caption=&#34;Associations of Part:998 with Suppliers and their Catalog prices&#34;&gt;

&lt;img src=&#34;gruff-part998-suppliers-catprices-1210x710.jpg&#34; alt=&#34;Associations of `Part:998` with Suppliers and their Catalog prices&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Associations of &lt;code&gt;Part:998&lt;/code&gt; with Suppliers and their Catalog prices
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can view a graph representation, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt;, of this SPARQL query and its result data set &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig7&#34;&gt;&lt;strong&gt;Fig. 7&lt;/strong&gt;&lt;/a&gt;. In the same screen capture, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt;, a many-to-many relationship is modeled with RDF triples. &lt;code&gt;Supplier:1082&lt;/code&gt; is associated with three parts (&lt;code&gt;Part:991&lt;/code&gt;, &lt;code&gt;Part:997&lt;/code&gt; and &lt;code&gt;Part:998&lt;/code&gt;) and &lt;code&gt;Part998&lt;/code&gt; is associated with four suppliers (&lt;code&gt;Supplier:1081&lt;/code&gt;, &lt;code&gt;Supplier:1082&lt;/code&gt;, &lt;code&gt;Supplier:1083&lt;/code&gt;, &lt;code&gt;Supplier:1084&lt;/code&gt;), see also &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig9&#34;&gt;&lt;strong&gt;Fig. 9&lt;/strong&gt;&lt;/a&gt;. From a semantic point of view, Parts and Suppliers participate in associations with Inventory items (green boxes - &lt;code&gt;Catalog:7&lt;/code&gt;, &lt;code&gt;Catalog:9&lt;/code&gt;, &lt;code&gt;Catalog:10&lt;/code&gt;, &lt;code&gt;Catalog:11&lt;/code&gt;, &lt;code&gt;Catalog:12&lt;/code&gt; and &lt;code&gt;Catalog:16&lt;/code&gt;). In contrast with the binary relations between Suppliers and Parts represented with directed edges in a &lt;strong&gt;Property Graph&lt;/strong&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#property-graph-with-directed-edges&#34;&gt;see here&lt;/a&gt;, instead of an &lt;strong&gt;edge type&lt;/strong&gt; we have explicit intermediate (bridge) nodes and instead of outgoing head (out) and incoming tail (in) we have two outgoing directional links (&lt;code&gt;wd:hasPart&lt;/code&gt; and &lt;code&gt;wd:hasVendor&lt;/code&gt;) from this intermediate node, e.g. Catalog/Inventory item to Supplier and Part. In such as case these outgoing directional links (&lt;code&gt;wd:hasPart&lt;/code&gt; and &lt;code&gt;wd:hasVendor&lt;/code&gt;) look like &lt;a href=&#34;https://healis.eu/en/post/20160902/#topic-map-serialization&#34;&gt;roles in a Topic Map binary association&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 4 Associations of catalog part no 998 with supplier Ids and catalog prices */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog07&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPart&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1081&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasVendor&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog11&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPart&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1082&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasVendor&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.95&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog12&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPart&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1083&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasVendor&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12.5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog16&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPart&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1084&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HasVendor&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48.6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cost&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;gruff-4suppliers-3parts-1227x457.jpg&#34; data-caption=&#34;A Many-to-Many Relationship between Suppliers and Parts modeled with RDF triples&#34;&gt;

&lt;img src=&#34;gruff-4suppliers-3parts-1227x457.jpg&#34; alt=&#34;A Many-to-Many Relationship between Suppliers and Parts modeled with RDF triples&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    A Many-to-Many Relationship between Suppliers and Parts modeled with RDF triples
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;associative-model&#34;&gt;Associative Model&lt;/h2&gt;
&lt;p&gt;Although it has not become mainstream, we see &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_model_of_data&#34;&gt;associative model of data&lt;/a&gt; as an effort to enhance RDF data model in a new kind of DBMS. The logical layer of &lt;a href=&#34;http://www.sentences.com/sentences.htm&#34;&gt;Sentences&lt;/a&gt; associative database management system may be regarded as comprising of only two tables: one for &lt;code&gt;Items&lt;/code&gt; that represent &lt;code&gt;Entities&lt;/code&gt;, &lt;code&gt;Entity Types&lt;/code&gt;, &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Value Types&lt;/code&gt; and one for &lt;code&gt;Links&lt;/code&gt; that represent among other things &lt;code&gt;Associations&lt;/code&gt; and &lt;code&gt;Association Types&lt;/code&gt; (&lt;strong&gt;[Fig. 15]&lt;/strong&gt;, &lt;strong&gt;[Fig. 16]&lt;/strong&gt;). Both &lt;code&gt;Items&lt;/code&gt; and &lt;code&gt;Links&lt;/code&gt; also represent meta-types and instances, which perform various functions in the database. Thanks to this simple consistent form of &lt;code&gt;Items&lt;/code&gt; and &lt;code&gt;Links&lt;/code&gt;, it is easy to write generic code that is capable of working with every type of data. Recording schema changes and transactions, a type system &lt;strong&gt;[Fig. 15]&lt;/strong&gt;, associative queries in the form of a request tree, business rules, data provenance, automated default data entry forms &lt;strong&gt;[Fig. 16]&lt;/strong&gt; and many other features of Sentences DBMS were designed and implemented based on this generic metacode programming.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SentencesDB_SPC_Types.jpg&#34; data-caption=&#34;Types, Association Instances and their Properties&#34;&gt;

&lt;img src=&#34;SentencesDB_SPC_Types.jpg&#34; alt=&#34;Types, Association Instances and their Properties&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Types, Association Instances and their Properties
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SentencesDB_SPC_DataEntryForms.jpg&#34; data-caption=&#34;Types, Entity Instances and Data Entry Forms&#34;&gt;

&lt;img src=&#34;SentencesDB_SPC_DataEntryForms.jpg&#34; alt=&#34;Types, Entity Instances and Data Entry Forms&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Types, Entity Instances and Data Entry Forms
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In fact along similar principles &lt;a href=&#34;https://en.wikipedia.org/wiki/Freebase&#34;&gt;Freebase&lt;/a&gt; collaborative knowledge base, now known as Google&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Knowledge_Graph&#34;&gt;Knowledge Graph&lt;/a&gt;, was serving its users.&lt;/p&gt;
&lt;p&gt;Both Freebase and Sentences added also reverse edges to their model. In Freebase notation, &lt;strong&gt;[Fig. 10]&lt;/strong&gt; we can see that &lt;code&gt;/film/film&lt;/code&gt; is &lt;code&gt;/directed_by&lt;/code&gt; a &lt;code&gt;/film/director&lt;/code&gt; and a &lt;code&gt;/film/director&lt;/code&gt; has directed (&lt;code&gt;/film&lt;/code&gt;) a &lt;code&gt;/film/film&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;freebase-film.jpg&#34; data-caption=&#34;Movies Data Model in Freebase&#34;&gt;

&lt;img src=&#34;freebase-film.jpg&#34; alt=&#34;Movies Data Model in Freebase&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Movies Data Model in Freebase
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Bidirectional links allow a 360° view of every data item in the database. Directed edges in &lt;strong&gt;Property Graph&lt;/strong&gt; share the same concept, &lt;a href=&#34;https://healis.eu/en/post/20160913/#property-graph-with-directed-edges&#34;&gt;see here&lt;/a&gt;. In the following three figures (&lt;a href=&#34;https://healis.eu/en/post/20161220/#fig11&#34;&gt;&lt;strong&gt;Fig. 11&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig12&#34;&gt;&lt;strong&gt;Fig. 12&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig13&#34;&gt;&lt;strong&gt;Fig. 13&lt;/strong&gt;&lt;/a&gt;) we present three alternative schema views for our Supplier-Part-Catalog database that we built on Sentences DBMS. &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig11&#34;&gt;&lt;strong&gt;Fig. 11&lt;/strong&gt;&lt;/a&gt; illustrates that it is possible to add attributes on the link. &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig12&#34;&gt;&lt;strong&gt;Fig. 12&lt;/strong&gt;&lt;/a&gt; shows that &lt;code&gt;Supplier&lt;/code&gt;, &lt;code&gt;Catalog&lt;/code&gt; and &lt;code&gt;Part&lt;/code&gt; entities are sharing common attributes while in &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig13&#34;&gt;&lt;strong&gt;Fig. 13&lt;/strong&gt;&lt;/a&gt; they are directly connected with bidirectional links.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;








  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/post/20161220/screen_captures/SPC-bidirectional_edges_associations_directconnections.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/post/20161220/screen_captures/SPC-bidirectional_edges_associations_directconnections_hu2f5ba3506c67aca4d5953246be86fb8c_118507_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/post/20161220/screen_captures/SPC-bidirectional_edges_associations_indirectconnections.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/post/20161220/screen_captures/_huf9a85b6d31db297a90a7e332a9e02929_142663_2be83408ec7f9a57b41252a8ecdc2a14.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-screen_captures&#34; href=&#34;https://healis.eu/en/post/20161220/screen_captures/SPC-bidirectional_edges_associations_propertygraph.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/post/20161220/screen_captures/SPC-bidirectional_edges_associations_propertygraph_hu854a3e7bd7fe75e3520da486490b9b8f_93442_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
&lt;h2 id=&#34;association-in-r3dm&#34;&gt;Association in R3DM&lt;/h2&gt;
&lt;p&gt;According to &lt;a href=&#34;https://healis.eu/en/post/20160913/#r3dm-hypergraph-terminology&#34;&gt;R3DM Hypergaph Terminology&lt;/a&gt;, the objects of &lt;code&gt;RDF literal&lt;/code&gt; triples, i.e. values, are  &lt;strong&gt;HyperAtoms&lt;/strong&gt; and the resources of &lt;strong&gt;RDF links&lt;/strong&gt; are &lt;strong&gt;HyperBonds&lt;/strong&gt;. Thus the RDF graph of &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt; can be redrawn as a hypergraph with &lt;!-- raw HTML omitted --&gt; red &lt;!-- raw HTML omitted --&gt; nodes that play the role of &lt;strong&gt;HyperAtoms&lt;/strong&gt; and &lt;!-- raw HTML omitted --&gt; green &lt;!-- raw HTML omitted --&gt; nodes that play the role of &lt;strong&gt;HyperBonds&lt;/strong&gt;, see &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig14&#34;&gt;&lt;strong&gt;Fig. 14&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;part998-R3DM_hypergraph.png&#34; data-caption=&#34;R3DM Hypergraph&#34;&gt;

&lt;img src=&#34;part998-R3DM_hypergraph.png&#34; alt=&#34;R3DM Hypergraph&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    R3DM Hypergraph
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This R3DM hypergraph figure above, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig14&#34;&gt;&lt;strong&gt;Fig. 14&lt;/strong&gt;&lt;/a&gt;, has been created from the execution of the following Wolfram Language code. You will notice that &lt;strong&gt;HyperAtom&lt;/strong&gt; sets such as &lt;strong&gt;ha2-(catcost)&lt;/strong&gt; and &lt;strong&gt;ha5-(catqnt)&lt;/strong&gt; are attribute sets with value members that take part in the formation of &lt;strong&gt;Catalog&lt;/strong&gt; records with instances that are drawn from &lt;strong&gt;hb2 set&lt;/strong&gt;. &lt;strong&gt;Supplier&lt;/strong&gt; instances are drawn from the other &lt;strong&gt;HyperBond&lt;/strong&gt; set (&lt;strong&gt;hb3&lt;/strong&gt;) and &lt;strong&gt;ha3-(sname)&lt;/strong&gt;, &lt;strong&gt;ha4-(scountry)&lt;/strong&gt; are attribute sets with value members that describe the &lt;strong&gt;Suppliers&lt;/strong&gt;. Instances from these &lt;strong&gt;HyperBond&lt;/strong&gt; sets may share common values or associated with the same &lt;strong&gt;HyperBond&lt;/strong&gt;. For example we have two suppliers, &lt;strong&gt;Supplier:1082&lt;/strong&gt; and &lt;strong&gt;Supplier:1081&lt;/strong&gt; that are located in &lt;strong&gt;USA&lt;/strong&gt; or &lt;strong&gt;Catalog:11&lt;/strong&gt; and &lt;strong&gt;Catalog:16&lt;/strong&gt; entries that are associated with &lt;strong&gt;Part:998&lt;/strong&gt; and they both have the same quantity, i.e. &lt;strong&gt;200&lt;/strong&gt; pieces of this part.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ha1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`,&amp;#34;lb&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ha2={11.7,7.95,12.5,48.6};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ha3={&amp;#34;Acme Widget Suppliers&amp;#34;,&amp;#34;Big Red Tool and Die&amp;#34;,&amp;#34;Perfunctory Parts&amp;#34;,&amp;#34;Alien Aircaft Inc.&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ha4={&amp;#34;USA&amp;#34;,&amp;#34;USA&amp;#34;,&amp;#34;SPAIN&amp;#34;,&amp;#34;UK&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ha5={&amp;#34;400&amp;#34;,&amp;#34;200&amp;#34;,&amp;#34;200&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hb1={&amp;#34;Part:998&amp;#34;,&amp;#34;schema:item&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hb2={&amp;#34;Catalog:7&amp;#34;,&amp;#34;Catalog:11&amp;#34;,&amp;#34;Catalog:12&amp;#34;,&amp;#34;Catalog:16&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hb3={&amp;#34;Supplier:1081&amp;#34;,&amp;#34;Supplier:1082&amp;#34;,&amp;#34;Supplier:1083&amp;#34;,&amp;#34;Supplier:1084&amp;#34;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vstyle=Join[Thread[Join[ha1,ha2, ha3,ha4,ha5]-&amp;gt;Red],Thread[Join[hb1,hb2,hb3]-&amp;gt;Green]];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;data=Join[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  {&amp;#34;Part:998&amp;#34;-&amp;gt;&amp;#34;schema:item&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Thread[&amp;#34;Part:998&amp;#34;-&amp;gt;ha1],Thread[hb2-&amp;gt;ha2],
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Thread[hb2-&amp;gt;hb3],Thread[hb3-&amp;gt;ha3],
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Thread[hb3-&amp;gt;ha4],Thread[hb2-&amp;gt;&amp;#34;Part:998&amp;#34;],  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Thread[{&amp;#34;Catalog:7&amp;#34;,&amp;#34;Catalog:11&amp;#34;,&amp;#34;Catalog:16&amp;#34;}-&amp;gt;ha5]];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Graph[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  data,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  VertexLabels-&amp;gt;&amp;#34;Name&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  VertexSize-&amp;gt;{{&amp;#34;Nearest&amp;#34;,0.15}},
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  VertexStyle-&amp;gt;vstyle,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  EdgeShapeFunction-&amp;gt;GraphElementData[{&amp;#34;CarvedArrow&amp;#34;,&amp;#34;ArrowSize&amp;#34;-&amp;gt;.02}],
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  EdgeStyle-&amp;gt;Thick,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  GraphLayout-&amp;gt;&amp;#34;SpringEmbedding&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ImageSize-&amp;gt;{400.,Automatic}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can rewrite now the following four associations :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 4 Associations of catalog part no 998 with supplier Ids and catalog prices */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CatalogID&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;catpid&lt;/span&gt;,  &lt;span style=&#34;color:#a6e22e&#34;&gt;catsid&lt;/span&gt;,       &lt;span style=&#34;color:#a6e22e&#34;&gt;catqnt&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;catcost&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog07&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1081&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,    &lt;span style=&#34;color:#ae81ff&#34;&gt;11.70&lt;/span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog11&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1082&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,     &lt;span style=&#34;color:#ae81ff&#34;&gt;7.95&lt;/span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog12&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1083&lt;/span&gt;,         &lt;span style=&#34;color:#ae81ff&#34;&gt;12.50&lt;/span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Catalog16&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;Part998&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Supplier1084&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,    &lt;span style=&#34;color:#ae81ff&#34;&gt;48.60&lt;/span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Associations in this form greatly resemble tuples of &lt;strong&gt;Catalog&lt;/strong&gt; relation, see &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Catalog.tsv&#34;&gt;TSV&lt;/a&gt; format, where the &lt;strong&gt;heading&lt;/strong&gt; of this relation is usually stored in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_dictionary&#34;&gt;data dictionary&lt;/a&gt; and &lt;strong&gt;Null&lt;/strong&gt; marker indicates that a data value is absent from the tuple. On the contrary in case of &lt;strong&gt;RDF literal&lt;/strong&gt; triples the predicate position signifies the object part of the triple and in &lt;strong&gt;RDF links&lt;/strong&gt; Instances/Type of resources at subject and object positions are also signified by predicates such as (&lt;code&gt;rdf:type&lt;/code&gt;). But in &lt;strong&gt;R3DM associations&lt;/strong&gt; there is not any label on the edge that connects &lt;strong&gt;HyperAtoms&lt;/strong&gt; or &lt;strong&gt;HyperBonds&lt;/strong&gt;. Therefore the denotation of resources and literals, i.e. what they stand for, cannot be seen on this graph, &lt;a href=&#34;https://healis.eu/en/post/20161220/#fig14&#34;&gt;&lt;strong&gt;Fig. 14&lt;/strong&gt;&lt;/a&gt;. For example in &lt;code&gt;Catalog12&lt;/code&gt; association instance we have to know that the literal meaning of the value &lt;code&gt;12.5&lt;/code&gt; is the &lt;strong&gt;Catalog Cost&lt;/strong&gt;. Generally speaking, this is the &lt;strong&gt;granularity of data&lt;/strong&gt; problem. How we represent a piece of information at atomic level and how we construct higher structures. &lt;strong&gt;R3DM/S3DM unifies three perspectives, semantics at the conceptual layer, representation at the symbol layer and encoding at the physical layer&lt;/strong&gt;, in such a way that they are separable. R3DM/S3DM conceptual framework is based on the natural process of semiosis where &lt;strong&gt;the signified, i.e. concept, entity, attribute and the signifier, i.e. value, &lt;a href=&#34;https://healis.eu/en/post/20150320/#signified-sign-signifier-alternative-paradigm&#34;&gt;are referenced through symbols&lt;/a&gt;, i.e. signs, at discrete layers&lt;/strong&gt;. The main difference with RDF data model is that these references are not in the form of &lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_resource_identifier&#34;&gt;URIs&lt;/a&gt; but they resemble &lt;a href=&#34;https://en.wikipedia.org/wiki/IP_address&#34;&gt;IPs&lt;/a&gt;. For example the value &lt;code&gt;12.50&lt;/code&gt; can be referenced by a 4D vector of the form &lt;code&gt;{2, 8, 262, 1}&lt;/code&gt; where the first dimension is the database, the second dimension is the table (Entity), the third dimension is the field (Attribute) and the last dimension is a member of an attribute set.&lt;/p&gt;
&lt;h2 id=&#34;discussion&#34;&gt;Discussion&lt;/h2&gt;
&lt;p&gt;Although this is not the space or the time to elaborate more on &lt;strong&gt;R3DM/S3DM associations&lt;/strong&gt; it is important to mention that it is possible to escape from the predicate logic (&lt;code&gt;owl#sameAs&lt;/code&gt;) on how to identify that two URI aliases refer to the same entity. Moreover the alternative paradigm of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; offers a more attractive and efficient approach on data integration and heterogeneous data representation than bridging between RDF vocabularies with mapping predicates such as &lt;code&gt;owl:equivalentClass&lt;/code&gt;  and &lt;code&gt;owl:equivalentProperty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We foresee that the Internet of things will use a protocol with numerical reference vectors for data communication in a similar fashion to IP addresses that are used for connecting devices in a computer network. Hopefully one day it will become clear that the predicate part of RDF data model is causing more harm than good in the semantic interpretation and information representation.&lt;/p&gt;
&lt;p&gt;Last but not least, SPARQL query mechanism is heavily dependent on namespace vocabulary terms, especially predicate terms that connect resources and literals. To answer such queries, care must be taken to devise a suitable mechanism of indexes (e.g. spo, sop, pso, pos, osp, ops) to support RDF triple structure. Besides indexing, RDF edges by default are not bidirectional, therefore 360 degrees view and nodes navigation is problematic. In contrast with RDF, in R3DM/S3DM everything is bidirectionally linked and referenced with 4D numerical vectors and these are naturally used for indexing purposes. Instead of writing queries there is a functional way, i.e. you learn a single command with a standard number of optional or mandatory parameters, to filter the data space and retrieve any piece of information.&lt;/p&gt;
&lt;p&gt;Interactive and associative data exploration is the key, unique feature of &lt;a href=&#34;http://www.qlik.com/us/products/qlikview&#34;&gt;Qlikview&lt;/a&gt;/&lt;a href=&#34;http://www.qlik.com/us/products/qlik-sense&#34;&gt;Qliksense&lt;/a&gt;, one of the best data visualization and business intelligence software in the market today. Behind the scenes, columnar, binary indexing capability is the foundation for &lt;strong&gt;QIX Associative Data Indexing Engine&lt;/strong&gt;. In the next part of our series we will apply Qlik associative technology on our toy dataset and we will demonstrate how we build the domain model and how we filter our data.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;We have serialized our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue&#34;&gt;Supplier-Part-Catalogue example&lt;/a&gt; in &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/ttl/&#34;&gt;Turtle&lt;/a&gt; and &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/n3/&#34;&gt;N-Triples&lt;/a&gt; syntax. Then we used &lt;a href=&#34;https://en.wikipedia.org/wiki/AllegroGraph&#34;&gt;AllegroGraph&lt;/a&gt; and &lt;a href=&#34;http://graphdb.ontotext.com/documentation/free/about-graphdb.html&#34;&gt;GraphDB&lt;/a&gt; triple-store to create a repository and run queries on their SPARQL interfaces. All graph-based images of this article were displayed and captured on &lt;a href=&#34;https://franz.com/agraph/gruff/&#34;&gt;Gruff&lt;/a&gt;, an RDF visual browser that displays a variety of the relationships in &lt;a href=&#34;https://en.wikipedia.org/wiki/AllegroGraph&#34;&gt;AllegroGraph&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/associative-data-modeling-demystified-part-4-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/49970/49970-6217358696947814400&#34;&gt;LinkedIn Semantic Web Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6217357737450438660&#34;&gt;LinkedIn Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/108904/108904-6217358696935231488&#34;&gt;LinkedIn Data Warehouse &amp;amp; Business Intelligence Architects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-6217358562243543041&#34;&gt;LinkedIn Computational Semiotics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/38506/38506-6217358477753483266&#34;&gt;LinkedIn Semantic Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/4737538/4737538-6217357595209015300&#34;&gt;LinkedIn Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6217358686722097153&#34;&gt;LinkedIn Database &amp;amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/73235/73235-6217357914919837698&#34;&gt;LinkedIn Database Developers and Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/60636/60636-6217357769868222467&#34;&gt;LinkedIn Linked Data Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62614/62614-6217357140789727236&#34;&gt;LinkedIn Mathematica Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6217358477761875970&#34;&gt;LinkedIn Database Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/associative-data-modeling-demystified-part-iv&#34;&gt;DZone Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Association in Property Graph Data Model</title>
      <link>https://healis.eu/en/post/20160913/</link>
      <pubDate>Tue, 13 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160913/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#wolfram-language-entitypropertyassociation&#34;&gt;Wolfram Language EntityPropertyAssociation&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#r3dm-hypergraph-terminology&#34;&gt;R3DM Hypergraph Terminology&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#property-graph&#34;&gt;Property Graph&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#property-graph-nodes&#34;&gt;Property Graph Nodes&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#property-graph-with-directed-edges&#34;&gt;Property Graph with Directed Edges&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#property-graph-with-bidirectional-links&#34;&gt;Property Graph with Bidirectional Links&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#property-graph-and-object-oriented-database&#34;&gt;Property Graph and Object-Oriented database&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#association-vs-edge&#34;&gt;Association vs Edge&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#join-vs-edge&#34;&gt;Join vs Edge&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In previous posts of this series, (&lt;a href=&#34;https://healis.eu/en/post/20160825/&#34;&gt;Part-1&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160902/&#34;&gt;Part-2&lt;/a&gt;), we have seen several representations of the association construct. In this article we continue our investigation with the Graph Data model. Despite its mere representation as nodes and edges, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_(abstract_data_type)&#34;&gt;structure of this model&lt;/a&gt; and its implementation details varies a lot in &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_database&#34;&gt;Graph Databases&lt;/a&gt;. There is still a strong controversy and perhaps confusion on &lt;a href=&#34;https://www.arangodb.com/2016/04/index-free-adjacency-hybrid-indexes-graph-databases/&#34;&gt;what makes a database, a Graph database&lt;/a&gt; and many are not fully aware that there exist other types of Graph Databases apart from Property Graph Database. Things get more complicated because the engine of a &lt;a href=&#34;http://tinkerpop.apache.org/docs/current/reference/#intro&#34;&gt;Property Graph Database&lt;/a&gt; is not the same kind of engine with either an &lt;a href=&#34;https://en.wikipedia.org/wiki/Triplestore&#34;&gt;RDF store&lt;/a&gt; or engines based on &lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/&#34;&gt;Topic Maps&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational&lt;/a&gt; data model. Property Graph data model is neither close to &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_model&#34;&gt;Object Model&lt;/a&gt;, a data model that is found in &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_database&#34;&gt;Object-oriented database management systems&lt;/a&gt;. There are &lt;strong&gt;significant differences of the Property Graph data model at both the logical and the physical level with all other models and it has not been established yet as a standard&lt;/strong&gt;. Which brings us to the question whether there is indeed a necessity for another data model standard based on the association construct to fill the space of Property Graph databases and bridge also the gap with other Semantic Web technologies, especially &lt;a href=&#34;http://json-ld.org/&#34;&gt;JSON for Linking Data&lt;/a&gt;. This question will not be answered in this post, we will make an attempt instead to give a formal definition of the association construct using the mighty Wolfram Language and compare it with RDF and Property Graph components and this will prepare also the ground for introducing our R3DM data model later on.&lt;/p&gt;
&lt;h2 id=&#34;wolfram-language-entitypropertyassociation&#34;&gt;Wolfram Language EntityPropertyAssociation&lt;/h2&gt;
&lt;p&gt;Real-world entities are another kind of symbolic expression that exists in latest versions of the Wolfram Language. You can get the values of specific properties for an &lt;a href=&#34;http://reference.wolfram.com/language/ref/Entity.html&#34;&gt;&lt;code&gt;Entity&lt;/code&gt;&lt;/a&gt;, if it exists in &lt;a href=&#34;https://www.wolfram.com/knowledgebase/&#34;&gt;&lt;code&gt;Wolfram Knowledgebase&lt;/code&gt;&lt;/a&gt;, world&amp;rsquo;s largest and broadest repository of computable information according to Wolfram. But you do not write a query to fetch the data, you use a functional approach instead. The network delay for a first time search on specific values of &lt;a href=&#34;http://reference.wolfram.com/language/ref/EntityProperties.html&#34;&gt;EntityProperties&lt;/a&gt; is minimal. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Socrates&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Entity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Person&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socrates::dnz7w&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;EntityValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#66d9ef&#34;&gt;Socrates&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {gender,date of birth,place of birth,parents,children},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EntityPropertyAssociation&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the third argument of the &lt;a href=&#34;http://reference.wolfram.com/language/ref/EntityValue.html&#34;&gt;EntityValue&lt;/a&gt; function here, &lt;code&gt;EntityPropertyAssociation&lt;/code&gt; will format the output, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig1&#34;&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;&lt;/a&gt;, of this calculation as an association in which the specified entity is the key, and value is another nested association of properties and &lt;code&gt;EntityProperties&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;socrates_EntityPropertyAssociation-817x90.jpg&#34; data-caption=&#34;Wolfram Language EntityPropertyAssociation&#34;&gt;

&lt;img src=&#34;socrates_EntityPropertyAssociation-817x90.jpg&#34; alt=&#34;Wolfram Language EntityPropertyAssociation&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Wolfram Language EntityPropertyAssociation
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;A boxed word is the symbolic Wolfram Language &lt;a href=&#34;http://reference.wolfram.com/language/guide/KnowledgeRepresentationAndAccess.html&#34;&gt;&lt;code&gt;Knowledge Representation&lt;/code&gt;&lt;/a&gt; of a named entity of any type, (e.g. Person, City, Property), that is used as a handler to access records of information about that &lt;code&gt;Entity&lt;/code&gt; that are stored in &lt;code&gt;Wolfram Knowledgebase&lt;/code&gt;. The reader should realize how important this symbolic representation is in data modeling. Although the developer/user may compute a solution with a boxed &lt;code&gt;CommonName&lt;/code&gt;, e.g. Socrates, behind the scenes a canonical name, e.g. &lt;strong&gt;Socrates::dnz7w&lt;/strong&gt;, is used as the unique identifier for the &lt;code&gt;Entity&lt;/code&gt; to disambiguate and to interpret user&amp;rsquo;s instructions.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;EntityPropertyAssociation&lt;/code&gt; representation extends Wolfram Language fundamental &lt;a href=&#34;http://reference.wolfram.com/language/guide/Associations.html&#34;&gt;&lt;code&gt;Association&lt;/code&gt;&lt;/a&gt; construct, and it is in accordance with Topic Map Association serialization that we discussed in the &lt;a href=&#34;https://healis.eu/en/post/20160902/#topic-map-serialization&#34;&gt;second part of our series&lt;/a&gt;. The following figure, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig2&#34;&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;&lt;/a&gt;, is from a previous example that is included in &lt;a href=&#34;https://healis.eu/en/post/20160825/#wolfram-language---association&#34;&gt;Part 1&lt;/a&gt; of our series and depicts three associations of this kind in a &lt;a href=&#34;http://reference.wolfram.com/language/ref/Dataset.html&#34;&gt;Wolfram Dataset&lt;/a&gt;. Each association represents an Entity type instance (&lt;strong&gt;$PartI&lt;/strong&gt;, &lt;strong&gt;$SupplierJ&lt;/strong&gt; and &lt;strong&gt;$CatalogK&lt;/strong&gt;) and for each instance the entity type (&lt;strong&gt;$Item&lt;/strong&gt;, &lt;strong&gt;$Organization&lt;/strong&gt;, &lt;strong&gt;$Inventory&lt;/strong&gt;) is embedded as a key value pair together with other &lt;code&gt;EntityProperties&lt;/code&gt; key-value pairs.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;three_associations.jpg&#34; data-caption=&#34;Three Associations in a Named-Row Dataset&#34;&gt;

&lt;img src=&#34;three_associations.jpg&#34; alt=&#34;Three Associations in a Named-Row Dataset&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Three Associations in a Named-Row Dataset
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Contrast this with mere tuples from the three tables of our relational database, &lt;strong&gt;Supplier&lt;/strong&gt;, &lt;strong&gt;Part&lt;/strong&gt;, &lt;strong&gt;Catalog&lt;/strong&gt;. Semantically speaking, the three tuples cannot stand alone without the header of the relation body and their relation type. In addition to that observation, each value of either an &lt;code&gt;EntityPropertyAssociation&lt;/code&gt; or member of a  tuple, is always dependent on their sibling nodes. &lt;strong&gt;Therefore values cannot be handled in isolation&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gr&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Grub St., Potemkin Village, IL 61801&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ILLINOIS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014-9-10&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;} }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;r3dm-hypergraph-terminology&#34;&gt;R3DM Hypergraph Terminology&lt;/h3&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;partNo998-EntityPropertyAssociation-420x300.jpg&#34; data-caption=&#34;A Hyperbond hyperlinked to HyperAtoms&#34;&gt;

&lt;img src=&#34;partNo998-EntityPropertyAssociation-420x300.jpg&#34; alt=&#34;A Hyperbond hyperlinked to HyperAtoms&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    A Hyperbond hyperlinked to HyperAtoms
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The figure on the left, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig3&#34;&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;&lt;/a&gt;, illustrates a single &lt;code&gt;EntityPropertyAssociation&lt;/code&gt; of &lt;strong&gt;Part no. 998&lt;/strong&gt; with its properties and values. According to Hypergraph theory, red nodes are hypernodes and the green node is the hyperedge where here connects a set of hypernodes. In R3DM we use the following definitions and terminology.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;EntityPropertyAssociation&lt;/code&gt; can be defined as an &lt;code&gt;Association&lt;/code&gt; of entity&amp;rsquo;s attributes (properties) with values. Each attribute-value pair is represented on the hypergraph by a &lt;code&gt;hyperatom&lt;/code&gt;. Therefore the general form of a &lt;code&gt;hyperatom&lt;/code&gt; is a key-value pair. Each &lt;code&gt;hyperatom&lt;/code&gt; is &lt;strong&gt;always connected bidirectionally&lt;/strong&gt; to a &lt;code&gt;hyperbond&lt;/code&gt; with a &lt;code&gt;hyperlink&lt;/code&gt;. Normally &lt;code&gt;hyperlinks&lt;/code&gt; do not have labels or direction. A &lt;code&gt;hyperbond&lt;/code&gt; represents a complex structure, such as a tuple of a relation or instance of a class. The role of a &lt;code&gt;hyperbond&lt;/code&gt; is to connect a set of &lt;code&gt;hyperatoms&lt;/code&gt;. A &lt;code&gt;hyperbond&lt;/code&gt; to &lt;code&gt;hyperbond&lt;/code&gt; connection is also possible.&lt;/p&gt;
&lt;p&gt;Two important observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can easily spot similarities between R3DM hypergraph paradigm and JSON documents. A JSON object can be represented with a &lt;code&gt;hyperbond&lt;/code&gt; and a field-value pair (property) can be represented with a &lt;code&gt;hyperatom&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Entities, attributes (variables), and values each has its own type system in R3DM. These type systems will be analyzed methodically in another post but you can get a taste of what they look like &lt;a href=&#34;https://healis.eu/en/post/20160902/#r3dm-type-system-in-wandora&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;property-graph&#34;&gt;Property Graph&lt;/h2&gt;
&lt;p&gt;We defined &lt;code&gt;EntityPropertyAssociation&lt;/code&gt; and we got familiar with the terminology of R3DM hypergraph. We can now proceed to examine the analogy with the Property Graph data model.&lt;/p&gt;
&lt;p&gt;Recall that a property graph has vertices and edges where :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;each vertex has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a set of outgoing edges.&lt;/li&gt;
&lt;li&gt;a set of incoming edges.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;each edge has&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an outgoing tail vertex.&lt;/li&gt;
&lt;li&gt;an incoming head vertex.&lt;/li&gt;
&lt;li&gt;a label that denotes the type of relationship between its two vertices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vertex and edge have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a unique identifier&lt;/li&gt;
&lt;li&gt;a collection of properties defined by a map from key to value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We built a property graph data model for our &lt;strong&gt;Supplier&lt;/strong&gt;-&lt;strong&gt;Part&lt;/strong&gt;-&lt;strong&gt;Catalog&lt;/strong&gt; example in &lt;a href=&#34;https://orientdb.org/&#34;&gt;OrientDB&lt;/a&gt;, a very popular, open-source, and free multi-model database.&lt;/p&gt;
&lt;h3 id=&#34;property-graph-nodes&#34;&gt;Property Graph Nodes&lt;/h3&gt;
&lt;p&gt;OrientDB allows both schema-full and schema-less creation of classes. Each class represents either a type of nodes or a type of edges on the graph. In the manner of a relational schema, we can add properties of a class with OrientDB SQL commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CLASS&lt;/span&gt; Part EXTENDS V;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY Part.pid INTEGER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY Part.pname STRING;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY Part.pcolor STRING;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY Part.pweight DOUBLE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY Part.punit STRING;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CLASS&lt;/span&gt; Part SHORTNAME P;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can populate the class with records, e.g. create a vertex (an instance of type &lt;strong&gt;Part&lt;/strong&gt;) that represents &lt;strong&gt;Part no. 998&lt;/strong&gt; (Red Fire Hydrant Cap)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; VERTEX Part CONTENT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pweight&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;punit&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;property-graph-with-directed-edges&#34;&gt;Property Graph with Directed Edges&lt;/h3&gt;
&lt;p&gt;Now comes the tricky part, we want to associate &lt;strong&gt;Suppliers&lt;/strong&gt; with &lt;strong&gt;Parts&lt;/strong&gt;. Notice that in Property Graph data model there is not an &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_entity&#34;&gt;associative entity&lt;/a&gt; to resolve a many-to-many relationship. We only have the concept of a directed edge that links one vertex with another vertex. Let us define the type of edge first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CLASS&lt;/span&gt; inCatalog EXTENDS E;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY inCatalog.catsid INTEGER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY inCatalog.catpid INTEGER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY inCatalog.catprice DOUBLE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY inCatalog.catqnt INTEGER;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY inCatalog.catdate DATETIME;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; PROPERTY inCatalog.catchk BOOLEAN;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CLASS&lt;/span&gt; inCatalog SHORTNAME &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this OrientDB DDL &lt;code&gt;inCatalog.catsid&lt;/code&gt; and &lt;code&gt;inCatalog.catpid&lt;/code&gt; are superfluous, we added them for comparison purposes with the relational model. Records of edge type &lt;code&gt;inCatalog&lt;/code&gt; contain record identifiers for the outgoing tail vertex and the incoming head vertex &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig11&#34;&gt;&lt;strong&gt;Fig. 11&lt;/strong&gt;&lt;/a&gt;. Secondly, it is not specified in the schema that this type of edge, &lt;code&gt;inCatalog&lt;/code&gt;, connects &lt;strong&gt;Suppliers&lt;/strong&gt; with &lt;strong&gt;Parts&lt;/strong&gt;, neither is specified any direction on how to link these two types. These are defined during the creation of an edge.&lt;/p&gt;
&lt;p&gt;One way of creating &lt;code&gt;inCatalog&lt;/code&gt; instances is to read each &lt;strong&gt;Catalog&lt;/strong&gt; record from the table, get OrientDB record identifiers (&lt;a href=&#34;https://orientdb.com/docs/2.2.x/Tutorial-Record-ID.html&#34;&gt;RIDs&lt;/a&gt;) for the specific &lt;strong&gt;Supplier&lt;/strong&gt; and &lt;strong&gt;Part&lt;/strong&gt; and then execute OrientDB &lt;code&gt;CREATE EDGE&lt;/code&gt; SQL command to create a bidirectional edge. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; EDGE inCatalog &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; CONTENT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catsid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catpid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catprice&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catqnt&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catdate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014-09-10&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catchk&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Newcomers can easily get confused with Property Graph edges. This is because although the outgoing tail and the incoming head of the edge implies a directed graph, in practice &lt;strong&gt;we can traverse the graph bidirectionally&lt;/strong&gt;, i.e. start from any node to reach another node independent of the direction of the edge.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SPCPGraph-4suppliers-3parts-800x400.jpg&#34; data-caption=&#34;A Many to Many Relationship on a Property Graph&#34;&gt;

&lt;img src=&#34;SPCPGraph-4suppliers-3parts-800x400.jpg&#34; alt=&#34;A Many to Many Relationship on a Property Graph&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    A Many to Many Relationship on a Property Graph
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In this screen capture, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig4&#34;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;&lt;/a&gt;, of OrientDB graph canvas one &lt;strong&gt;Supplier&lt;/strong&gt; is associated with three &lt;strong&gt;Parts&lt;/strong&gt; and one &lt;strong&gt;Part&lt;/strong&gt; is associated with three &lt;strong&gt;Suppliers&lt;/strong&gt;. We observe that &lt;code&gt;inCatalog&lt;/code&gt; edges are always from a &lt;strong&gt;Supplier&lt;/strong&gt; to a &lt;strong&gt;Part&lt;/strong&gt;. This is because we created edges this way, we could have created them equally in the opposite direction. Semantically speaking, both &lt;strong&gt;Supplier&lt;/strong&gt; and &lt;strong&gt;Part&lt;/strong&gt; participate in a &lt;strong&gt;Catalog&lt;/strong&gt; association and their binary relation is not directed. In such a case Property Graph edges look like &lt;a href=&#34;https://healis.eu/en/post/20160902/#topic-map-serialization&#34;&gt;Topic Map binary associations&lt;/a&gt;. The label of the edge is the type and the roles of its members are played by the outgoing head (&lt;code&gt;out&lt;/code&gt;) and incoming tail (&lt;code&gt;in&lt;/code&gt;), &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig5&#34;&gt;&lt;strong&gt;Fig. 5&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SPCPGraph-bidirectional-edge-814x162.jpg&#34; data-caption=&#34;Directed Bidirectional Edge&#34;&gt;

&lt;img src=&#34;SPCPGraph-bidirectional-edge-814x162.jpg&#34; alt=&#34;Directed Bidirectional Edge&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Directed Bidirectional Edge
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;property-graph-with-bidirectional-links&#34;&gt;Property Graph with Bidirectional Links&lt;/h3&gt;
&lt;p&gt;Hence the bidirectional nature of the edge can be seen in two ways.&lt;/p&gt;
&lt;p&gt;Firstly the &lt;code&gt;out&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; links can be considered as one-to-one relationship of an edge with vertices. One &lt;strong&gt;Supplier&lt;/strong&gt;/&lt;strong&gt;Part&lt;/strong&gt; is referenced by Many &lt;strong&gt;Catalog&lt;/strong&gt; items. The fields that are linked are the RID of &lt;strong&gt;Catalog&lt;/strong&gt; with the RID of &lt;strong&gt;Part&lt;/strong&gt; or &lt;strong&gt;Supplier&lt;/strong&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig11&#34;&gt;&lt;strong&gt;Fig. 11&lt;/strong&gt;&lt;/a&gt;. This type of direct linking is similar to the many-to-many relationship with a join-table, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig6&#34;&gt;&lt;strong&gt;Fig. 6&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;one-to-many.jpg&#34; data-caption=&#34;Many-to-Many relationship with direct links on Associative Entity (edge)&#34;&gt;

&lt;img src=&#34;one-to-many.jpg&#34; alt=&#34;Many-to-Many relationship with direct links on Associative Entity (edge)&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Many-to-Many relationship with direct links on Associative Entity (edge)
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Secondly, on the &lt;code&gt;one&lt;/code&gt; side of the relationship, i.e. on the vertex we have the link set of outgoing/incoming edges, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig9&#34;&gt;&lt;strong&gt;Fig. 9&lt;/strong&gt;&lt;/a&gt;. For example, many &lt;strong&gt;Catalog&lt;/strong&gt; items (&lt;a href=&#34;https://orientdb.com/docs/2.2.x/Types.html&#34;&gt;LinkSet&lt;/a&gt;) have One &lt;strong&gt;Supplier&lt;/strong&gt;/&lt;strong&gt;Part&lt;/strong&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig7&#34;&gt;&lt;strong&gt;Fig. 7&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;many-to-one.jpg&#34; data-caption=&#34;Many-to-Many relationship with sets of direct links&#34;&gt;

&lt;img src=&#34;many-to-one.jpg&#34; alt=&#34;Many-to-Many relationship with sets of direct links&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Many-to-Many relationship with sets of direct links
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The following query returns a list of both the outgoing edges for &lt;code&gt;Big Red Tool and Die&lt;/code&gt; &lt;strong&gt;Supplier&lt;/strong&gt;, see &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig4&#34;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;&lt;/a&gt;, and the list of associated &lt;strong&gt;Parts&lt;/strong&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;rid &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; Supplier,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       out_inCatalog &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; Part,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       sid &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; supplierID, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt;().pid &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; partID,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       scountry, scity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SPCPGraph-Supplier-LinkSet.jpg&#34; data-caption=&#34;Set of Outgoing Edges for Supplier&#34;&gt;

&lt;img src=&#34;SPCPGraph-Supplier-LinkSet.jpg&#34; alt=&#34;Set of Outgoing Edges for Supplier&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Set of Outgoing Edges for Supplier
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In a similar fashion, we can ask for the list of incoming edges to &lt;strong&gt;Part no. 998&lt;/strong&gt;, see &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig4&#34;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;&lt;/a&gt;, and the list of &lt;strong&gt;Suppliers&lt;/strong&gt; that provide that &lt;strong&gt;Part&lt;/strong&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig9&#34;&gt;&lt;strong&gt;Fig. 9&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;rid &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; Part,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       in_inCatalog &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; Supplier,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       pid &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; partID, &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;().sid &lt;span style=&#34;color:#66d9ef&#34;&gt;As&lt;/span&gt; supplierID,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       pname, pcolor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SPCPGraph-Part-LinkSet.jpg&#34; data-caption=&#34;Set of Incoming Edges for Part&#34;&gt;

&lt;img src=&#34;SPCPGraph-Part-LinkSet.jpg&#34; alt=&#34;Set of Incoming Edges for Part&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Set of Incoming Edges for Part
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The set of outgoing edges from the &lt;strong&gt;Supplier&lt;/strong&gt; and the set of incoming edges to &lt;strong&gt;Part no. 998&lt;/strong&gt; have a common edge, &lt;code&gt;17:11&lt;/code&gt;, that connects this &lt;strong&gt;Supplier&lt;/strong&gt; with this &lt;strong&gt;Part&lt;/strong&gt;, see &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig4&#34;&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;property-graph-and-object-oriented-database&#34;&gt;Property Graph and Object-Oriented database&lt;/h3&gt;
&lt;p&gt;We could have implemented bidirectional edges on top of OrientDB &lt;a href=&#34;https://orientdb.com/docs/2.2.x/Tutorial-Document-and-graph-model.html&#34;&gt;Document&lt;/a&gt; data model using Link, Link list, Link set data structures and the &lt;a href=&#34;https://orientdb.com/docs/2.2.x/SQL-Create-Link.html&#34;&gt;&lt;code&gt;CREATE LINK&lt;/code&gt;&lt;/a&gt; SQL command. If you take also into account its class &lt;a href=&#34;https://orientdb.com/docs/2.2.x/Inheritance.html&#34;&gt;inheritance&lt;/a&gt;, &lt;a href=&#34;https://orientdb.com/docs/2.2.x/Graph-Schema.html&#34;&gt;schema-full&lt;/a&gt;, and &lt;a href=&#34;https://orientdb.com/docs/2.2.x/SQL-Methods.html&#34;&gt;SQL methods&lt;/a&gt; features, that brings us pretty close to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_database&#34;&gt;object-oriented database&lt;/a&gt; model. Objects, in turn, may reference one another and therefore form a network graph. A relationship, in particular, is an association between two persistent objects, each of a specific type. In Intersystems Cache, &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ_relationships&#34;&gt;relationships&lt;/a&gt; are binary, i.e. defined between two classes and bidirectional, i.e. both sides of a relationship must be defined by creating a pair of complementary relationship properties, one in each class. Two-way reference property in both classes, &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ_propcoll&#34;&gt;collection&lt;/a&gt; in &amp;ldquo;one&amp;rdquo; side and simple reference in &amp;ldquo;many&amp;rdquo; side are analogous to the link set of outgoing/incoming edges in a vertex and the &lt;code&gt;out&lt;/code&gt;/&lt;code&gt;in&lt;/code&gt; links in edge of Property Graph data model, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig8&#34;&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig9&#34;&gt;&lt;strong&gt;Fig. 9&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig11&#34;&gt;&lt;strong&gt;Fig. 11&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;association-vs-edge&#34;&gt;Association vs Edge&lt;/h2&gt;
&lt;p&gt;If we take these &amp;ldquo;Three Associations in a Named-Row Dataset&amp;rdquo;, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig2&#34;&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;&lt;/a&gt;, and create a graph with analogy to the Property Graph data model, we can see that &lt;strong&gt;$PartI&lt;/strong&gt; (green node), &lt;strong&gt;$CatalogK&lt;/strong&gt; (red edge), and &lt;strong&gt;$SupplierJ&lt;/strong&gt; (blue node) are &lt;code&gt;hyperbonds&lt;/code&gt;, i.e. they are &lt;code&gt;EntityProperty&lt;/code&gt; associations and they are connected with &lt;code&gt;hyperlinks&lt;/code&gt; i.e. undirected bidirectional links, [&lt;strong&gt;Fig. 10&lt;/strong&gt;].&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;binary-association-630x120.jpg&#34; data-caption=&#34;Three Hyperbonds connected with Hyperlinks&#34;&gt;

&lt;img src=&#34;binary-association-630x120.jpg&#34; alt=&#34;Three Hyperbonds connected with Hyperlinks&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Three Hyperbonds connected with Hyperlinks
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;There are three main advantages using R3DM hypergraph instead of a Property Graph:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There is a uniform treatment of records for both entities (nodes) and associative entities (edges). In R3DM these are &lt;strong&gt;symbolically represented&lt;/strong&gt; by &lt;code&gt;hyperbonds&lt;/code&gt;. Hyperlinking &lt;code&gt;hyperatoms&lt;/code&gt; or &lt;code&gt;hyperbonds&lt;/code&gt; is not the same as connecting property nodes with property edges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Entities, attributes and values are completely separable. There is not an Entity-Attribute neither an Entity-Attribute-Value &amp;lsquo;Silo&amp;rsquo; structure. This will become clear at a later post on the associative characteristics of R3DM. Here it is enough to say that the collection of properties defined by a map from key to value are enclosed in the structure of property graph node/edge. On the contrary in data models such as RDF, Topic Map and our R3DM hypergraph each key-value pair (&lt;code&gt;hyperatom&lt;/code&gt;) can be a single instance and the same value can be linked to more than one classes (&lt;code&gt;hyperbonds&lt;/code&gt;) or instances of the same class, see the discussion &lt;a href=&#34;https://healis.eu/en/post/20160902/#tuples-to-associations&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under the hood, in a Property Graph each regular edge between two nodes creates another record. You cannot link one node record directly to another node record, you must always cross the edge record either from its tail or from the head. But with a &lt;code&gt;hyperlink&lt;/code&gt; things are different, you do not need to load any edge record to resolve the other part of the relationship, no edge document is created. Thankfully, OrientDB provides such a data structure, it is the &lt;a href=&#34;https://orientdb.com/docs/2.2.x/Lightweight-Edges.html&#34;&gt;Lightweight Edge&lt;/a&gt;. We have implemented R3DM in OrientDB using Lightweight Edges and it will be fully described in an upcoming post.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;join-vs-edge&#34;&gt;Join vs Edge&lt;/h2&gt;
&lt;p&gt;Now, examine this relational database sql query &lt;a href=&#34;https://healis.eu/en/post/20160902/#introduction&#34;&gt;here&lt;/a&gt; with the following comparable OrientDB Property Graph query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Suppliers of a Red Fire Hydrant Cap sorted by their Catalog price */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; supRID,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt;.sname &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; supName,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt;.scountry &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; supCountry,       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       catprice &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; catPrice,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       catqnt &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; catQuantity,       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; prtRID,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;.pname &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; prtName,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;.pcolor &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; prtColor,       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;rid &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; catRID       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; inCatalog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;.pid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; catPrice
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;partNo999-Suppliers-dataset-879x165.jpg&#34; data-caption=&#34;Suppliers of a Red Fire Hydrant Cap&#34;&gt;

&lt;img src=&#34;partNo999-Suppliers-dataset-879x165.jpg&#34; alt=&#34;Suppliers of a Red Fire Hydrant Cap&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Suppliers of a Red Fire Hydrant Cap
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;partNo998-Suppliers-graph-403x261.jpg&#34; data-caption=&#34;Suppliers of a Red Fire Hydrant Cap on OrientDB Graph Canvas&#34;&gt;

&lt;img src=&#34;partNo998-Suppliers-graph-403x261.jpg&#34; alt=&#34;Suppliers of a Red Fire Hydrant Cap on OrientDB Graph Canvas&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Suppliers of a Red Fire Hydrant Cap on OrientDB Graph Canvas
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This OrientDB SQL query is clearly more compact and with a faster performance, because there are no JOIN operations anymore. We can get back the result set represented with a Wolfram Dataset structure, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig11&#34;&gt;&lt;strong&gt;Fig. 11&lt;/strong&gt;&lt;/a&gt;. Instead of having supplier IDs and part IDs, these are now replaced with OrientDB record IDs (&lt;a href=&#34;https://orientdb.com/docs/2.2.x/Tutorial-Record-ID.html&#34;&gt;RIDs&lt;/a&gt;). We have also added another column at the end which is the RID of the edge record, i.e. &lt;strong&gt;Catalog&lt;/strong&gt; record.&lt;/p&gt;
&lt;p&gt;Check also this &lt;a href=&#34;https://healis.eu/en/post/20160902/#topic-map-serialization&#34;&gt;Topic Map graph representation&lt;/a&gt;. The main difference is that these &lt;strong&gt;Catalog&lt;/strong&gt; relationships and the &lt;strong&gt;Part&lt;/strong&gt; tuple are drawn explicitly on the Topic Map and all values of properties are visible on the same graph. In this Property Graph, &lt;a href=&#34;https://healis.eu/en/post/20160913/#fig12&#34;&gt;&lt;strong&gt;Fig. 12&lt;/strong&gt;&lt;/a&gt;, only one of the enclosed properties of any node or edge type is displayed.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We can summarize the critical points of our investigation in Property Graph data model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We introduced R3DM Hypergraph as the harbinger of R3DM associations. R3DM hypergraph is based on Wolfram &lt;code&gt;EntityPropertyAssociations&lt;/code&gt; and extends Property Graph with &lt;code&gt;hyperbonds&lt;/code&gt; that represent in a uniform way &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;edges&lt;/code&gt;; while &lt;code&gt;hyperatoms&lt;/code&gt; are &lt;code&gt;hyperlinked&lt;/code&gt; to &lt;code&gt;hyperbonds&lt;/code&gt; and are analogous to a property-value pair. From this perspective:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;There is not an Entity-Attribute or Entity-Attribute-Value &amp;lsquo;Silo&amp;rsquo; structure.&lt;/li&gt;
&lt;li&gt;Hypelink, i.e. bidirectional edge &lt;strong&gt;without&lt;/strong&gt; a record, can link directly &lt;code&gt;hyperatoms&lt;/code&gt; to &lt;code&gt;hyperbonds&lt;/code&gt; and &lt;code&gt;hyperbond&lt;/code&gt; to &lt;code&gt;hyperbond&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;In all the data models we have described so far in our series, every value is accessible only by knowing its context. Thus far, values are either dependent on a relation variable and attribute in a &lt;strong&gt;Relational model&lt;/strong&gt;, or they come as field-value pairs in the object of a &lt;strong&gt;Document model&lt;/strong&gt; / &lt;strong&gt;Object-Oriented model&lt;/strong&gt;, or you have Topic Type and Topic Roles in Associations of &lt;strong&gt;Topic Map model&lt;/strong&gt;, or they form property-value pairs that are enclosed in the node structure of &lt;strong&gt;Property Graph model&lt;/strong&gt;. Even in the triplets of &lt;strong&gt;RDF model&lt;/strong&gt;, that we will examine in the next article, you have an entity-property-value context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally speaking, in Property Graph data model schema specifications for Node and Edge types are weak and it is not easy to define referential integrity and handling of many-to-many relationships. OrientDB object-oriented features alleviate that problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a Property Graph data model edges are always directed but we can traverse them in both ways, i.e. they link bidirectionally nodes of the graph. In this sense, the label of the edge is comparable to the Topic type of a binary association in Topic Map data model; whereas, the labels &lt;code&gt;out&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; that signify the outgoing head and incoming tail are the roles of its members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In object-oriented database model, it is possible to represent Property Graph edge with a two-way reference property in both classes, collection in &amp;ldquo;one&amp;rdquo; side and simple reference in &amp;ldquo;many&amp;rdquo; side.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are no JOIN operations in Property Graph data model. The edge record associates each half of the relationship with direct links.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will examine separately RDF data model, one of the W3C standards for the Semantic Web. From our perspective, RDF and Property Graph are in conflict for reasons that we will discuss in the next article of our series. It seems the rivalry of these two data models is in succession of an older one between RDF and Topic Map.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/associative-data-modeling-demystified-part-iii&#34;&gt;DZone Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/associative-data-modeling-demystified-part-3-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-6181790749382713344&#34;&gt;LinkedIn Topic Maps Community Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6181590335416737795&#34;&gt;LinkedIn Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6181588327662133251&#34;&gt;LinkedIn Database &amp;amp; Data Store Professionals Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/1969109&#34;&gt;LinkedIn MUMPS and Cache Development Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62614/62614-6181585290390441986&#34;&gt;LinkedIn Mathematica Users Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/4344857/4344857-6181586484169052161&#34;&gt;LinkedIn OrientDB Users Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6181582020477489152&#34;&gt;LinkedIn Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Association in Topic Map Data Model</title>
      <link>https://healis.eu/en/post/20160902/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160902/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#associations-in-topic-map-data-model&#34;&gt;Associations in Topic Map Data Model&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#tuples-to-associations&#34;&gt;Tuples to Associations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sql-to-topic-map-filtering&#34;&gt;SQL to Topic Map Filtering&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#topic-map-serialization&#34;&gt;Topic Map Serialization&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#r3dm-type-system-in-wandora&#34;&gt;R3DM Type System in Wandora&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&#34;https://healis.eu/en/post/20160825/&#34;&gt;previous article&lt;/a&gt; of this series we examined the association construct from the perspective of Entity-Relationship data model. In this post we demonstrate how Topic Map data model represents associations. In order to link the two we continue with another SQL query from our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;relational database&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; suppliers.sid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       suppliers.sname,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       suppliers.scountry,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catcost,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catqnt,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       parts.pid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       parts.pname,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       parts.pcolor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;   suppliers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; (parts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; parts.pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catpid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; suppliers.sid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catsid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt;  (( ( parts.pid ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; ))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catcost;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;





&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;cost_of_red_fire_hydrant_cap.jpg&#34; &gt;

&lt;img src=&#34;cost_of_red_fire_hydrant_cap.jpg&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;This will fetch all the rows of a result set where we are looking for the &lt;em&gt;minimum catalogue price of a Red Fire Hydrant Cap&lt;/em&gt; and who is the supplier that manufactures this part. The reader will notice that apart from the deficiensy of the nested JOINs, &lt;a href=&#34;https://healis.eu/en/post/20160825/#structured-query-language-sql&#34;&gt;(see here)&lt;/a&gt;, we had to formalize our search in SQL language in order to get back our result. Wouldn&amp;rsquo;t be nice if we could engage the user in a codeless style of search, independent of the business case. Let us see the difference with the Topic Map data model first.&lt;/p&gt;
&lt;h2 id=&#34;associations-in-topic-map-data-model&#34;&gt;Associations in Topic Map Data Model&lt;/h2&gt;
&lt;p&gt;Perhaps there is not a better software tool out there to introduce you to Topic Maps than &lt;a href=&#34;http://wandora.org&#34;&gt;Wandora&lt;/a&gt; information management application, see how.&lt;/p&gt;
&lt;h3 id=&#34;tuples-to-associations&#34;&gt;Tuples to Associations&lt;/h3&gt;
&lt;p&gt;Our first step is to build a Topic Map data model from the SQL result set above. With Wandora this is easy thanks to its powerful set of extractors. Here we use an &lt;a href=&#34;http://wandora.org/wiki/Excel_extractors#Excel_adjacency_list_extractor&#34;&gt;Excel adjacency list extractor&lt;/a&gt; to convert each spreadsheet row of this &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/vwRedHydrantCap.xlsx&#34;&gt;Excel file&lt;/a&gt; to a Topic Map &lt;code&gt;Association&lt;/code&gt;.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;wandora-tuples-cells.jpg&#34; data-caption=&#34;Tuples of a Relation - Wandora Associations&#34;&gt;

&lt;img src=&#34;wandora-tuples-cells.jpg&#34; alt=&#34;Tuples of a Relation - Wandora Associations&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Tuples of a Relation - Wandora Associations
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;In the right panel of the screen capture, you may see that we have four associations of type &lt;code&gt;Tuple&lt;/code&gt;. They are all sorted by the &lt;code&gt;catcost&lt;/code&gt; column. This is the role that cells of this column play in the Tuple association. In our example each Tuple is an instance of the &lt;code&gt;Excel&lt;/code&gt; class with a maximum of 8 members and &lt;strong&gt;each member plays a role in the association&lt;/strong&gt;. You may agree that this Topic Map model view of data looks already very familiar to the user that is accustomed with tables.&lt;/p&gt;
&lt;p&gt;But behind the scenes Topic Map associations are notably different from the n-ary tuples of the relational model. In the left panel of our screen capture you can see all the data that are extracted from the spreadsheet. Notice that no data value is repeated. Each association is constructed from &lt;strong&gt;single instance values&lt;/strong&gt; and this also means that associations are sharing values among them. We can visualize the network of associations by switching to Wandora&amp;rsquo;s &lt;a href=&#34;http://wandora.org/wiki/Graph_topic_panel&#34;&gt;Graph topic panel&lt;/a&gt;. From the left panel, we select the minimum price of the part, which is &lt;code&gt;11.7&lt;/code&gt; and then we expand this node on the &lt;code&gt;Graph topic panel&lt;/code&gt;. This way the first association will be drawn that includes as members all the other values that this cell is associated with. One of them is &lt;code&gt;USA&lt;/code&gt; and plays the &lt;code&gt;scountry&lt;/code&gt; role. We can right click on the value and expand again the nodes (associated members). Two associations are displayed now on the graph that share four common values between them.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;wandora-graph-panel-with-two-associations.jpg&#34; data-caption=&#34;Two Associations in the Graph Topic Panel of Wandora. Brown labels indicate the type (Tuple) of association and the role (sname) of one of its members&#34;&gt;

&lt;img src=&#34;wandora-graph-panel-with-two-associations.jpg&#34; alt=&#34;Two Associations in the Graph Topic Panel of Wandora. Brown labels indicate the type (Tuple) of association and the role (sname) of one of its members&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Two Associations in the Graph Topic Panel of Wandora. Brown labels indicate the type (Tuple) of association and the role (sname) of one of its members
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h3 id=&#34;sql-to-topic-map-filtering&#34;&gt;SQL to Topic Map Filtering&lt;/h3&gt;
&lt;p&gt;Another important observation we should make at this point is that instead of writing any query to fetch those suppliers that are located in &lt;code&gt;USA&lt;/code&gt; we simply filtered the table based on this value. We are able to do this, because &lt;strong&gt;Topic Map data model works with single instance values that are linked bidirectionally&lt;/strong&gt;. Accordingly, data is always normalized and the main operations of the relational algebra such as set operations, selection and projection, can be performed. For instance, filtering associations that have &lt;code&gt;USA&lt;/code&gt; member is equivalent to selecting rows from SQL. Moreover, the user can traverse interactively the graph starting from any value without writing a single line of code.&lt;/p&gt;
&lt;h3 id=&#34;topic-map-serialization&#34;&gt;Topic Map Serialization&lt;/h3&gt;
&lt;p&gt;To understand better the underlying structure of data in the previous example, we have serialized a Topic Map in &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/ltm/suppliers-parts-catalogue-Part998Associations.ltm&#34;&gt;LTM format&lt;/a&gt;. Dropping this LTM file into an empty topic panel, we invoke the &lt;a href=&#34;http://wandora.org/wiki/How_to_import_existing_topic_map_to_Wandora&#34;&gt;import function of Wandora&lt;/a&gt;. Then we expand the &lt;a href=&#34;http://wandora.org/wiki/Working_with_topic_trees&#34;&gt;topic tree&lt;/a&gt; and double click on the &lt;code&gt;998&lt;/code&gt; cell. The following screen capture looks pretty much the same as the one we have generated from extracting the Excel spreadsheet above. The main difference is that now we have two association types, one for Catalogue tuples and another for Part tuples. Part &lt;code&gt;998&lt;/code&gt; participates in five associations (tuples) in total, four of them are from &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Catalog.tsv&#34;&gt;Catalogue table&lt;/a&gt; and one from &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Parts.tsv&#34;&gt;Part table&lt;/a&gt;. We have also taken a minimum number of members, i.e. fields (columns), for our associations to keep it simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 1 Association of catalog part no 998 with &amp;#34;Red&amp;#34; and &amp;#34;Fire Hydrant Cap&amp;#34; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Prt&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;prtName08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prtColorRed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pcolor&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 4 Associations of catalog part no 998 with supplier Ids and catalog prices */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catpid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supPrice18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catcost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supID18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catsid&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catpid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supPrice14&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catcost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supID14&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catsid&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catpid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supPrice16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catcost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supID16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catsid&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;prtID08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catpid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supPrice12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catcost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supID12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;catsid&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;





&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;wandora-part998-ltm-example-842x491.jpg&#34; data-caption=&#34;Associations of part no. 998&#34;&gt;

&lt;img src=&#34;wandora-part998-ltm-example-842x491.jpg&#34; alt=&#34;Associations of part no. 998&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Associations of part no. 998
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Because of the single instance feature of Topic Maps, If we switch to Wandora&amp;rsquo;s Graph topic panel we can visualize these associations.






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;wandora-part998-ltm-example-graph-650x500.jpg&#34; data-caption=&#34;Associations of part no. 998&#34;&gt;

&lt;img src=&#34;wandora-part998-ltm-example-graph-650x500.jpg&#34; alt=&#34;Associations of part no. 998&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Associations of part no. 998
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;r3dm-type-system-in-wandora&#34;&gt;R3DM Type System in Wandora&lt;/h3&gt;
&lt;p&gt;We expand our previous example with tuples from three tables and a rich type system, also known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Ontology_(information_science)&#34;&gt;Ontology&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_schema&#34;&gt;database schema&lt;/a&gt;.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;wandora-graph-panel-prt998-catalogue-and-suppliers.jpg&#34; data-caption=&#34;Associations of part no. 998, Supplier Associations and Symmetric Binary Predicates&#34;&gt;

&lt;img src=&#34;wandora-graph-panel-prt998-catalogue-and-suppliers.jpg&#34; alt=&#34;Associations of part no. 998, Supplier Associations and Symmetric Binary Predicates&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Associations of part no. 998, Supplier Associations and Symmetric Binary Predicates
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;We start again our exploration from the data item with the value &lt;code&gt;998&lt;/code&gt;. There is one association, labeled &lt;code&gt;Part8&lt;/code&gt;, representing a tuple from Part table &lt;strong&gt;(998, &amp;ldquo;Fire Hydrant Cap&amp;rdquo;, Red, 7.2, lb)&lt;/strong&gt; and four of them, labeled &lt;code&gt;Cat08&lt;/code&gt;, &lt;code&gt;Cat12&lt;/code&gt;, &lt;code&gt;Cat13&lt;/code&gt;, &lt;code&gt;Cat17&lt;/code&gt;, representing tuples from the Catalogue table (see result set above). Further on, &lt;code&gt;USA&lt;/code&gt; suppliers are expanded with two more associations, labeled &lt;code&gt;Supplier1&lt;/code&gt; and &lt;code&gt;Supplier2&lt;/code&gt;. The two previous graphs are combined in a single one. We can also observe other associations with only two members, we call these symmetric binary predicates &lt;strong&gt;(SBP)&lt;/strong&gt;. SBPs are used to define a prototype for our R3DM type system. For example, the member value &lt;code&gt;7.2&lt;/code&gt; of association &lt;code&gt;Part8&lt;/code&gt; is of type &lt;code&gt;Part Weight&lt;/code&gt; (Instantiation Predicate) and &lt;code&gt;Part Weight&lt;/code&gt; is hyponym of &lt;code&gt;Weight&lt;/code&gt; (HyperHypo Predicate). The reader may compare this graph with this &lt;a href=&#34;https://healis.eu/en/post/20160825/#structured-query-language-sql&#34;&gt;Entity-Relationship diagram&lt;/a&gt; and realize that we have both instances (values) and classes, i.e. Entities and Attribues, on the same graphics diagram. Not only that, but most important our type system is generic and we are able to merge and classify data from multiple datasets. Alternatively, Wandora&amp;rsquo;s Topics tree panel on the left part of the image displays a hierarchical structure for types and instances. Those that are expanded can also be seen on the graph panel.&lt;/p&gt;
&lt;p&gt;This is a good place to introduce our &lt;strong&gt;R3DM type system&lt;/strong&gt;. It is presented here for the first time and it will be fully analyzed in a forthcoming post of this series. In the next graph we have expanded several nodes of our hierarchical type system. For instance, &lt;code&gt;Catalogue&lt;/code&gt;, &lt;code&gt;Catalogue Part&lt;/code&gt;, &lt;code&gt;Catalog Supplier&lt;/code&gt; are represented as groups (&lt;code&gt;Grouping Predicate&lt;/code&gt;) of &lt;code&gt;Wandora&lt;/code&gt; class which is the Root of the Topic Tree. Each of these groups is also a type (&lt;code&gt;Instantiation Predicate&lt;/code&gt;) for a set of instances that represent associations. We have Cat01-16 for Catalogue associations, Part1-9 for Part associations, and Supplier1-4 for Supplier associations.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;wandora-graph-panel-type-system.jpg&#34; &gt;

&lt;img src=&#34;wandora-graph-panel-type-system.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;R3DM Type System in Wandora&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;We have defined six SBPs in total, these are grouped under the &lt;code&gt;Symmetric Binary Predicates&lt;/code&gt; group. Five of them have been configured with special symbols to be used in Wandora&amp;rsquo;s Topic tree. Each one of them is expanded on Wandora&amp;rsquo;s graph panel to show the pair of its association members. The &lt;code&gt;Holonomy-Meronomy Predicate&lt;/code&gt; has been used to connect association members to association type.&lt;/p&gt;
&lt;p&gt;Wandora class has also five group members, we have already seen four of them. The fifth one is a Variable Type group and it has four sub-categories, &lt;code&gt;Categorical Variable Types&lt;/code&gt;, &lt;code&gt;Meta Variable Types&lt;/code&gt;, &lt;code&gt;Numeric Variable Types&lt;/code&gt; and &lt;code&gt;Time Variable Types&lt;/code&gt;. Each of these specialized types has instances and each instance can be further specialized. For example, starting from bottom to top :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gr&lt;/code&gt; &lt;strong&gt;isInstanceOf&lt;/strong&gt; &lt;code&gt;Part Unit&lt;/code&gt; &lt;strong&gt;isHyponymOf&lt;/strong&gt; &lt;code&gt;Unit&lt;/code&gt; &lt;strong&gt;isInstanceOf&lt;/strong&gt; &lt;code&gt;Categorical Variable Type&lt;/code&gt; &lt;strong&gt;isHyponymOf&lt;/strong&gt; &lt;code&gt;Variable Type&lt;/code&gt; &lt;strong&gt;isMemberOf&lt;/strong&gt; &lt;code&gt;Wandora class&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this way all values are single instances of some type and they are hyperlinked to build associations (hyperedges). Each association is also an instance of some type.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We conclude our discussion of &lt;code&gt;Association&lt;/code&gt; in Topic Map data model. Topic map data model is profound and at the same time powerful and simple to start building higher constructs to model real things. &lt;code&gt;Association&lt;/code&gt; in Topic Map is a first class citizen. Here is a list of interesting features we discussed in this post :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We can define single instance Topics (and/or values) and then associate them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Association&lt;/code&gt; is a bidirectional n-ary relation with &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Roles&lt;/code&gt; embedded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of 1. and 2. we can traverse the graph from any point to any other point simply by filtering nodes and edges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can display both &lt;code&gt;Topic&lt;/code&gt;/&lt;code&gt;Association&lt;/code&gt; types and instances on the same graph&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data from multiple data sets cab be merged with R3DM type system that is based on symmetric binary associations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are other powerful features of Topic Maps related to associations such as &lt;a href=&#34;http://www.wandora.org/wiki/Introduction_to_Layered_Topic_Maps&#34;&gt;merging&lt;/a&gt; and information resources that are attached to topics, i.e. &lt;a href=&#34;http://wandora.org/wiki/Refining_occurrences&#34;&gt;occurrences&lt;/a&gt;, we reserve time and space to highlight them in a forthcoming article.&lt;/p&gt;
&lt;p&gt;We will continue our demonstration with the Catalogue-Part-Supplier example. This time we will examine how associations can be represented on the &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Document-and-graph-model.html&#34;&gt;Graph Model&lt;/a&gt; of OrientDB DBMS.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/associative-data-modeling-demystified-part1-hatzis-phd-1&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6177536264963661827&#34;&gt;LinkedIn Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-6177532954038792196&#34;&gt;LinkedIn Topic Maps Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/m/blogpost?id=6448529%3ABlogPost%3A465093&#34;&gt;Data Science Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/associative-data-modeling-demystified-part-2&#34;&gt;DZone - Database Section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Relation, Relationship and Association</title>
      <link>https://healis.eu/en/post/20160825/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160825/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#supplier-part-catalogue-dataset&#34;&gt;Supplier-Part-Catalogue Dataset&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-er-data-model&#34;&gt;The ER Data Model&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#association-and-associative-array&#34;&gt;Association and Associative Array&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#wolfram-language---association&#34;&gt;Wolfram Language - Association&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#json-serialization&#34;&gt;JSON Serialization&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#association-vs-relation&#34;&gt;Association vs Relation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#wolfram-language---relation&#34;&gt;Wolfram Language - Relation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-redundancy&#34;&gt;Data Redundancy&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#structured-query-language-sql&#34;&gt;Structured Query Language (SQL)&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In early 2009 an increasing number of non-relational DBMS started to appear on the scene. They were based on data models such as Column, Document, Key-Value, Graph and Multi-Model. At about the same time, big corporations in IT industry were concerned with data processing of large and complex data sets. Big data movement was a major driving force to re-examine whether current DBMS were sufficient to cope with the new requirements on data processing. More specifically the &lt;a href=&#34;https://www.ibmbigdatahub.com/infographic/four-vs-big-data&#34;&gt;four V&amp;rsquo;s of Big Data&lt;/a&gt;, i.e. volume, variety, velocity and veracity, put an increasing demand in major companies and organizations. This had as a result a reinvestigation on what DBMS technology to apply. Many started realizing that physical representation of data on the disk or in memory and data modeling are key factors on how you build or integrate parts of your IT solution.&lt;/p&gt;
&lt;p&gt;While most players in the IT sector adopted Graph or Document databases and Hadoop based solutions, Hadoop is an enabler of &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_HBase&#34;&gt;HBase&lt;/a&gt; column store, it went almost unnoticed that several new DBMS, &lt;a href=&#34;https://www.aisys.us/&#34;&gt;AtomicDB&lt;/a&gt; previous database engine of &lt;a href=&#34;https://www.atomicdb.ch/x10sys.html&#34;&gt;X10SYS&lt;/a&gt;, and &lt;a href=&#34;https://www.sentences.com/sentences.htm&#34;&gt;Sentences&lt;/a&gt;, based on associative technology appeared on the scene. We have introduced and discussed about the &lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-2-hatzis-phd&#34;&gt;data modelling architecture&lt;/a&gt; and the atomic information resource unit &lt;a href=&#34;https://www.linkedin.com/pulse/air-atomic-information-resource-athanassios-i-hatzis-phd&#34;&gt;(AIR)&lt;/a&gt; of AtomicDB. Similar technology has been the engine power of &lt;a href=&#34;https://www.qlik.com/us/&#34;&gt;Qlikview&lt;/a&gt;, a very popular software in Business Intelligence and Analytics, since 1993. Perhaps it is less known to the reader that the association construct is a first class citizen in &lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_Maps&#34;&gt;Topic Map&lt;/a&gt; semantic web standard and it is translated to &lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;(RDF)&lt;/a&gt;, the other semantic web standard. In other posts of this series we can see how it is possible to implement Associative Technology in multi-model graph databases such as &lt;a href=&#34;https://orientdb.org/&#34;&gt;OrientDB&lt;/a&gt;, in object-relational DBMS such as &lt;a href=&#34;https://www.intersystems.com/our-products/cache/cache-overview/&#34;&gt;Intersystems Cache&lt;/a&gt; and &lt;a href=&#34;https://docs.oracle.com/database/121/ADOBJ/toc.htm&#34;&gt;Oracle&lt;/a&gt; or build the engine for in-memory processing with Wolfram &lt;a href=&#34;https://www.wolfram.com/mathematica/&#34;&gt;Mathematica&lt;/a&gt;. In this article, we introduce the concept of association from the perspective of Entity-Relationship &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;(ER)&lt;/a&gt; data model and illustrate it with the modelling of a toy dataset.&lt;/p&gt;
&lt;h2 id=&#34;supplier-part-catalogue-dataset&#34;&gt;Supplier-Part-Catalogue Dataset&lt;/h2&gt;
&lt;p&gt;Our dataset is a collection of three related database tables. Two of the tables, Supplier ( &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Suppliers.tsv&#34;&gt;TSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/SuppliersPartsCatalogue.xlsx&#34;&gt;XLSX&lt;/a&gt; ) and Part ( &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Parts.tsv&#34;&gt;TSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/SuppliersPartsCatalogue.xlsx&#34;&gt;XLSX&lt;/a&gt; ), represent and describe Entity Types, i.e. Relations. The third one, Catalogue ( &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Catalog.tsv&#34;&gt;TSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/SuppliersPartsCatalogue.xlsx&#34;&gt;XLSX&lt;/a&gt; ) is the associative entity, a.k.a. bridge table, junction table, join table, etc. The typical case where data for the bridge table is captured is from a business inventory where each item is recorded with its unit price and a quantity in stock. Such  information is stored in our Catalogue table, together with a date the item record was modified and a flag that indicates inspection of the stock.&lt;/p&gt;
&lt;h2 id=&#34;the-er-data-model&#34;&gt;The ER Data Model&lt;/h2&gt;
&lt;p&gt;Quite often (ER) Data Model is confused with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational Data Model&lt;/a&gt;. The reader should become familiar with the following equivalent terminology.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ER Data Model&lt;/th&gt;
&lt;th&gt;Relational Data Model&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Entity Type (Set)&lt;/td&gt;
&lt;td&gt;Relation (Table, Base relvar)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Heading - ordered set of attributes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Body - set of n-tuples, extension of a predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Entity	(instance, member)&lt;/td&gt;
&lt;td&gt;Tuple (ordered set of attribute values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value Set&lt;/td&gt;
&lt;td&gt;Type name (data type)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value&lt;/td&gt;
&lt;td&gt;Attribute value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relationship set&lt;/td&gt;
&lt;td&gt;View (Result set or Derived relvar)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relationship (association)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Attribute (function)&lt;/td&gt;
&lt;td&gt;Free variable of a predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mapping of Entity Set or&lt;/td&gt;
&lt;td&gt;Attribute name of the relation (column)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relationship Set to Value Set&lt;/td&gt;
&lt;td&gt;ordered pair of attribute name and type name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this classic paper, &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=320440&#34;&gt;&amp;ldquo;The Entity-Relationship Model - Toward a Unified View of Data&amp;rdquo;&lt;/a&gt; &lt;strong&gt;Peter Chen defines relationship as an association among entities&lt;/strong&gt;. In the same paper &lt;strong&gt;entity and relationship are illustrated as hypergraphs&lt;/strong&gt;. In particular, &lt;em&gt;&lt;a href=&#34;https://healis.eu/en/post/20160825/#fig2&#34;&gt;Fig. 2&lt;/a&gt;&lt;/em&gt; at page 13 and &lt;em&gt;&lt;a href=&#34;https://healis.eu/en/post/20160825/#fig3&#34;&gt;Fig. 3&lt;/a&gt;&lt;/em&gt; at page 14 show how an instance from an Entity/Relationship set is linked to either values or other entities. Although Peter Chen did not describe these fundamental constructs of his data model with Hypegraph terms, it can be easily seen in these captured figures that a specific entity or relationship form hyperedges with other entities or values that play the role of hypernodes.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;peter_chen_ER_model_fig2.jpg&#34; data-caption=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34;&gt;

&lt;img src=&#34;peter_chen_ER_model_fig2.jpg&#34; alt=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    (Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;peter_chen_ER_model_fig3.jpg&#34; data-caption=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34;&gt;

&lt;img src=&#34;peter_chen_ER_model_fig3.jpg&#34; alt=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    (Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;association-and-associative-array&#34;&gt;Association and Associative Array&lt;/h3&gt;
&lt;p&gt;We extend the definition of association in the (ER) data model to cover both Entities and Relationships. In the aforementioned paper, Chen formally defines attribute as a function which maps a given entity to a single value (or a single tuple of values). He also mentions that relationships have their own attributes whose meaning depends on the associated entities. The (key,value) pair of an &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_array&#34;&gt;Associative array&lt;/a&gt;, a.k.a. map, symbol table, or dictionary, captures this functional operation of attribute.&lt;/p&gt;
&lt;h3 id=&#34;wolfram-language---association&#34;&gt;Wolfram Language - Association&lt;/h3&gt;
&lt;p&gt;Wolfram Language is using &lt;code&gt;Association&lt;/code&gt; fundamental construct to represent an associative array. The following three &lt;a href=&#34;https://reference.wolfram.com/language/guide/Associations.html&#34;&gt;Wolfram Language associations&lt;/a&gt; represent a relationship of a Catalog instance with a Supplier instance and some Part instance from our toy dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Supplier&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;supID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;, supName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Suppliers&amp;#34;&lt;/span&gt;, supAddress&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Grub St., Potemkin Village, IL 61801&amp;#34;&lt;/span&gt;, supCity&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ILLINOIS&amp;#34;&lt;/span&gt;, supCountry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;, supStatus&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Part&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;prtID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, prtName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, prtColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, prtWeight&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, prtUnit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gr&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalogue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;supID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;, prtID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, catPrice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, catQuantity&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, catDate&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wed 10 Sep 2014&amp;#34;&lt;/span&gt;, catCheck&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we are missing in this representation are the hyperedges, i.e. the nexuses that link together hypernodes. According to hypergraph terminology, the edge that connects a hyperedge to a hypernode is called hyperlink or connector. You may think of these hyperlinks/connectors as hash fields but we need another identifier for the hash key, i.e. an identifier for the instance. We could have used supID, prtID or a combination of these two but we prefer to define new identifiers for hyperedges. &lt;strong&gt;The main reason for this is that in principle we want to design a uniform way of addressing and identifying both hyperedge and hypernode instances at a low-dimensional, e.g. (2D,3D,4D), space&lt;/strong&gt;. If we encode this way, it is possible to avoid namespace problems. In this post we use names to compare the graph with figures from Peter Chen&amp;rsquo;s paper.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Three Associations in a Named-Row Dataset&#34; src=&#34;./three_associations.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;We may also connect hyperedges, e.g. we can add a &amp;ldquo;type&amp;rdquo; hyperlink that maps instances to classes, a &amp;ldquo;vendor&amp;rdquo; hyperlink that maps a Catalog instance to its Supplier instance and a &amp;ldquo;stockItem&amp;rdquo; hyperlink that connects Catalog instance to Part instance. In Wolfram Language it is relatively easy to make a graph of these Associations. We colorized the graph according to the different data types we have, i.e. hyperedges, strings, doubles, integers, dates, and booleans, &lt;a href=&#34;https://healis.eu/en/post/20160825/#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;association-relation-relationship.jpg&#34; data-caption=&#34;Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black&#34;&gt;

&lt;img src=&#34;association-relation-relationship.jpg&#34; alt=&#34;Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;json-serialization&#34;&gt;JSON Serialization&lt;/h3&gt;
&lt;p&gt;Another very popular representation for Association is JSON Serialization. Those associations we described above can be serialized with the following format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$PartI&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Item&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtColor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtWeight&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7.2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtUnit&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gr&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$SupplierJ&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Organization&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Suppliers&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Grub St., Potemkin Village, IL 61801&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supCity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ILLINOIS&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supCountry&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supStatus&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$CatalogK&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Inventory&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catPrice&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11.7&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catQuantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catDate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014-09-10&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catCheck&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Catalogue, Parts and Suppliers tables are also available in &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/json&#34;&gt;JSON&lt;/a&gt; format.&lt;/p&gt;
&lt;h3 id=&#34;association-vs-relation&#34;&gt;Association vs Relation&lt;/h3&gt;
&lt;p&gt;Although the logical view of Chen&amp;rsquo;s (ER) data model and his popular diagrammatic technique incorporates Entities, Relationships, Attributes and Values, at the physical layer of any relational DBMS we find records, i.e. Entities or Relationships are ordered tuples. A set of these ordered tuples that have the same heading, is called body. This header is another ordered tuple with attribute names. Theoretically speaking the body and the header of a table make the Relation. In practise the header is separated from the body and located at the database catalog together with other metadata for the schema of the database. SQL standard specifies a uniform mean to access this catalog.&lt;/p&gt;
&lt;h3 id=&#34;wolfram-language---relation&#34;&gt;Wolfram Language - Relation&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;&lt;code&gt;List&lt;/code&gt; fundamental construct of Wolfram Language&lt;/a&gt; can be used to represent a Relation. An extensive analysis of various representations and transformations on the constructs of the Relational data model in Wolfram Language can be found &lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-1-hatzis-phd&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Part&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Relation&lt;/span&gt; with a header &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; three tuples (body) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pweight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;punit&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lb&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lb&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kg&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reader will notice that in both Associative array and Relation representations, the cell of a table, i.e. the value of an attribute, is always functionally dependent on the description of Attribute and Entity/Relationship. It cannot stand on its own without these semantic references. Moreover, for the Relation representation, the exact order of values has to be maintained together with any missing (NULL) values.&lt;/p&gt;
&lt;h3 id=&#34;data-redundancy&#34;&gt;Data Redundancy&lt;/h3&gt;
&lt;p&gt;Relational databases are usually normalized to eliminate duplication of information and ensure referential integrity. This is especially recommended in one-to-many relationships. &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_normalization&#34;&gt;Normalization&lt;/a&gt; involves arranging attributes in tables, nevertheless in a relational database we cannot escape from data redundancy completely. For example if we take the unit attribute of the normalized Part table above we can see that values are still repeated. Most important the schema of a relational database is too rigid and cannot be easily modified without breaking normalization and compromising referential integrity.&lt;/p&gt;
&lt;h3 id=&#34;structured-query-language-sql&#34;&gt;Structured Query Language (SQL)&lt;/h3&gt;
&lt;p&gt;Performing queries of data in a relational database is highly dependent on these two factors we briefly mentioned above, the physical representation of data on the disk and the normalization procedure. One of the main bottlenecks with SQL is the natural join relational operator, counterpart of logical AND. An &lt;a href=&#34;https://en.wikipedia.org/wiki/Join_(SQL)&#34;&gt;SQL Join&lt;/a&gt; is a means for constructing a result set combining columns from two (or more) tables by using values common to each. The more tables you join and the bigger the size of each table the more time it takes to consolidate the data of the view. On the contrary in many graph databases, connected nodes, i.e. record instances, are directly linked to each other. Each node, contains a list of pointers of its edges, therefore avoiding look-ups. In fact you are not searching for records, you are traversing connections instead. This may dramatically reduce the speed of constructing the result set of a query.&lt;/p&gt;
&lt;p&gt;For demonstration and comparison purposes we provide such a JOIN sql query for our toy database together with an ER diagram of the database schema,&lt;a href=&#34;https://healis.eu/en/post/20160825/#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt;&lt;/a&gt; and the result set on a Microsoft Access table view, &lt;a href=&#34;https://healis.eu/en/post/20160825/#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may also download a Microsoft Access, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;accdb&lt;/a&gt; file format, database to experiment with.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SupplierPartCatalogue-ERModel-MSAccess.jpg&#34; data-caption=&#34;Image illustrates the ER diagram of database schema&#34;&gt;

&lt;img src=&#34;SupplierPartCatalogue-ERModel-MSAccess.jpg&#34; alt=&#34;Image illustrates the ER diagram of database schema&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Image illustrates the ER diagram of database schema
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SupplierPartCatalogue-ERModel-MSAccess-JOINresultSet.jpg&#34; data-caption=&#34;Image illustrates the ER diagram of database schema&#34;&gt;

&lt;img src=&#34;SupplierPartCatalogue-ERModel-MSAccess-JOINresultSet.jpg&#34; alt=&#34;Image illustrates the ER diagram of database schema&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Image illustrates the ER diagram of database schema
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catsid ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catpid ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Suppliers . sname ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Parts . pname ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catcost ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catqnt ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catdate ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catchk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;    Suppliers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt;  ( Parts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt;  [&lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt;  Parts . pid  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catpid )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt;  Suppliers . sid  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catsid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt;  Suppliers . sname  &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt; ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catcost  &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One can immediately notice the complexity of SQL query language on the nested SQL Join constructs.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this article we described several limitations of the ER model that we wish to overcome, in brief these are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional dependence of values&lt;/li&gt;
&lt;li&gt;Data redundancy&lt;/li&gt;
&lt;li&gt;Join operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next article of our series we continue with an international industry standard for information management and interchange, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_Maps&#34;&gt;Topic Maps Data Model&lt;/a&gt; (TMDM). Associations in TMDM are similar to tuples but they have types. Each member of an association plays a role that is defined explicitly. In fact this is in full agreement with Chen&amp;rsquo;s Entity-Relationship diagrams (see Fig.1 and Fig.2 above). Chen discusses the role of an entity in a relationship and the role of an attribute in a relation and he considers distinct constrains on allowable values for a value set and constraints on permitted values for a certain attribute.&lt;/p&gt;
&lt;p&gt;TMDM view is edifying because it divides information space in two layers. At the conceptual level we have topics that can be associated and represent any subject that can be conceived by a human being. At the occurrence level we have addressable information resources that describe those subjects.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/associative-data-modeling-demystified-part1-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6178589225793916928&#34;&gt;LinkedIn Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datasciencecentral.com/profiles/blogs/associative-data-modeling-demystified-part1&#34;&gt;Data Science Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/associative-data-modeling-demystified-part1&#34;&gt;DZone - Database Section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Know-How is How you Know</title>
      <link>https://healis.eu/en/post/20160729/</link>
      <pubDate>Fri, 29 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160729/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-problem&#34;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#about-knowledge&#34;&gt;About Knowledge&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-know-how-is-how-you-know&#34;&gt;The Know-How is how you know&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-i-know-something-or-someone-phrase&#34;&gt;The &amp;ldquo;I know something or someone&amp;rdquo; phrase&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-i-know-this-is-true-phrase&#34;&gt;The &amp;ldquo;I know this is true&amp;rdquo; phrase&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Perhaps there is not a better phrase to start this post than the Socratic paradox,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/I_know_that_I_know_nothing&#34;&gt;All I know is that I know nothing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is typical of the great gap that exists between &lt;a href=&#34;https://healis.eu/en/post/20150523/&#34;&gt;Eastern and Western way of thinking&lt;/a&gt; about fundamental concepts such as information, knowledge and wisdom. In my opinion we have become too ignorant and arrogant boasting about our knowledge that we cannot even understand the basics of it. This is all too evident in Information/Computer Science fields. The well-known &lt;strong&gt;Data-Information-Knowledge-Wisdom&lt;/strong&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/DIKW_pyramid&#34;&gt;DIKW&lt;/a&gt;) pyramid has become a popular shorthand representation for the data to information to knowledge to wisdom transformation. As a result of this we, the information/computer scientists, often hear about knowledge representation and inference, knowledge extraction, knowledge management and knowledge organization.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;dikw.jpeg&#34; &gt;

&lt;img src=&#34;dikw.jpeg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Data-Information-Knowledge-Wisdom&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;This mechanized perception and realization of knowledge can easily lead people to believe that machines can become wise and they can become wise too by following this transformation process. The main appeal to this common belief is that we are completely ignorant on how these words, i.e. information, knowledge and wisdom were defined and used in the past by our ancestors. Most important is the fact that we have replaced their meaning and definition with other words that are inferior and subservient as symbols. An example of this phenomenon is the definition of the word information. Inform comes from the Latin verb informare, which literally means to give form, or to form an idea of. Where the &lt;strong&gt;ancient and modern Greek word for information is πληροφορία, which transliterates (plērophoria) from πλήρης (plērēs) “fully” and φέρω (phorein) frequentative of (pherein) to carry through&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. You may realize how different becomes your thinking by using one or the other definition of the word and perhaps how narrow is your thinking if you are missing completely the older ancient Greek definition of the word information. But this was the subject of a &lt;a href=&#34;https://healis.eu/en/post/20150523/&#34;&gt;previous post&lt;/a&gt; of mine.&lt;/p&gt;
&lt;h2 id=&#34;about-knowledge&#34;&gt;About Knowledge&lt;/h2&gt;
&lt;p&gt;In this post we focus on knowledge. How do we define knowledge ? According to &lt;a href=&#34;http://plato.stanford.edu/entries/knowledge-how/&#34;&gt;Stanford Encyclopedia of Philosophy&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;it is common in epistemology to distinguish among three kinds of knowledge. There&amp;rsquo;s the kind of knowledge you have when it is truly said of you that you know how to do something—say, ride a bicycle. There&amp;rsquo;s the kind of knowledge you have when it is truly said of you that you know a person—say, your best friend. And there&amp;rsquo;s the kind of knowledge you have when it is truly said of you that you know that some fact is true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-know-how-is-how-you-know&#34;&gt;The Know-How is how you know&lt;/h2&gt;
&lt;p&gt;The first definition of knowledge, i.e. the know-how, is most evident in our learning process. It is about acquiring knowledge through practicing and experiencing the difficulties and different situations that may arise. If you want to become, let&amp;rsquo;s say a neurosurgeon, reading books, watching videos and attending classes in a medical school is not going to make you a neurosurgeon. If you do not have hands-on practical training on a operating room with your colleagues, under the supervision of an experienced neurosurgeon, it is most probable that you are going to kill your first patient. Learning to perform a surgery simply means you know how to do it. Wikipedia definition on knowledge is very enlightening:  &lt;em&gt;&amp;ldquo;knowledge is a familiarity, awareness or understanding of someone or something, such as facts, information, descriptions, or skills, which is acquired through experience or education by perceiving, discovering, or learning&amp;rdquo;&lt;/em&gt;. Therefore, it seems we are are paying too much attention and we emphasize the awareness and understanding of facts and information part instead of focusing on the experience, education and learning part. Thus &lt;strong&gt;we are only informed about things&lt;/strong&gt;, such as processes, events, organizations, people, but deeply inside we do not know anything about them, i.e. &lt;strong&gt;know how is how you know&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-i-know-something-or-someone-phrase&#34;&gt;The &amp;ldquo;I know something or someone&amp;rdquo; phrase&lt;/h2&gt;
&lt;p&gt;How you know him or this or that ? Most often we mean that it just happens, by coincidence, to meet him once in person, or we heard about something, or we read about this or that. And especially for people, I am sure that many of you think that they know someone well, until it comes the day you understand how wrong you are. &lt;strong&gt;This &amp;ldquo;know&amp;rdquo; perception of ours is what I was referring to as the inferior subservient purpose&lt;/strong&gt;.  This is also the case when information and computer scientists claim that &lt;strong&gt;they know how to extract or manage or organize knowledge&lt;/strong&gt;.  It just means they are capable of modeling, composing, structuring, storing, analyzing information in a clever way and they are simply aware of this fact. By analogy of our aforementioned statements information becomes degraded too. &lt;strong&gt;There is endless effort in our field on how to structure and model the data&lt;/strong&gt;, i.e. what form to give the data, this is the core idea of information technology.&lt;/p&gt;
&lt;h2 id=&#34;the-i-know-this-is-true-phrase&#34;&gt;The &amp;ldquo;I know this is true&amp;rdquo; phrase&lt;/h2&gt;
&lt;p&gt;Information technology is about Database Management Systems and digital libraries of information (data), and about building clever tools to do statistics and predictions. Let me take another example. Today we are able to browse a huge &amp;ldquo;Knowledge Base&amp;rdquo; such as Wolfram Alpha and &lt;a href=&#34;https://www.wolframalpha.com/input/?i=moon+distance+from+earth&#34;&gt;ask what is the distance of Moon from Earth&lt;/a&gt;, to receive the current result of 399383 kilometers. But do I know anything about that distance except this number figure ? Have I traveled that distance ? Have I measured that distance ? What is the source of information ? Is it authoritative ? Why is there such a distance and is it constant ? What purpose it serves ? These are typical question just to make you think that stating a fact is only the tip of the iceberg. Take another example, financial instability, let us assume we can predict such a phenomenon, does this mean we know anything about it ?&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;We think we know, we know nothing, and even those that are in the process of knowing something, eventually they admit that they are still learning about it. The more you know something, the more you understand how deep your knowledge about this thing can become. Famous soloists are aware of this process. They are rediscovering day by day more about the quality of sound they can produce with their instrument. But it is not any more about the technical know-how, it is about &lt;strong&gt;knowing how to express themselves&lt;/strong&gt; through the instrument and feel more the music they play. In my opinion knowledge is a very deep process that takes place inside of us. It can assist you to your search for the path to wisdom, but it will not make you wiser. I believe wisdom is part of the spiritual endeavor. We are fools if we believe our knowledge, not to say our technology, makes us wiser than our ancestors. Wisdom is about how you lead your life, how you live your life and depends on the utmost goal you strive to achieve in this life. For such a reason Socrates was a wise man and he really meant that &amp;ldquo;All I know is that I know nothing&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/know-how-how-you-know/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The ancient Greek origin of the word &lt;code&gt;information&lt;/code&gt; - Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;Etymology section&lt;/a&gt; of the term Information was updated by HEALIS with the quoted text above on the 13th of June 2014&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>From Declarative to Functional Database Operations</title>
      <link>https://healis.eu/en/post/20160210/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160210/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is a new release of OrientDB RESTful API in Mathematica, enhanced with new commands such as &lt;strong&gt;addIndex&lt;/strong&gt;, &lt;strong&gt;addInstance&lt;/strong&gt; and &lt;strong&gt;addEdge&lt;/strong&gt; used especially in Graph Database modeling. Most important the functional set of API commands is built in a concise and succinct way. Database operations are now grouped in four main categories, &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;UPDATE&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;, and &lt;strong&gt;ADD&lt;/strong&gt;, a.k.a. (&lt;strong&gt;GUDA&lt;/strong&gt;), that resemble &lt;strong&gt;Create&lt;/strong&gt;, &lt;strong&gt;Read&lt;/strong&gt;, &lt;strong&gt;Update&lt;/strong&gt;, and &lt;strong&gt;Delete&lt;/strong&gt;, a.k.a. (&lt;strong&gt;CRUD&lt;/strong&gt;), major functions that are implemented in relational database applications. The number of functional arguments have been also significantly revised and classified as optional and mandatory depending on the command that they are applied.&lt;/p&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;http://test.healis.eu/dbapi/DocumentationPDF/GUDA.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;http://test.healis.eu/dbapi/DocumentationPDF/GUDA.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;http://test.healis.eu/dbapi/DocumentationPDF/GUDA.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;p&gt;The implementation of the package is based on the &lt;a href=&#34;https://orientdb.org/docs/3.0.x/misc/OrientDB-REST.html&#34;&gt;HTTP RESTful SQL commands of OrientDB&lt;/a&gt;. The &lt;a href=&#34;https://healis.eu/en/project/wolfram_apis/&#34;&gt;Mathematica API&lt;/a&gt; project, can be extended to cover also the programming operations of other DBMS, in an analogy of the functional patterns and operations of this package.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;These are a few &lt;strong&gt;CRUD&lt;/strong&gt; examples that are transformed to &lt;strong&gt;GUDA&lt;/strong&gt; in order to compare the functional with the declarative form of SQL operations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; Create bidirectional linking, i.&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;. association
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CREATE EDGE isOwnerOf FROM 12:0 TO 16:0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ODBapi&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;addEdge&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isOwnerOf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, from-&amp;gt;&amp;#34;&lt;/span&gt;12:0&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, to-&amp;gt;&amp;#34;&lt;/span&gt;16:0&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Read records with projection and filtering
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SELECT @rid, DOB FROM Person WHERE lastName=&amp;#34;&lt;/span&gt;Smith&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ODBapi[com-&amp;gt;&amp;#34;&lt;/span&gt;getRecords&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, prjkt-&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@rid&lt;/span&gt;, DOB&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, class-&amp;gt;&amp;#34;&lt;/span&gt;Person&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, propnam-&amp;gt;&amp;#34;&lt;/span&gt;lastName&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, propval-&amp;gt;&amp;#34;&lt;/span&gt;Smith&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Update with restrictions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UPDATE Person set age=57 WHERE age&amp;lt;60
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ODBapi[com-&amp;gt;&amp;#34;&lt;/span&gt;updValues&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, class-&amp;gt;&amp;#34;&lt;/span&gt;Person&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, propnam-&amp;gt;&amp;#34;&lt;/span&gt;age&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, propval-&amp;gt;&amp;#34;&lt;/span&gt;57 where age&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;60&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Delete all the records of a class (table, vertex, document, ....)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DELETE VERTEX Person
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ODBapi[com-&amp;gt;&amp;#34;&lt;/span&gt;delRecords&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, class-&amp;gt;&amp;#34;&lt;/span&gt;Person&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, all-&amp;gt;&amp;#34;&lt;/span&gt;True&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, construct-&amp;gt;&amp;#34;&lt;/span&gt;VERTEX&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://healis.eu/en/project/wolfram_apis/&#34;&gt;DBAPI application project&lt;/a&gt; is open source and free. You are most welcome to contribute in the Github repository of the project that can be found &lt;a href=&#34;https://github.com/healiseu/dbapiProject&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the latest release of DBAPI from &lt;a href=&#34;https://test.healis.eu/dbapi/Release/dbapi-latest-release.zip&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download and run this &lt;a href=&#34;https://test.healis.eu/dbapi/Test/Installation.nb&#34;&gt;Mathematica Notebook code&lt;/a&gt; to test the installation of the package&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;The OrientDB API Package can be tested with &lt;a href=&#34;https://test.healis.eu/dbapi/Test/OrientDB%20API%20Demo%201%20-%20Test%20API%20Commands.nb&#34;&gt;Demo 1-Test API Commands&lt;/a&gt; and &lt;a href=&#34;https://test.healis.eu/dbapi/Test/OrientDB%20API%20Demo%203%20-%20Schemaless%20vs%20Schemafull%20Operations.nb&#34;&gt;Demo 3-Schemaless vs Schemafull Operations&lt;/a&gt; Notebooks.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This functional RESTful API can be served as a prototype for a uniform, universal treatment of data language (&lt;strong&gt;UDL&lt;/strong&gt;) that will be independent of the DBMS implementation. Commands and parameters can become more efficient and execution can be simplified if we take on account the hierarchical relationship of &lt;strong&gt;Server&lt;/strong&gt;, &lt;strong&gt;Database&lt;/strong&gt;, &lt;strong&gt;Class&lt;/strong&gt;, &lt;strong&gt;Property&lt;/strong&gt; and &lt;strong&gt;Record&lt;/strong&gt; containers. We foresee that it will be far more intuitive, user-friendly, and easier to program with a functional style than the declarative commands of its SQL ancestor.&lt;/p&gt;
&lt;h2 id=&#34;documentation-pages&#34;&gt;Documentation Pages&lt;/h2&gt;
&lt;p&gt;If you have already installed the DBAPI project, then you can search Wolfram Mathematica documentation for &lt;code&gt;DBAPI&lt;/code&gt;. This is your starting point for browsing the documentation. For demonstration purposes, we have included here the following documentation pages in pdf format for the &lt;code&gt;ODBapi&lt;/code&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>RESTful API in Mathematica</title>
      <link>https://healis.eu/en/project/wolfram_apis/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/wolfram_apis/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#documentation-pages&#34;&gt;Documentation Pages&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Packages in this project extend Wolfram Language with commands that are related to data management and especially generic database management. There is a basic &lt;code&gt;Utilities Package&lt;/code&gt; that is used in transformations between Wolfram Language constructs such as &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt;, &lt;a href=&#34;https://reference.wolfram.com/language/ref/Association.html&#34;&gt;Association&lt;/a&gt;, and &lt;a href=&#34;https://reference.wolfram.com/language/ref/Dataset.html&#34;&gt;Dataset&lt;/a&gt;, and external serialization standards such as &lt;a href=&#34;https://json.org&#34;&gt;JSON&lt;/a&gt; and comma-separated values (CSV) files. On top of that package we are porting RESTful APIs from various web services through &lt;a href=&#34;https://reference.wolfram.com/language/ref/URLFetch.html&#34;&gt;URLFetch&lt;/a&gt; into Wolfram Language building commands with arguments that specify options with rules of the form name-&amp;gt;value. An example of such a RESTful API is the &lt;a href=&#34;https://orientdb.org/docs/3.0.x/misc/OrientDB-REST.html&#34;&gt;OrientDB HTTP API&lt;/a&gt; and the &lt;code&gt;OrientDB package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;jpg&#34; src=&#34;./orientdb_logo.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced &lt;a href=&#34;https://orientdb.org/docs/3.0.x/misc/OrientDB-REST.html&#34;&gt;OrientDB HTTP RESTful API&lt;/a&gt; functionality with powerful new commands for Mathematica users&lt;/li&gt;
&lt;li&gt;Fully documented functions and packages in the native documentation system of Wolfram Mathematica&lt;/li&gt;
&lt;li&gt;Build interactive demos, powerful presentations and applications in the vast environment of Wolfram Language with nearly 5,000 built-in functions at a fraction of time it would require to build, test, and support these, in other programming languages.&lt;/li&gt;
&lt;li&gt;Debug easily your applications by dynamic programming and interactive sessions&lt;/li&gt;
&lt;li&gt;Deploy your application anywhere thanks to &lt;a href=&#34;https://www.wolfram.com/universal-deployment-system&#34;&gt;Wolfram Universal Deployment System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create multiple visualization schemes, network topologies, data mining and search indexing algorithms powered by dynamically configured GUIs for the non-experienced user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can download the latest release of DBAPI from &lt;a href=&#34;https://test.healis.eu/dbapi/Release/dbapi-latest-release.zip&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and run this &lt;a href=&#34;https://test.healis.eu/dbapi/Test/Installation.nb&#34;&gt;Mathematica Notebook code&lt;/a&gt; to test the installation of the package&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://test.healis.eu/dbapi/Test/Transformations_on_Expressions.nb&#34;&gt;Transformations on Wolfram expressions&lt;/a&gt; Mathematica Notebook is a demonstration of functions in the Utilities package&lt;/li&gt;
&lt;li&gt;The OrientDB API Package can be tested with &lt;a href=&#34;https://test.healis.eu/dbapi/Test/OrientDB%20API%20Demo%201%20-%20Test%20API%20Commands.nb&#34;&gt;Demo 1-Test API Commands&lt;/a&gt; and &lt;a href=&#34;https://test.healis.eu/dbapi/Test/OrientDB%20API%20Demo%203%20-%20Schemaless%20vs%20Schemafull%20Operations.nb&#34;&gt;Demo 3-Schemaless vs Schemafull Operations&lt;/a&gt; Notebooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;documentation-pages&#34;&gt;Documentation Pages&lt;/h2&gt;
&lt;p&gt;If you have already installed the DBAPI project, then you can search Wolfram Mathematica documentation for &lt;code&gt;DBAPI&lt;/code&gt;. This is your starting point for browsing the documentation.&lt;/p&gt;
&lt;p&gt;For demonstration purposes, we have included here the following documentation pages in pdf format for the &lt;code&gt;ODBapi&lt;/code&gt; and &lt;code&gt;ODBgetFieldAttributes&lt;/code&gt; functions of the &lt;code&gt;OrientDB Package&lt;/code&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBapi.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBapi.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBapi.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBgetFieldAttributes.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBgetFieldAttributes.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBgetFieldAttributes.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OrientDB Mathematica Package</title>
      <link>https://healis.eu/en/post/20151230/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20151230/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The main function of this Mathematica package, &lt;code&gt;ODBapi&lt;/code&gt;, is built on top of the &lt;a href=&#34;https://reference.wolfram.com/language/ref/URLFetch.html&#34;&gt;URLFetch&lt;/a&gt; built-in function. &lt;a href=&#34;https://orientdb.org/docs/3.0.x/misc/OrientDB-REST.html&#34;&gt;OrientDB RESTful HTTP API&lt;/a&gt; commands are ported into Wolfram Language through &lt;a href=&#34;https://reference.wolfram.com/language/ref/URLFetch.html&#34;&gt;URLFetch&lt;/a&gt; and then &lt;code&gt;ODBapi&lt;/code&gt; commands are built with arguments that specify options with rules of the form &lt;code&gt;name -&amp;gt; value&lt;/code&gt;. This package has also other utility functions especially implemented for OrientDB. &lt;code&gt;OrientDB Package&lt;/code&gt; is part of the &lt;a href=&#34;https://healis.eu/en/project/wolfram_apis/&#34;&gt;Wolfram API application project&lt;/a&gt;. Visit the official page of the project for installation and testing instructions.&lt;/p&gt;
&lt;h2 id=&#34;discussion&#34;&gt;Discussion&lt;/h2&gt;
&lt;p&gt;OrientDB is a multi-model, NoSQL, DBMS based on 16 years of research. Orient Technologies, the company that supports the product, has published more than 60 releases and there is constant and frequent adaptation to user demand and the latest technology available. OrientDB is Open Source and FREE for any purpose. Good news are that this &lt;strong&gt;OrientDB Mathematica Package is also Open Source and Free&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;OrientDB is using an SQL-like programming language for managing data. We consider that this can be a turning point for innovation, adaptation, and extension of SQL language. Although SQL is widely used and familiar to many programmers, we argue that its use becomes complicated on graph data models. OrientDB SQL, i.e. &lt;strong&gt;OSQL&lt;/strong&gt;, has been extended to cover operations on Graph Model, but with the cost of adding extra SQL commands. This level of detail can be hidden from the user, and a more abstracted language can be built to cover both the Graph Model and the underlying Document Model.&lt;/p&gt;
&lt;p&gt;Moreover, normally SQL consists of a &lt;strong&gt;Data Definition Language&lt;/strong&gt;, &lt;strong&gt;Data Manipulation Language&lt;/strong&gt; and &lt;strong&gt;Data Control Language&lt;/strong&gt;. In OrientDB there are 34 different commands divided into six categories. Four of them are related to the manipulation of data structure (Graph,Schema,Index,Database) and two of them concern operations (Create-Read-Update-Delete and Utility).&lt;/p&gt;
&lt;p&gt;There is some analogy of &lt;strong&gt;OSQL&lt;/strong&gt; with the &lt;code&gt;ODBapi&lt;/code&gt; function of the &lt;code&gt;OrientDB Package&lt;/code&gt;. We are overloading the function with multiple definitions that are derived from the use of optional and mandatory arguments. This differentation is based on the commands (Add, Del, Get, Update, Import/Export, Login/Logout) and the various data structures (Server, Database, Class-Vertex-Edge, Property, Record, Document, Value). See the documentation page below for more information.&lt;/p&gt;
&lt;p&gt;We argue that this effort to transform the OrientDB SQL set of commands to a function with parameters is a good start for a uniform, universal treatment of data language (&lt;strong&gt;UDL&lt;/strong&gt;). Most important in such a design are: the parameter for the basic operation (&lt;strong&gt;ADD, DEL, GET, UPD, LNK, IRT, LOG&lt;/strong&gt;), and the parameter for the type of construct e.g. &lt;strong&gt;Database, Class, Property, Record, and Value&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With that guideline in mind, SELECT becomes &lt;strong&gt;GET&lt;/strong&gt;, INSERT and CREATE become &lt;strong&gt;ADD&lt;/strong&gt;, TRUNCATE AND DELETE become &lt;strong&gt;DEL&lt;/strong&gt;, UPDATE and ALTER become &lt;strong&gt;UPD&lt;/strong&gt;. The current OrientDB package needs more programming effort to reach the state we described. But we foresee that it will be far more intuitive, user-friendly and easy to program than its SQL ancestor.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Most of the functionality of &lt;a href=&#34;https://orientdb.org/docs/3.0.x/misc/OrientDB-REST.html&#34;&gt;OrientDB HTTP-JSON API&lt;/a&gt; is embedded in Mathematica.  The user is able to work with OrientDB database in the native Wolfram Language environment. &lt;a href=&#34;https://healis.eu/en/project/wolfram_apis/&#34;&gt;Wolfram API application project&lt;/a&gt; in general combines fundamental bult-in data structures, &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt;, &lt;a href=&#34;https://reference.wolfram.com/language/ref/Association.html&#34;&gt;Association&lt;/a&gt; and &lt;a href=&#34;https://reference.wolfram.com/language/ref/Dataset.html&#34;&gt;Dataset&lt;/a&gt; of the Wolfram Language with the native JSON permanent storage, retrieval  and manipulation mechanism of OrientDB database. The project is open source and free, therefore it can be downloaded from those interested in building &lt;a href=&#34;https://reference.wolfram.com/workbench/index.jsp?topic=/com.wolfram.eclipse.help/html/tasks/applications/mathematicaapps.html&#34;&gt;Mathematica application projects&lt;/a&gt; and those interested in porting data from RESTful services and NoSQL databases into Mathematica.&lt;/p&gt;
&lt;h2 id=&#34;documentation-pages&#34;&gt;Documentation Pages&lt;/h2&gt;
&lt;p&gt;For demonstration purposes, we have included here the following documentation pages in pdf format for the &lt;code&gt;ODBapi&lt;/code&gt; and &lt;code&gt;ODBgetFieldAttributes&lt;/code&gt; functions of the &lt;code&gt;OrientDB Package&lt;/code&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBapi.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBapi.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBapi.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBgetFieldAttributes.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBgetFieldAttributes.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;http://test.healis.eu/dbapi/DocumentationPDF/ODBgetFieldAttributes.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AtomicDB Mathematica AddOn (ADBM)</title>
      <link>https://healis.eu/en/post/20151009/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20151009/</guid>
      <description>&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced AtomicDB current API functionality with powerful new commands for Mathematica users&lt;/li&gt;
&lt;li&gt;Build interactive demos, powerful presentations and application in the vast environment of Wolfram Language with nearly 5,000 built-in functions at a fraction of time it would require to build, test, and support these, in other programming languages.&lt;/li&gt;
&lt;li&gt;Debug easily your applications by dynamic programming and interactive sessions&lt;/li&gt;
&lt;li&gt;Create multiple visualization schemes, network topologies, data mining and search indexing algorithms powered by dynamically configured GUIs for the non-experienced user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adbm-demo-version-installation&#34;&gt;ADBM Demo Version Installation&lt;/h2&gt;
&lt;p&gt;Here is some &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/nb/demoVersion-installation.nb&#34;&gt;Mathematica Notebook code&lt;/a&gt; to test the installation of the package .dll&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/zip/adb-demo.zip&#34;&gt;Unzip .DLL file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check &lt;!-- raw HTML omitted --&gt;$LibraryPath&lt;!-- raw HTML omitted --&gt; and find out the exact location of &lt;!-- raw HTML omitted --&gt;$UserBaseLibrary&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Place the DLL file under &lt;!-- raw HTML omitted --&gt;$UserBaseLibrary&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Execute the rest of the code above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you succeed, a new window with the title &amp;ldquo;AtomicDB Output Window&amp;rdquo; will be opened. The API package has been loaded. You can close all the windows.&lt;/p&gt;
&lt;h2 id=&#34;adbm-demo-version-testing&#34;&gt;ADBM Demo Version Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download and Run &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/nb/demoVersion-test.nb&#34;&gt;Mathematica Notebook Demo Version of ADBM&lt;/a&gt; or view the file in a &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/pdf/demoVersion-test.pdf&#34;&gt;pdf format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;That will open automatically another &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/nb/demoVersion-output.nb&#34;&gt;Mathematica Notebook file to output the result of computation&lt;/a&gt;. View the output file in a &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/pdf/demoVersion-output.pdf&#34;&gt;pdf format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adbm-professional-version-comparison&#34;&gt;ADBM Professional Version Comparison&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Compare Mathematica Notebook Demo version testing file with the &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/nb/proVersion-test.nb&#34;&gt;testing of ADBM professional version&lt;/a&gt;, view that file in a &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/pdf/proVersion-test.pdf&#34;&gt;pdf format&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Compare Mathematica Notebook Demo Output with that of &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/nb/proVersion-output.nb&#34;&gt;ADBM professional output&lt;/a&gt;, view that file in a &lt;a href=&#34;http://test.healis.eu/atomicdb/20150409-api-windows-x86-64/pdf/proVersion-output.pdf&#34;&gt;pdf format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AtomicDB AddOn Professional Version makes it a lot easier to get the same result; it boosts functionality and programmability !&lt;/p&gt;
&lt;h2 id=&#34;adbm-pro-version-includes&#34;&gt;ADBM Pro Version Includes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Full Set of API Primitive Instructions&lt;/li&gt;
&lt;li&gt;Powerful Enhanced Commands&lt;/li&gt;
&lt;li&gt;Output Commands for any type of AtomicDB API objects&lt;/li&gt;
&lt;li&gt;Transformation Commands for any type of AtomicDB API objects&lt;/li&gt;
&lt;li&gt;Type Checking of Commands with new Mathematica Test Predicates&lt;/li&gt;
&lt;li&gt;Get Data By Key or By Value from Native Mathematica Structures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Contact us to discuss your needs and learn more about the ADBM Pro version we use for our consultancy services and solutions we offer on top of this Add-On.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Google shuts down Freebase ?</title>
      <link>https://healis.eu/en/post/20150609/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150609/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#quick-history-review&#34;&gt;Quick History Review&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary-of-technology-achievements&#34;&gt;Summary of technology achievements&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#database-management-system-and-data-architecture&#34;&gt;Database management system and data architecture&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-identity-crisis-solution&#34;&gt;The identity crisis solution&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#schema-type-system-ontology&#34;&gt;Schema, Type System, Ontology&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#type-checking&#34;&gt;Type Checking&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#included-types&#34;&gt;Included Types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#disambiguation-mechanism&#34;&gt;Disambiguation Mechanism&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#complexcompound-value-types-cvts-and-relationships&#34;&gt;Complex/Compound Value Types (CVTs) and Relationships&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#blobs-mechanism&#34;&gt;Blobs Mechanism&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#full-access-control-and-auditing-mechanism&#34;&gt;Full Access Control and Auditing mechanism&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#fully-web-based-user-interfaces-and-applications&#34;&gt;Fully web-based user interfaces and applications&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mql---the-metaweb-query-language&#34;&gt;MQL - The Metaweb Query Language&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have spent a lot of time studying in detail and experimenting with Freebase, and I am truly disappointed to see such a great collective effort to suddenly disappear from the software development scene without a good reason. I will justify this, but first let me discuss a bit about what is freebase for those that are not aware of the project.&lt;/p&gt;
&lt;p&gt;Freebase, in my opinion, is currently the best collaborative information management system ever built. According to &lt;a href=&#34;http://en.wikipedia.org/wiki/Freebase&#34;&gt;Wikipedia&lt;/a&gt;, &amp;ldquo;It is an online collection of structured data harvested from many sources, including individual, user-submitted contributions. Freebase aims to create a global resource which allows people (and machines) to access common information more effectively&amp;rdquo;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/1513562&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quick-history-review&#34;&gt;Quick History Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In 2000 Danny Hillis first described his idea for creating a &amp;ldquo;knowledge web&amp;rdquo; which he called Aristotle !&lt;/li&gt;
&lt;li&gt;In 2003 the project known as &amp;ldquo;The Metaweb&amp;rdquo; begins, inside Applied Minds&lt;/li&gt;
&lt;li&gt;On October 2006 the One True Graph is born&lt;/li&gt;
&lt;li&gt;On July 16th 2010 Metaweb is acquired by Google&lt;/li&gt;
&lt;li&gt;On 30th of June 2015 Google plans to shut down completely the service. It is already in read-only mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary-of-technology-achievements&#34;&gt;Summary of technology achievements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Freebase counts twelve years of focused development effort by a strong dedicated team of experts.&lt;/li&gt;
&lt;li&gt;Freebase counts nine years of online editing with superb web-based client APIs and GUIs&lt;/li&gt;
&lt;li&gt;Freebase, Google, have defined and implemented  state of the art technology in collaborative information management. Do consider the following topics just for a start :&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;database-management-system-and-data-architecture&#34;&gt;Database management system and data architecture&lt;/h3&gt;
&lt;p&gt;The most important IT asset is their proprietary &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1807283&#34;&gt;Graphd&lt;/a&gt; database.  Some information have been disclosed to the public in the past, but of course the database itself is not going to be released or opened for inspection.&lt;/p&gt;
&lt;p&gt;Graphd encodes everything  as a tuple. Every structure and construct such as entity type, entity instance, property, data types, domain, namespace, ontology you name it, are constructed from tuples. The very first layer of abstraction that is created on top of this is the object-link that implements RDF kind of statements in Freebase. Every item in freebase is either a link or an object. And you can get ALL the links to or from any object. Defining a single primitive construct as a building block is one of my R3DM semiotic principles in data modelling abstraction. Topic Maps data model (&lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/#sect-metamodel&#34;&gt;TMDM&lt;/a&gt;) follow the same kind of logic, where everything is a topic and every other construct is built with topics. In RDF/OWL fundamental construct is the triplet, in Graph databases you have the node, in key-value stores you have the key-value primitive.&lt;/p&gt;
&lt;h3 id=&#34;the-identity-crisis-solution&#34;&gt;The identity crisis solution&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://healis.eu/en/post/20131105/#vvp-and-the-identity-crisis-on-the-web&#34;&gt;identity crisis&lt;/a&gt;, that is still a problem in the linked-data world, has a fair solution in Freebase with not a single URL-based namespace identifier but with three kinds of identifiers that each plays a different role :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Under the hood GUIDs that are written internally in Graphd database&lt;/li&gt;
&lt;li&gt;Long user friendly, human-readable, IDs&lt;/li&gt;
&lt;li&gt;Short Machine IDs that cover the whole lifecycle of anything recorded in the database, i.e. track changes, solve merging/splitting issues, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;schema-type-system-ontology&#34;&gt;Schema, Type System, Ontology&lt;/h3&gt;
&lt;p&gt;A flexible generic schema, that covers any other ontology based on top of it with only four hierarchical containers.&lt;/p&gt;
&lt;span class=&#34;markup-quote&#34;&gt;Namespace &amp;mdash;&amp;gt; Domain &amp;mdash;&amp;gt; Types &amp;mdash;&amp;gt; Properties&lt;/span&gt;
&lt;p&gt;This is the most generic, plain, T-Box you can define,  with just four levels. Pause for a moment here and take a very careful read on the following.  Are you familiar with the following fundamental hierarchies in Computer science ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespace - Package -Class -Object (OOP)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database - Schema -Table -Row (RDBMS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain - Type -Property -Instance (Ontologies and XML)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a coincidence, and there is a very good reason that we naturally create abstractions based on this hierarchy. The very first person that came up with this astonishing observation is inventor &lt;a href=&#34;https://www.linkedin.com/in/ron-everett-5134a68a/&#34;&gt;Ron Everett&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20150320/#signified-sign-signifier-alternative-paradigm&#34;&gt;AtomicDB&amp;rsquo;s under the hood encoding structure (Environment, System, Context, Item)&lt;/a&gt; is the heart of their system. This is not the space or the time to cover that in more detail, it suffices that &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt; semiotic conceptual model can offer an adequate explanation on the abstraction/reference mechanism behind the scenes.&lt;/p&gt;
&lt;h3 id=&#34;type-checking&#34;&gt;Type Checking&lt;/h3&gt;
&lt;p&gt;In freebase every property, i.e. bidirectional link between two items, by the way this is also a fundamental technology novelty of AtomicDB, stay tuned…., knows exactly what entity types to expect.&lt;/p&gt;
&lt;h3 id=&#34;included-types&#34;&gt;Included Types&lt;/h3&gt;
&lt;p&gt;They have implemented a kind of multiple inheritance mechanism, such that one type with its properties can automatically included within another type. Included types makes it possible to create any kind of hierarchical structure where it can be referenced. Most important you can easily create custom types based on previously defined types.&lt;/p&gt;
&lt;h3 id=&#34;disambiguation-mechanism&#34;&gt;Disambiguation Mechanism&lt;/h3&gt;
&lt;p&gt;That is based on both the namespace and disambiguating properties in identifying similarly-named topics. A score is also calculated to rank the items in conflict&lt;/p&gt;
&lt;h3 id=&#34;complexcompound-value-types-cvts-and-relationships&#34;&gt;Complex/Compound Value Types (CVTs) and Relationships&lt;/h3&gt;
&lt;p&gt;You can define new data types, e.g. use a dated integer for measurements. You can also define mediator type of nodes between the source and target of the original simple relationship. No black nodes and other such RDF/OWL crap in freebase.&lt;/p&gt;
&lt;h3 id=&#34;blobs-mechanism&#34;&gt;Blobs Mechanism&lt;/h3&gt;
&lt;p&gt;In freebase you can also store large objects, i.e. text/binary stream.&lt;/p&gt;
&lt;h3 id=&#34;full-access-control-and-auditing-mechanism&#34;&gt;Full Access Control and Auditing mechanism&lt;/h3&gt;
&lt;p&gt;Every user action is recorded inside freebase. They have defined Unix like access control on anything, i.e. user, user group, permissions. It is possible to request a full history on any item that is inside the database&lt;/p&gt;
&lt;h3 id=&#34;fully-web-based-user-interfaces-and-applications&#34;&gt;Fully web-based user interfaces and applications&lt;/h3&gt;
&lt;p&gt;If you want to attract easily new, inexperienced, users, then you must have the best ever built user interface suited for your purpose and Freebase-Google have managed to do that. You can access everything with a few clicks of a button. You can view everything in a well-presented hierarchical or table like format. You can build your queries online and save them as objects in the database, then you can simply access them with a permanent, tiny URL. Likewise, you can program your applications and save them like objects in the database.&lt;/p&gt;
&lt;h3 id=&#34;mql---the-metaweb-query-language&#34;&gt;MQL - The Metaweb Query Language&lt;/h3&gt;
&lt;p&gt;Last but not least, get your hands dirty with a truly magnificent piece of programming art in Freebase, their MQL query/update mechanism. It is based on pattern matching. Programmers and even advanced, non-expert users can define easily a query pattern and take back result in popular JSON formatted string. You can limit or sort results, you can ask for ordered collection items, you can specify optional directives and constrains and pattern matching with operators. Finally results have a numerical relevancy score, this is another Google&amp;rsquo;s secret technology similar to the full implementation of page ranking technology. For example you can get a ranked list of the most notable topics with a given name.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is certainly not an exhausted list of best of breed Freebase features but I  hope you have read enough about the technology to make your own judgement on why Google shuts down completely their freebase service. Their one page announcement does not say much about it. It is not signed by any Google-Freebase authority persons. In my opinion, the reason explained there to all of us that embraced that project is a sham and is asking for reproach. Most of us knows that Google&amp;rsquo;s knowledge graph, 2012, that enhances Google search engine with semantic information is based on Freebase.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/mmQl6VGvX-c&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Let met state clearly that I welcome Google&amp;rsquo;s decision to make contributions to &lt;a href=&#34;https://www.wikidata.org/wiki/Wikidata:Main_Page&#34;&gt;Wikidata&lt;/a&gt; project but I do not understand why they have to shut down completely Freebase in doing that. It is going to take a  long time to reach the level of experience that users already have with Freebase. And what about the curated data of many people and the projects they have built on top of it ? What about all these technological advances I described in this post, how one will be able to see how they operate and make a comparison with other projects ?&lt;/p&gt;
&lt;p&gt;For a start, I think &lt;a href=&#34;https://www.wikidata.org/wiki/Wikidata:Main_Page&#34;&gt;Wikidata&lt;/a&gt; is a new project, that is built on a far worse fundamental data architecture than Freebase. Nevertheless I acknowledge that there are many good ideas and efforts to share. But, it makes no sense to eradicate such a historical project as Freebase in order to continue development on a newcomer.&lt;/p&gt;
&lt;p&gt;So, what other alternatives exist in this area ? One is the &lt;a href=&#34;https://wiki.dbpedia.org/&#34;&gt;DBpedia&lt;/a&gt; project, purely RDF based linked-data project, that started in 2007. More recent proprietary systems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.poolparty.biz/&#34;&gt;Pool-Party&lt;/a&gt; semantic suite, also RDF linked-data based,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kamala.mssm.nl&#34;&gt;Kamala&lt;/a&gt; a Topic-Map based web application,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://siren.io/&#34;&gt;Siren&lt;/a&gt; Investigative Intelligent Platform&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neverthless I anticipate that sooner or later you should expect a unicorn in semantic based information management that will simply shutter and unify all the rest. The reason I believe this is going to happen is because none of these companies have an efficient underlying fundamental data architecture. In this other dimension, in the twilight zone, there is not any player in the market.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/NzlG28B-R8Y&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>The number &#39;3&#39; and The Three-Faceted Abstraction Mechanism in R3DM</title>
      <link>https://healis.eu/en/post/20150523_part3/</link>
      <pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150523_part3/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#1-functional-representation-of-number-3---the-sign-representation&#34;&gt;1. Functional Representation of Number 3 - The Sign (Representation)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#2-interpretation-of-three-or-3---the-signified-resource&#34;&gt;2. Interpretation of &amp;ldquo;three&amp;rdquo; or 3 - The Signified (Resource)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#3-storage-of-3---the-signifier-realization&#34;&gt;3. Storage of &amp;lsquo;3&amp;rsquo; - The Signifier (Realization)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#mathematica-notebook&#34;&gt;Mathematica Notebook&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://healis.eu/en/post/20150320/&#34;&gt;Part 2&lt;/a&gt; of this series we introduced the Atomic Information Resource (AIR) data model of the AtomicDB database management system. In this part we present a simple but extensive example on various representations of number three using the poweful Mathematica functions and the unique features of Mathematica notebooks. We relate these with the three-faceted abstraction mechanism in &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;1-functional-representation-of-number-3---the-sign-representation&#34;&gt;1. Functional Representation of Number 3 - The Sign (Representation)&lt;/h2&gt;
&lt;p&gt;Functional representation is the core operation of R3DM. Everything is represented as a function that is mapping values from one domain to another. You may view functions, as transformations. This is also how they operate in Wolfram Language. They transform expressions from one symbolic form to another.&lt;/p&gt;
&lt;p&gt;In this section we investigate the various forms that a symbol related to number &amp;lsquo;3&amp;rsquo; can take. In R3DM this is the sign that is used to signify something at a higher level and at the same time it is used to symbolize an internal representation, a realization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display Format&lt;/li&gt;
&lt;li&gt;Internal Representation&lt;/li&gt;
&lt;li&gt;String vs Symbol Representation&lt;/li&gt;
&lt;li&gt;String vs Numeric Representation&lt;/li&gt;
&lt;li&gt;Entity Representation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-interpretation-of-three-or-3---the-signified-resource&#34;&gt;2. Interpretation of &amp;ldquo;three&amp;rdquo; or 3 - The Signified (Resource)&lt;/h2&gt;
&lt;p&gt;The Wolfram Language provides a uniform mechanism, the Interpreter function, for specifying how input of different types should be interpreted. Interpretations can involve either structural or semantic conversions. The strings that appear in $InterpreterTypes are the possible first arguments to Interpreter.&lt;/p&gt;
&lt;p&gt;Generally speaking interpretation is closely related with the assignment of meaning to any expression or concept. But in computer science an interpreter is a computer program that executes instructions. In Wolfram Language the interpreter is involved in the evaluation of an expression. In R3DM any interpretation is directly linked to the signified, the semantics of any information resource. In this section we define our own interpretations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpretation of a unicode string e.g. &amp;ldquo;τρια&amp;rdquo; as 3&lt;/li&gt;
&lt;li&gt;Interpretation of a numeral e.g. &amp;ldquo;III&amp;rdquo; as 3&lt;/li&gt;
&lt;li&gt;String vs Interpretation&lt;/li&gt;
&lt;li&gt;Evaluation of an expression with user-defined interpretations&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-storage-of-3---the-signifier-realization&#34;&gt;3. Storage of &amp;lsquo;3&amp;rsquo; - The Signifier (Realization)&lt;/h2&gt;
&lt;p&gt;Finally in this section we elaborate on the analysis of data types and the encoding, decoding mechanisms to store various representations of &amp;lsquo;3&amp;rsquo;. First we will compare atomic and complex data types. We can view data types as containers of a specific type of content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Container (Form) - Content (Value) Duality&lt;/li&gt;
&lt;li&gt;Encoding and Decoding of Container - Content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We present an Image container (symbol) realized in Mathematica as a raw array of bytes (visual representation), and a Sound container (symbol) realized in Mathematica as a list of sound amplitude levels samples (aural representation).&lt;/p&gt;
&lt;h2 id=&#34;mathematica-notebook&#34;&gt;Mathematica Notebook&lt;/h2&gt;
&lt;p&gt;Here is the full article printed from this &lt;a href=&#34;https://healis.eu/documents/number_3.nb&#34;&gt;Mathematica Notebook&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;/documents/Towards%20a%20New%20Data%20Modelling%20Architecture%20-%20Part%203.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;https://healis.eu/documents/Towards%20a%20New%20Data%20Modelling%20Architecture%20-%20Part%203.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;https://healis.eu/documents/Towards%20a%20New%20Data%20Modelling%20Architecture%20-%20Part%203.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-3-hatzis-phd/&#34;&gt;LinkedIn - Published Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Atomic Information Resource (AIR)</title>
      <link>https://healis.eu/en/post/20150320/</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150320/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#preface&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#background-information&#34;&gt;Background Information&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#atomicdb-evaluation&#34;&gt;AtomicDB Evaluation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#entity-attribute-value-silo-structure&#34;&gt;Entity-Attribute-Value &amp;lsquo;Silo&amp;rsquo; Structure&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#table-form&#34;&gt;Table form&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#xml-form&#34;&gt;XML Form&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#json-form&#34;&gt;JSON Form&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#signified-sign-signifier-alternative-paradigm&#34;&gt;Signified-Sign-Signifier Alternative Paradigm&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#atomicdb-computational-semiotic-analysis-in-r3dm&#34;&gt;AtomicDB Computational Semiotic Analysis in R3DM&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#an-atomicdb-working-example&#34;&gt;An AtomicDB Working Example&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#terminology&#34;&gt;Terminology&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#draw-model&#34;&gt;Draw Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-model&#34;&gt;Add Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-model&#34;&gt;Get Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-concepts&#34;&gt;Add Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-concepts&#34;&gt;Get Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-collections&#34;&gt;Add Collections&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-collections&#34;&gt;Get Collections&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-data-values&#34;&gt;Add Data Values&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-data-values&#34;&gt;Get Data Values&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#assimilation-of-a-table&#34;&gt;Assimilation of a Table&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#review-and-discussion&#34;&gt;Review and Discussion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;
&lt;p&gt;The content of this article is a mixture of these three LinkedIn posts, &lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-2-hatzis-phd&#34;&gt;Towards a New Data Modelling Architecture - Part 2&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/pulse/air-atomic-information-resource-athanassios-i-hatzis-phd&#34;&gt;Atomic Information Resource&lt;/a&gt;, and &lt;a href=&#34;https://www.linkedin.com/pulse/atomicdb-architecture-r3dm-athanassios-i-hatzis-phd&#34;&gt;AtomicDB Architecture in R3DM&lt;/a&gt;. We also used the full content of the original source from this Mathematica &lt;a href=&#34;https://healis.eu/en/post/20150320/R3DM_Part2.nb&#34;&gt;notebook&lt;/a&gt;. It is worth mentioning that the term AtomicDB, at that time, was used to signify both the brand-name and the database engine of a company that is now re-branded as X10SYS. &lt;strong&gt;R3DM&lt;/strong&gt;, a vendor-neutral conceptual framework for data modeling, is sharing several fundamental architectural design principles with AtomicDB.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 1&lt;/a&gt; of this series we talked about the main constructs of the Relational and Entity-Relationship data model. In this article we present a computational semiotic analysis of AtomicDB that is based on &lt;strong&gt;R3DM&lt;/strong&gt; and we focus on explaining with an example the universal &lt;strong&gt;AIR&lt;/strong&gt; unit that we will meet again on forthcoming posts of this series.&lt;/p&gt;
&lt;h2 id=&#34;background-information&#34;&gt;Background Information&lt;/h2&gt;
&lt;p&gt;The AtomicDB data model we describe has a long history behind it. Searching at Google for patents with the title &amp;ldquo;Data base and knowledge operating system&amp;rdquo; or with the title &amp;ldquo;Data management architecture associating generic data items using reference&amp;rdquo; we find several documents that are &lt;a href=&#34;https://www.google.com/patents/US8051102&#34;&gt;filed in the year 2003&lt;/a&gt; from the inventor Ron Everett. The same year a &amp;ldquo;proof of concept&amp;rdquo; for this invention was successfully demonstrated with a &lt;a href=&#34;https://www.linkedin.com/pulse/case-study-us-navy-jean-michel-letennier-1&#34;&gt;use case of managing a 50+ milion records of spare/repair part requirements for US Navy ships&lt;/a&gt;. Today AtomicDB is a fully fledged database management system that is based on Ron Everett&amp;rsquo;s patented associative data items architecture. According to the vendor several pilots are currently running under big corporations and University research establishments.&lt;/p&gt;
&lt;h3 id=&#34;atomicdb-evaluation&#34;&gt;AtomicDB Evaluation&lt;/h3&gt;
&lt;p&gt;The author of this article has been an evaluator of AtomicDB with full access to test GUIs, APIs and web services of their system. In particular he explored their C# API functionality for developers. In order to make tests interactive and efficient most functions of their API have been ported to Wolfram Language using the &lt;a href=&#34;https://reference.wolfram.com/language/NETLink/tutorial/CallingNETFromTheWolframLanguage.html&#34;&gt;NETLink C#&lt;/a&gt; interconnectivity package. Function calls and other expressions that you see here are based on &lt;a href=&#34;https://healis.eu/en/post/20151009/&#34;&gt;AtomicDB Mathematica API&lt;/a&gt; that is not included with the publication of this article. The Wolfram Language &lt;a href=&#34;https://healis.eu/en/post/20150320/R3DM_Part2.nb&#34;&gt;notebook&lt;/a&gt; is included for reference purposes.&lt;/p&gt;
&lt;h2 id=&#34;entity-attribute-value-silo-structure&#34;&gt;Entity-Attribute-Value &amp;lsquo;Silo&amp;rsquo; Structure&lt;/h2&gt;
&lt;p&gt;The Entity-Relationship model is universally accepted as the means to extend the relational model in order to give meaning to relationships. For our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;database example&lt;/a&gt; in &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 1&lt;/a&gt; we can draw the following ER diagram.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://healis.eu/en/post/20150320/erdiagram.jpg&#34; data-caption=&#34;depicts an association among the three entities of our database, Parts, Suppliers and Catalog, and shows the datatypes of their attributes. This is the classic many to many relationship between Parts and Suppliers where the Catalog is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role&#34;&gt;

&lt;img src=&#34;https://healis.eu/en/post/20150320/erdiagram.jpg&#34; alt=&#34;depicts an association among the three entities of our database, `Parts`, `Suppliers` and `Catalog`, and shows the datatypes of their attributes. This is the classic many to many relationship between `Parts` and `Suppliers` where the `Catalog` is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Many-to-Many Relationship&lt;/h4&gt;
  &lt;p&gt;
    depicts an association among the three entities of our database, &lt;code&gt;Parts&lt;/code&gt;, &lt;code&gt;Suppliers&lt;/code&gt; and &lt;code&gt;Catalog&lt;/code&gt;, and shows the datatypes of their attributes. This is the classic many to many relationship between &lt;code&gt;Parts&lt;/code&gt; and &lt;code&gt;Suppliers&lt;/code&gt; where the &lt;code&gt;Catalog&lt;/code&gt; is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;From a semantic point of view, similar diagrams are in need from users that want to express business processes. But when we reach the implementation stage software engineers have to marry business requirements with the technical constrains of the database system hence the ER diagram you see. This is known as &amp;ldquo;The Model&amp;rdquo;, a conceptual view of the user on data. The ER version of the model has several limitations, due to the architecture of RDBMS. One important consideration is that each attribute remains enclosed in the table structure; and in the case the same attribute appears in another table, it has to be repeated. In our example above, the primary key &lt;code&gt;pid&lt;/code&gt; of &lt;code&gt;Parts&lt;/code&gt;  is repeated as a foreign key &lt;code&gt;catpid&lt;/code&gt; in &lt;code&gt;Catalog&lt;/code&gt;. The difficulties that arise in data aggregation due to this limitation are substantial.&lt;/p&gt;
&lt;p&gt;The relational and the entity-relationship model made a huge impact in the IT world for nearly half a century. But during this long period of standardization it meant also one thing, everyone had to comply with the rules and requirements of the model. Everyone had to think in terms of Entity-Attribute-Value or Subject-Predicate-Object as it is known in the RDF semantic model. Programming languages have been affected too from this monolithic way of thinking. Although it proved to be advantageous to program with classes and objects, it created an artificial problem of how to map these onto persistent data structures on the disk, also known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&#34;&gt;object-relational impedance mismatch&lt;/a&gt; problem.&lt;/p&gt;
&lt;p&gt;Knowledge representation frameworks did not escape from this path. Ontologies expressed in OWL followed the same paradigm with classes, attributes, and values. Serialization methods such as JSON (object-name-value) and XML (element-attribute-value) also came after the same rationale. We consider that this is one of the main reasons that noSQL databases appeared on the scene recently. Key-value store, hierarchical semi-structured documents, column based and graph-property data structures are all attempts to provide a solution to this problem. We include a few examples of characteristic forms with comments by Ron Everett in order to contrast them with the alternative data model of AtomicDB.&lt;/p&gt;
&lt;h3 id=&#34;table-form&#34;&gt;Table form&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;When we attempt to use Tables as a storage paradigm for Information we discover that Tables are a namespace bound, non-dynamic, 2-D, structured storage paradigm that has a different structure for every Table in every Database. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Each application is developed with unique and special queries written to each specific database design, table layout and named tables, columns and keys.&lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rows of &lt;code&gt;Parts&lt;/code&gt; table from a Microsoft Access &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;relational database&lt;/a&gt; that we have used in &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(partsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select pid,pname from Parts where pid&amp;lt;994&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-01&#34; src=&#34;https://healis.eu/en/post/20150320/notebook01.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;xml-form&#34;&gt;XML Form&lt;/h3&gt;
&lt;p&gt;Rows of the table above serialized in XML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dataroot&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pid&amp;gt;&lt;/span&gt;991&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pname&amp;gt;&lt;/span&gt;Left Handed Bacon Stretcher Cover&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pcolor&amp;gt;&lt;/span&gt;Red&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pcolor&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pid&amp;gt;&lt;/span&gt;992&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pname&amp;gt;&lt;/span&gt;Smoke Shifter End&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pcolor&amp;gt;&lt;/span&gt;Black&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pcolor&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pid&amp;gt;&lt;/span&gt;993&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pname&amp;gt;&lt;/span&gt;Acme Widget Washer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pcolor&amp;gt;&lt;/span&gt;Red&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pcolor&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dataroot&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Some have hailed XML (RDF and triple stores) as the means to solve the n-dimensional relationship problem, because with it, meta-information can be captured, but XML is plagued with other problems, not the least of which are namespace binding requiring semantic accord, massively replicated tags and data, the heavy overhead of text based processing, the necessity of searching and indexing all the text in every possible XML document for each and every key/ value-tag/data match sought and the distribution of the tagged datasets across innumerable XML documents, stored in 2-D table-referenced 2-D file structures. Add to that list the overhead imposed by using Semantic Web languages and ontologies and the PhD level specialists required to develop and maintain these &amp;lsquo;knowledge&amp;rsquo; oriented systems and you get even more namespace entrenchment and hence specialization of the applications developed with it all &lt;sup id=&#34;fnref2:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;json-form&#34;&gt;JSON Form&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataroot&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;991&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;992&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;993&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;signified-sign-signifier-alternative-paradigm&#34;&gt;Signified-Sign-Signifier Alternative Paradigm&lt;/h2&gt;
&lt;p&gt;Entity-Attribute-Value bondage highlights the fact that three perspectives, semantics at the conceptual layer, representation at the symbol layer and encoding at the physical layer are mixed in such a way that it is very hard to separate and work with them at distinct levels of abstraction. The &lt;strong&gt;R3DM&lt;/strong&gt;/&lt;strong&gt;S3DM&lt;/strong&gt; conceptual framework is based on the natural process of semiosis where the signified, i.e. concept, entity, attribute and the signifier, i.e. value are referenced through symbols, i.e. signs, at discrete layers. The same philosophy is shared in the &lt;a href=&#34;https://www.linkedin.com/pulse/atomicdb-architecture-r3dm-athanassios-i-hatzis-phd&#34;&gt;architecture&lt;/a&gt; of AtomicDB system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From Data Items in Table to Information Atoms with NO Table&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every table is a silo. Every cell is an atom of data with no awareness of its contexts, or how it fits in to anything beyond its cell. It can be located by external intelligence but on its own it&amp;rsquo; s a &amp;ldquo;dumb&amp;rdquo; participant in the system - the ultimate disconnected micro - fragment accessible only by knowing the column and the record it exists in. &lt;sup id=&#34;fnref3:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The alternative is to replace the data elements with information at the atomic level of the system. Instead of a data atom in a table, we have an information atom with no table. Information atoms exist in a multi-D vector space unbounded by data structures and know their context, such as a &amp;ldquo;customer&amp;rdquo; or a &amp;ldquo;product&amp;rdquo;, just like atoms in the physical world &amp;ldquo;know&amp;rdquo; they are nitrogen or hydrogen items and behave accordingly. Information atoms also know when they were created, when they were last modified, and what other information atoms of other types are associated with them. They know their parents, their siblings, and their workplace associates. They are powerful little entities and most certainly NOT fragments. Nor are they triple statements requiring endless extraneous indexing &lt;sup id=&#34;fnref4:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;AtomicDB  is datatype and namespace agnostic, always fully contextualized, and structure free.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;atomicdb-computational-semiotic-analysis-in-r3dm&#34;&gt;AtomicDB Computational Semiotic Analysis in R3DM&lt;/h3&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;atomicdb-r3dm-references-1650x900.jpg&#34; data-caption=&#34;illustrates the architecture of AtomicDB system according to R3DM framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (S3), the sign (S2) and the storage (S1). An alternative notation and terminology is information resources (IRes-R3), representations (IRep-R2) and realizations (IRea-R1)&#34;&gt;

&lt;img src=&#34;atomicdb-r3dm-references-1650x900.jpg&#34; alt=&#34;illustrates the architecture of AtomicDB system according to **R3DM** framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (**S3**), the sign (**S2**) and the storage (**S1**). An alternative notation and terminology is information resources (**IRes-R3**), representations (**IRep-R2**) and realizations (**IRea-R1**)&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;AtomicDB Architecture in R3DM&lt;/h4&gt;
  &lt;p&gt;
    illustrates the architecture of AtomicDB system according to &lt;strong&gt;R3DM&lt;/strong&gt; framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (&lt;strong&gt;S3&lt;/strong&gt;), the sign (&lt;strong&gt;S2&lt;/strong&gt;) and the storage (&lt;strong&gt;S1&lt;/strong&gt;). An alternative notation and terminology is information resources (&lt;strong&gt;IRes-R3&lt;/strong&gt;), representations (&lt;strong&gt;IRep-R2&lt;/strong&gt;) and realizations (&lt;strong&gt;IRea-R1&lt;/strong&gt;)
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Each layer plays a distinct role and it is clearly separable from the other two. This serves fully the trilateral principle in &lt;strong&gt;R3DM&lt;/strong&gt;. Storage-Realization layer, depicted with green boxes, portrays how AtomicDB system is implemented with .NET framework at the API level. The AtomicDB &lt;strong&gt;Core Key-Value&lt;/strong&gt; primitive data structure is used to build successive nested &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx&#34;&gt;List Class&lt;/a&gt; containers and association types, see [&lt;strong&gt;Fig. 3&lt;/strong&gt;]. This is how the &lt;strong&gt;AIR&lt;/strong&gt; of AtomicDB is realized at (&lt;strong&gt;S1&lt;/strong&gt;).&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;atomicdb-r3dm-relations-800x900.jpg&#34; data-caption=&#34;different kinds of linking (AIR) units&#34;&gt;

&lt;img src=&#34;atomicdb-r3dm-relations-800x900.jpg&#34; alt=&#34;different kinds of linking (AIR) units&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;AtomicDB Association Types&lt;/h4&gt;
  &lt;p&gt;
    different kinds of linking (AIR) units
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;At the Sign layer (&lt;strong&gt;S2&lt;/strong&gt;), [&lt;strong&gt;Fig. 2&lt;/strong&gt;], the &lt;strong&gt;AIR&lt;/strong&gt; receives its symbolic representation. A mere list of four integer numbers is adequate to represent efficiently any piece of information. It is the golden ratio in postmodern era data modeling. It can represent types, instances, and properties, and associate these in a hypergraph network. It is truly a web of information resources based on the power of semiosis, with a reference mechanism not built with character strings (&lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_Resource_Locator&#34;&gt;URL&lt;/a&gt;) but similar to Internet Protocol address (&lt;a href=&#34;https://en.wikipedia.org/wiki/IP_address&#34;&gt;IP&lt;/a&gt;). This &lt;strong&gt;AIR&lt;/strong&gt; information representation serves two principal functions; information resource identification and location addressing, i.e. dereferencing and retrieval, but it does not suffer from the identity problem crisis of the RDFised web. The various forms of &lt;strong&gt;KeyVector&lt;/strong&gt; that correspond to the nested data structures at layer (&lt;strong&gt;S1&lt;/strong&gt;) are depicted with purple boxes.&lt;/p&gt;
&lt;p&gt;Finally (&lt;strong&gt;S3&lt;/strong&gt;) layer, [&lt;strong&gt;Fig. 2&lt;/strong&gt;], depicted with blue boxes, put information resources in their semantic perspective and order with a four level hierarchical structure of containers. It is the kind of logic that developers use to manage classes, properties and objects (&lt;strong&gt;OOP&lt;/strong&gt;), or tables, records and fields (&lt;strong&gt;RDBMS&lt;/strong&gt;), or objects, keys and values (&lt;strong&gt;XML-JSON&lt;/strong&gt;) and subject, predicate, objects (&lt;strong&gt;RDF&lt;/strong&gt;). But Ron Everett&amp;rsquo;s approach differs substantially from previous data models.  Information resources are not handled by name, they are always represented and function as meaningful 4D number vectors. We escape from the namespace entanglement and alleviate the complexity of linked information by smart (&lt;strong&gt;AIR&lt;/strong&gt;) information resource units that are represented in a uniform way and their digital form can be processed, retrieved and stored efficiently and/or combined to create composite information structures.&lt;/p&gt;
&lt;h2 id=&#34;an-atomicdb-working-example&#34;&gt;An AtomicDB Working Example&lt;/h2&gt;
&lt;p&gt;In order to understand better the difference between a &lt;a href=&#34;https://en.wikipedia.org/wiki/Namespace&#34;&gt;&lt;strong&gt;Namespace&lt;/strong&gt;&lt;/a&gt; bounded DBMS vs an &lt;strong&gt;AIR&lt;/strong&gt; based DBMS we exemplify key points of AtomicDB architecture in R3DM. But before we start unfolding our example we present AtomicDB terminology.&lt;/p&gt;
&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Data Item&lt;/code&gt; is a particular type of item that holds an atomic piece of data (an atomic value).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt; (data set) is a generic container for data items with no duplicates. A collection is similar to the notion of attribute (column) data set in the relational model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nexus item&lt;/code&gt; is a special type of data item whose role is to keep associations with the other data items in a record. Nexus item plays a similar role to that of a record in the relational model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nexus Collection&lt;/code&gt; is a special type of collection which holds nexus items only. Nexus collection act similarly to the primary key column in the relational data model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Record&lt;/code&gt; is a set of data items from different collections each associated to the same nexus item (exactly one per record)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; refers to several collections and associates them. The group is not a container for collections. Each group has one and only one nexus collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Bridge Collection&lt;/code&gt; is a certain type of collection that can be associated with more than one group. Bridge collection act similarly to the foreign key column in the relational data model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Concept&lt;/code&gt; is a special type of item that represents uniquely one collection of items. A collection can have one or more representative concepts. A concept can be thought as a reference to collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; is a generic container for unique concepts that are associated to form higher constructs and relations. Model is similar to a database schema, or view.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;draw-model&#34;&gt;Draw Model&lt;/h3&gt;
&lt;p&gt;We start by designing a simple concept map using the &lt;a href=&#34;http://cmap.ihmc.us/&#34;&gt;CMAP Tools&lt;/a&gt; that corresponds to the ER diagram of [&lt;strong&gt;Fig 1.&lt;/strong&gt;] above.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;spcdiagram.jpg&#34; &gt;

&lt;img src=&#34;spcdiagram.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Schema with CMAP Tools&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt; in this diagram, (&lt;code&gt;Groups&lt;/code&gt; - cyan square boxes), are formed by grouping &lt;strong&gt;Attributes&lt;/strong&gt;, i.e. &lt;code&gt;Collections&lt;/code&gt;. One or more &lt;strong&gt;Attributes&lt;/strong&gt; (&lt;code&gt;Concepts&lt;/code&gt; - oval shape) are shared between two or more &lt;strong&gt;Entities&lt;/strong&gt; and form &lt;code&gt;bridge collections&lt;/code&gt;. This is the equivalent notion of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_entity&#34;&gt;bridge table&lt;/a&gt; in relational and entity-relationship theory. A closer examination of the links reveals that they all have the same type, i.e. &lt;code&gt;isRelatedTo&lt;/code&gt;, and &lt;strong&gt;Attributes&lt;/strong&gt; are always connected to &lt;strong&gt;Entities&lt;/strong&gt; with that operator. According to R3DM we are examining information resources at (&lt;strong&gt;S3&lt;/strong&gt;) layer.&lt;/p&gt;
&lt;h3 id=&#34;add-model&#34;&gt;Add Model&lt;/h3&gt;
&lt;p&gt;We can import this concept map or alternatively we can create a new &lt;code&gt;Model&lt;/code&gt; programmatically by passing its name as a parameter to the &lt;code&gt;addModel&lt;/code&gt; function. Then we can use &lt;code&gt;getModelByName&lt;/code&gt; function to get back a Key-Value &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt; representation of the &lt;code&gt;Model&lt;/code&gt; we added to the system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modelName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts-Suppliers Catalog Model&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addModel&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;«&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NETObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Generic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List&lt;span style=&#34;color:#e6db74&#34;&gt;`1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   [System.Collections.Generic.List`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;IAMCore_SharpClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Core_KeyValuePair&lt;span style=&#34;color:#f92672&#34;&gt;]]]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;»&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;get-model&#34;&gt;Get Model&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getModelByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts-Suppliers Catalog Model&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key &lt;code&gt;{0, 3, 13, 256}&lt;/code&gt;, i.e. &lt;strong&gt;Sign&lt;/strong&gt; (&lt;strong&gt;S2&lt;/strong&gt;/&lt;strong&gt;R2&lt;/strong&gt; - &lt;strong&gt;IRep&lt;/strong&gt;), is a reference 4D vector that we use to access the &lt;code&gt;Model&lt;/code&gt; item  and the value is the string we assigned as the name of the &lt;code&gt;Model&lt;/code&gt;. Everything that is stored in AtomicDB has a key with four dimensions (&lt;strong&gt;Environment&lt;/strong&gt;, &lt;strong&gt;System&lt;/strong&gt;, &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Item&lt;/strong&gt;) and a value. Each dimension can be semantically interpreted in a different way, but they are always connected hierarchically. This makes AtomicDB fully symmetrical in terms of values, structures and relationships.&lt;/p&gt;
&lt;h3 id=&#34;add-concepts&#34;&gt;Add Concepts&lt;/h3&gt;
&lt;p&gt;We continue by adding the &lt;code&gt;Concepts&lt;/code&gt; of the &lt;code&gt;Model&lt;/code&gt; programmatically. The two arguments of function &lt;code&gt;addConceptsByName&lt;/code&gt; are the name of the &lt;code&gt;Model&lt;/code&gt; and a list of &lt;code&gt;Concept&lt;/code&gt; names. The first name in the list signifies a &lt;code&gt;Nexus&lt;/code&gt; concept that is used to associate the rest of the concepts in the list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;catalogConceptNames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartCost&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partConceptNames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Part&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartColor&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;supplierConceptNames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Supplier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierAddress&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(catalogConcepts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addConceptsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(partConcepts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addConceptsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(supplierConcepts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addConceptsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, supplierConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing you should notice is that the numbering of dimensions for &lt;code&gt;Concepts&lt;/code&gt; does not follow the previous pattern with the &lt;code&gt;Model&lt;/code&gt; 4D vector. Semantically this means we have a different system that can be interpreted in the following way:&lt;/p&gt;
&lt;p&gt;There are three &lt;code&gt;Groups&lt;/code&gt; with four &lt;code&gt;Concepts&lt;/code&gt; each added to our &lt;code&gt;Model&lt;/code&gt;.  Notice that the first three dimensions of the keys remain constant but the last dimension varies to denote instances of &lt;code&gt;Concepts&lt;/code&gt; that belong to the same &lt;code&gt;Model&lt;/code&gt;. In this case, the &lt;code&gt;Item&lt;/code&gt; dimension of the reference key plays the role of the &lt;code&gt;Concept&lt;/code&gt; and the &lt;code&gt;Context&lt;/code&gt; dimension plays the role of the &lt;code&gt;Model&lt;/code&gt;. The other two dimensions are related possibly to the kind of repository, i.e. we are storing information about models, and our localhost database development environment. Contrast this representation with the previous vector &lt;code&gt;{0, 3, 13, 256}&lt;/code&gt; where the &lt;code&gt;Item&lt;/code&gt; dimension plays the role of the &lt;code&gt;Model&lt;/code&gt;. This indicates that reference vectors in AtomicDB are cleverly inter-related; notice the position of number &lt;code&gt;256&lt;/code&gt; that signifies always the &lt;code&gt;Model&lt;/code&gt; in these 4D vectors.&lt;/p&gt;
&lt;p&gt;Another critical observation is that &lt;code&gt;PartIdentifier&lt;/code&gt; and &lt;code&gt;SupplierIdentifier&lt;/code&gt; &lt;code&gt;Concepts&lt;/code&gt; are members of more than one &lt;code&gt;Group&lt;/code&gt;. These are the &lt;code&gt;Bridge Concepts&lt;/code&gt; and play the same role as the primary and foreign keys in relational data sets. But one of the main differences and a great advantage of this approach is that this time data sets are not duplicated. The same &lt;code&gt;Collection&lt;/code&gt; of items, i.e. data set of an attribute, can be referenced by many &lt;code&gt;Concepts&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-concepts&#34;&gt;Get Concepts&lt;/h3&gt;
&lt;p&gt;Verify that all the concepts have been added to our &lt;code&gt;Model&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getConceptsFromModelName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-collections&#34;&gt;Add Collections&lt;/h3&gt;
&lt;p&gt;With the following &lt;code&gt;addCollectionsAutoMapGroupByName&lt;/code&gt; function &lt;code&gt;Collections&lt;/code&gt; are automatically associated with the &lt;code&gt;Concepts&lt;/code&gt; and a &lt;code&gt;Group&lt;/code&gt; is added. Notice that both &lt;code&gt;Collections&lt;/code&gt; and &lt;code&gt;Models&lt;/code&gt; have been created with the same &lt;code&gt;Environment&lt;/code&gt; and &lt;code&gt;System&lt;/code&gt; dimensions, it is the third dimension &lt;code&gt;Context&lt;/code&gt; that differentiates the type of instances, i.e. items.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(catalogCollections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   addCollectionsAutoMapGroupByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(partCollections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   addCollectionsAutoMapGroupByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(supplierCollections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   addCollectionsAutoMapGroupByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, supplierConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;266&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;267&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And bridging is achieved by having &lt;code&gt;Bridge Collections&lt;/code&gt;, &lt;code&gt;{0,3,15,259}&lt;/code&gt; and &lt;code&gt;{0,3,15,258}&lt;/code&gt; that are equivalent to &lt;code&gt;Bridge Concepts&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-collections&#34;&gt;Get Collections&lt;/h3&gt;
&lt;p&gt;Verify that we have added all the collections to the system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getCollectionsFromModelName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;266&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;267&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-data-values&#34;&gt;Add Data Values&lt;/h3&gt;
&lt;p&gt;Our next step is to add values into a separate system, at the same &lt;code&gt;Environment&lt;/code&gt; with that of &lt;code&gt;Concepts&lt;/code&gt; using the &lt;code&gt;Item&lt;/code&gt; numbers from the &lt;code&gt;Collections&lt;/code&gt; above. First we read relational datasets with &lt;a href=&#34;http://reference.wolfram.com/language/DatabaseLink/ref/SQLSelect.html&#34;&gt;&lt;code&gt;SQLSelect&lt;/code&gt;&lt;/a&gt; function and we form &lt;strong&gt;Records&lt;/strong&gt; that are represented with the &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;&lt;code&gt;List&lt;/code&gt; built-in symbol&lt;/a&gt; of Wolfram Language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;catalogDataSet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partDataSet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;supplierDataSet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we add records with the &lt;code&gt;addRecordsByName&lt;/code&gt; command of our AtomicDB API passing three arguments; the name of the &lt;code&gt;Model&lt;/code&gt;, &lt;code&gt;Concept&lt;/code&gt; names, and the body of relational dataset that we read in the previous step.&lt;/p&gt;
&lt;p&gt;These are the items added to the NX_Catalog nexus collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addRecordsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames, catalogDataSet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are the items added to the NX_Part nexus collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addRecordsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames, partDataSet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are the items added to the NX_Supplier nexus collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addRecordsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, supplierConceptNames, supplierDataSet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;get-data-values&#34;&gt;Get Data Values&lt;/h3&gt;
&lt;p&gt;In order to read back the data values, we use &lt;code&gt;Concepts&lt;/code&gt; and the &lt;code&gt;getItemsFromConceptNames&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;For example to get data &lt;code&gt;Items&lt;/code&gt; from the &lt;strong&gt;Part&lt;/strong&gt; &lt;code&gt;Concepts&lt;/code&gt; we pass the name of the &lt;code&gt;Model&lt;/code&gt; and the &lt;code&gt;Concept&lt;/code&gt; names for the &lt;strong&gt;Part&lt;/strong&gt; &lt;code&gt;Group&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getItemsFromConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bacon&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stretcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cover&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Smoke&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Shifter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;I &lt;span style=&#34;color:#66d9ef&#34;&gt;Brake&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Circles&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sticker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Fire&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Hydrant&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Segment&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Display&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Black&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Silver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Translucent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Cyan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Magenta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Green&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check that although we have nine records, i.e. nine identifiers for &lt;code&gt;Parts&lt;/code&gt; and nine &lt;code&gt;Nexuses&lt;/code&gt; respectively, we have only seven color values or seven &lt;code&gt;Part&lt;/code&gt; names. This is because in relational data model certain values of a column/attribute are repeated but in &lt;code&gt;Associative Data Model&lt;/code&gt; are single instances&lt;/p&gt;
&lt;p&gt;In a similar way, to get data &lt;code&gt;Items&lt;/code&gt; from the &lt;strong&gt;Catalog&lt;/strong&gt; &lt;code&gt;Concepts&lt;/code&gt; we pass the name of the &lt;code&gt;Model&lt;/code&gt; and the &lt;code&gt;Concept&lt;/code&gt; names for the &lt;strong&gt;Catalog&lt;/strong&gt; &lt;code&gt;Group&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getItemsFromConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1082&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1083&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1084&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that values for the &lt;code&gt;PartIdentifier&lt;/code&gt; &lt;code&gt;Bridging Concept&lt;/code&gt; are not duplicated but they are referenced instead by the same 4D key vectors whether we are in Catalog &lt;code&gt;Group&lt;/code&gt; or Part &lt;code&gt;Group&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;assimilation-of-a-table&#34;&gt;Assimilation of a Table&lt;/h2&gt;
&lt;p&gt;So far so good, but in practice everyone is accustomed to the use of tables. Table is the favorite manageable structure and convenient medium of exchanging-exporting/importing datasets. Therefore the challenge is that any alternative solution on data architecture should provide the means to view and handle data in tables with the minimum effort no matter what is the underlying structure. For this reason we continue our example with a comparison of how we retrieve records from a relational table and assimilate this operation to a &lt;code&gt;Group&lt;/code&gt; of items that are represented with a nested &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt; of &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A. Relational&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;
&lt;img alt=&#34;notebook-output-parts table&#34; src=&#34;https://healis.eu/en/post/20150320/parts-table-500x200.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B. Associative&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(nexusMemberItems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getItemsFromConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Part&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partConcepts&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;records &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAnything&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  partConcepts&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nexusMemberItems,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setType&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enGridType&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;«&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NETObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Generic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List&lt;span style=&#34;color:#e6db74&#34;&gt;`1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  [System.Collections.Generic.List`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;IAMCore_SharpClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Core_KeyValuePair&lt;span style=&#34;color:#f92672&#34;&gt;]]]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;»&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; coreKVPL1ToRules &lt;span style=&#34;color:#e6db74&#34;&gt;/@ records@ToArray[];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;res /&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;parts-items-1130x170.jpg&#34; &gt;

&lt;img src=&#34;parts-items-1130x170.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Key/Value records of Part Items&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;review-and-discussion&#34;&gt;Review and Discussion&lt;/h2&gt;
&lt;p&gt;How do we design a data model, how do we connect data, how do we represent information, how do we store or retrieve them ? These are all fundamental questions in data modeling but there is a common key to unlock them. You have to start by defining a primitive information resource, and then understand how one can build complex information structures on top it. And this is because everything in nature or systems follow this kind of abstraction from the simple to the most sophisticated. There are patterns that recur at progressively smaller scales. There are fundamental building blocks that can build higher-order structures.&lt;/p&gt;
&lt;p&gt;For more than thirty years, the data modeling world is dominated by records. Records in the form of a row in a table, or in a form of hierarchically structured XML/JSON documents, or in the form of property-graph nodes. Many consider the fundamental structure of RDF triplet, Subject-Predicate-Object, but this can be seen too as a form of a record that confines you to think in terms of a function-functor that maps information resources from a domain set to information resources of a range set. Neither the nature or reference mechanism of these resources, nor their linkage type are defined in a sufficient or efficient manner.&lt;/p&gt;
&lt;p&gt;An alternative view on data modeling that can extend and enrich RDF is introduced in this article. It is based on &lt;strong&gt;AIR&lt;/strong&gt;, analyzed with R3DM framework, and exemplified with AtomicDB. &lt;strong&gt;AIR&lt;/strong&gt; is the oxygen that makes this database technology breath. It makes it alive and kicking.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/B8A0xiD2gxE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;AIR&lt;/strong&gt; fits perfectly to the duality principle of R3DM conceptual model and the &lt;a href=&#34;https://healis.eu/en/project/r3dm/#symbols-duality-principle&#34;&gt;&lt;strong&gt;Everything is Represented with a Symbol&lt;/strong&gt;&lt;/a&gt; corollary. There is no better example to think about this than digital representations as sequences of binary digits in the internal memory state of our machines. In a digital computer, everything is represented and addressed at the machine level with sequences of 0s and 1s. In order to represent information, Ron Everett managed to conceive in a similar way at a higher abstracted level an identification and addressing schema of information units. He wrapped atomic data types, such as a string or number, and made them the core of these units and he used a four-dimensional space to uniformly address, identify, bind and encode &lt;strong&gt;AIRs&lt;/strong&gt;. Thus in AtomicDB each &lt;strong&gt;AIR&lt;/strong&gt; unit is a self-referenced and uniquely identified item in a 4D space with sets of 4D references to other &lt;strong&gt;AIRs&lt;/strong&gt; for classification purpose, and embedded data values for querying purpose.&lt;/p&gt;
&lt;p&gt;According to R3DM we have three layers of abstraction, the semantic, the sign, and the storage-data layer. The 4D reference type of &lt;strong&gt;AIR&lt;/strong&gt; is the implementation of sign layer and it is bridging the semantic with the storage layer in the most semiotic way. This is a fully apprehensive act of responding to the fact that &lt;strong&gt;atomic data types and data structures cannot play sufficiently both the role of encoding and that of representing information&lt;/strong&gt;. You have to make these two roles distinct. This is exactly what we manage in a beautiful way with these references. The symbolic layer is created in this 4D space and instead of having dissimilar atomic data types and abstract complex data types, you have uniform &lt;strong&gt;AIR&lt;/strong&gt; units and aggregates of them e.g. collections, records, sets and multi-sets that are referenced in exactly the same way .&lt;/p&gt;
&lt;p&gt;This is a completely, new, radical perspective on data modeling. It is a turning point and there has to be ample evidence to support claims that DBMS based on this are superior than their counterparts. We are determined to investigate, enhance, and apply that kind of database technology and connect it to the overall semiotic perspective of R3DM conceptual framework. It is possible that R3DM based on &lt;strong&gt;AIR&lt;/strong&gt; can assimilate all other SQL and noSQL and SPARQL queries and data models in a simpler, more intuitive, faster, more secure, highly consistent, and in a large scale. This uniform structural symmetry based on &lt;strong&gt;AIR&lt;/strong&gt;, both in terms of value representation and bi-directional relationships is perhaps the most innovative feature and what will hopefully make &lt;strong&gt;AIR&lt;/strong&gt; the universal atomic information unit in the whole information science field. If not, I am sure that many other similar paradigms in data modeling will be based on this model, because a whole new unexplored path is now open and unimaginable applications of this technology can be turned into a reality.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-2-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/air-atomic-information-resource-athanassios-i-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/atomicdb-architecture-r3dm-athanassios-i-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Ron Everett in &amp;ldquo;&lt;a href=&#34;https://www.linkedin.com/pulse/introduction-associative-information-systems-n-normal-letennier&#34;&gt;Introduction to Associative Information Systems&lt;/a&gt; - (N) Normal Form&amp;rdquo; post by Jean-Michelle Letennier&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref4:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relational/ER Constructs in Wolfram Language</title>
      <link>https://healis.eu/en/post/20150317/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150317/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#relational-constructs&#34;&gt;Relational Constructs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#product-type&#34;&gt;Product Type&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#tuple-recordrow&#34;&gt;Tuple (Record/Row)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#attribute-fieldcolumn&#34;&gt;Attribute (Field/Column)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#relation-base-relval&#34;&gt;Relation (Base relval)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#view-derived-relvar--result-set&#34;&gt;View (Derived relvar / Result set)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#entity-relationship-er-constructs&#34;&gt;Entity-Relationship (ER) Constructs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#record-representations&#34;&gt;Record Representations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#table-representations&#34;&gt;Table Representations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this series we introduce progressively the art of a new innovative, exhilarating, data modeling methodology that is based on R3DM conceptual framework. We want to engage software developers, architects, data model designers and everyone interested in learning the advantages of applying this method and the main differences from the data models of the past. We start with terms and constructs that most of us are familiar with from the relational database management systems and we dive into some detail of the Atomic Information Resource unit at &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 2&lt;/a&gt;. For coding purposes, we picked &lt;a href=&#34;https://www.wolfram.com/language/&#34;&gt;Wolfram Language&lt;/a&gt;, the 25+ years of development programming language of Mathematica. Wolfram Language combines symbolic, functional and rule-based programming with a vast library of built-in functions, a computational knowledge engine (&lt;a href=&#34;http://www.wolframalpha.com/&#34;&gt;Wolfram alpha&lt;/a&gt;) and a huge database of curated data.&lt;/p&gt;
&lt;h2 id=&#34;relational-constructs&#34;&gt;Relational Constructs&lt;/h2&gt;
&lt;p&gt;The entity-relational data model (ERDM) is still the most popular data model in database management systems. You can think many reasons for this fact but from the user perspective the main reason is the simple and natural way of managing data in tables with rows (records) and columns (attributes). On top of that, SQL is a very powerful and easy to learn programming language that covers completely the relational operators on data sets. In this article various methods of representing the basic constructs of the relational model are demonstrated with Wolfram Language powerful transformations. You may download our &lt;a href=&#34;https://healis.eu/en/post/20150317/R3DM_Part1.nb&#34;&gt;Wolfram Notebook&lt;/a&gt; and try our examples in &lt;a href=&#34;https://lab.wolframcloud.com/app/&#34;&gt;Wolfram Programming Lab&lt;/a&gt; or &lt;a href=&#34;https://develop.wolframcloud.com/app/&#34;&gt;Wolfram Development Platform&lt;/a&gt;. The structured data for our example can be found at our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue&#34;&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;product-type&#34;&gt;Product Type&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In programming languages and type theory, a product of types is another, compounded, type in a structure. The &amp;ldquo;operands&amp;rdquo; of the product are types, and the structure of a product type is determined by the fixed order of the operands in the product. An instance of a product type retains the fixed order, but otherwise may contain all possible instances of its primitive data types. The expression of an instance of a product type will be a tuple, and is called a &amp;ldquo;tuple type&amp;rdquo; of expression. A product of types is a direct product of two or more types - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Product_type&#34;&gt;Product type&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example: &lt;strong&gt;Integer x String x Colour&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Wolfram Language an instance of such a type is represented with the built-in &lt;a href=&#34;http://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt; symbol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partInstanceAsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-01&#34; src=&#34;https://healis.eu/en/post/20150317/notebook01.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;And to check/verify the type for each element of the List we map the function &lt;a href=&#34;http://reference.wolfram.com/language/ref/Head.html&#34;&gt;Head&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;Head&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/@ partInstanceAsList
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out: {Integer, String, RGBColor}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tuple-recordrow&#34;&gt;Tuple (Record/Row)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A tuple is a finite ordered list of elements. In mathematics, an n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer.
In computer science, tuples are directly implemented as product types in most functional programming languages. More commonly, they are implemented as record types, where the components are labeled instead of being identified by position alone. This approach is also used in relational algebra.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In database theory, the relational model uses a tuple definition similar to tuples as functions, but each tuple element is identified by a distinct name, called an attribute, instead of a number; this leads to a more user-friendly and practical notation. A tuple in the relational model is formally defined as a finite function that maps attributes to values. In this notation, attribute-value pairs may appear in any order - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Tuple&#34;&gt;Tuple&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Wolfram Language record abstract data structure is usually represented with the &lt;a href=&#34;http://reference.wolfram.com/language/ref/Association.html&#34;&gt;Association&lt;/a&gt; function, i.e. a symbolically indexed list of &lt;a href=&#34;http://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt;s (key-value pairs).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partInstanceAsAssociation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    partID &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    partName &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    partColor &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt; partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  partInstanceAsAssociation &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Normal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;attribute-fieldcolumn&#34;&gt;Attribute (Field/Column)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The basic relational building block is the domain or data type, usually abbreviated nowadays to type. A tuple is an ordered set of attribute values. An attribute is an ordered pair of attribute name and type name. An attribute value is a specific valid value for the type of the attribute. This can be either a scalar value or a more complex type. A domain describes the set of possible values for a given attribute, and can be considered a constraint on the value of the attribute. Mathematically, attaching a domain to an attribute means that any value for the attribute must be an element of the specified set. Constraints make it possible to further restrict the domain of an attribute - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational_model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our example, two of our attributes &lt;code&gt;partID&lt;/code&gt; is of integer data type and &lt;code&gt;partName&lt;/code&gt; is of string data type. They both take scalar values. But the &lt;code&gt;partColor&lt;/code&gt; attribute is of complex type and is defined in Wolfram Language with the function &lt;a href=&#34;https://reference.wolfram.com/language/ref/RGBColor.html&#34;&gt;RGBColor&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Apply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rule&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#66d9ef&#34;&gt;Keys&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Head&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/@ partInstanceAsList}], {1}]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out: {partID-&amp;gt;Integer, partName-&amp;gt;String, partColor-&amp;gt;RGBColor}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attribute can be seen as a mapping function. It maps a tuple to a value. We can define a function where we pass a single argument which is the association representation of the tuple and we return the specific value of the key. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isIdentifierOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partID&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isNameOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isColorOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partColor&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isIdentifierOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isNameOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isColorOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;relation-base-relval&#34;&gt;Relation (Base relval)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In the relational model, a relation is a (possibly empty) finite set of tuples all having the same finite set of attributes.This set of attributes is more formally called the sort of the relation, or more casually referred to as the set of column names. A tuple is usually implemented as a row in a database table. The fundamental assumption of the relational model is that all data is represented as mathematical n-ary relations, an n-ary relation being a subset of the Cartesian product of n domains. In the mathematical model, reasoning about such data is done in two-valued predicate logic, meaning there are two possible evaluations for each proposition: either true or false (and in particular no third value such as unknown, or not applicable, either of which are often associated with the concept of NULL). Data are operated upon by means of a relational calculus or relational algebra, these being equivalent in expressive power.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A relation is defined as a set of n-tuples. In both mathematics and the relational database model, a set is an unordered collection of unique, non-duplicated items. A table is an accepted visual representation of a relation; a tuple is similar to the concept of a row. It is a set of tuples sharing the same attributes; a set of columns and rows. A relvar is a named variable of some specific relation type, to which at all times some relation of that type is assigned, though the relation may contain zero tuples - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Predicates and the closed world assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A relation consists of a heading and a body. A heading is a set of attributes. A body (of an n-ary relation) is a set of n-tuples. The heading of the relation is also the heading of each of its tuples. The body of a relation is sometimes called its extension. This is because it is to be interpreted as a representation of the extension of some predicate, this being the set of true propositions that can be formed by replacing each free variable in that predicate by a name (a term that designates something). There is a one-to-one correspondence between the free variables of the predicate and the attribute names of the relation heading. Each tuple of the relation body provides attribute values to instantiate the predicate by substituting each of its free variables. The result is a proposition that is deemed, on account of the appearance of the tuple in the relation body, to be true. Contrariwise, every tuple whose heading conforms to that of the relation, but which does not appear in the body is deemed to be false. This assumption is known as the closed world assumption: it is often violated in practical databases, where the absence of a tuple might mean that the truth of the corresponding proposition is unknown - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-02&#34; src=&#34;https://healis.eu/en/post/20150317/notebook02.jpg&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Silver&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Brake for Crop Circles Sticker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Translucent&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cyan&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magenta&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7 Segment Display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;view-derived-relvar--result-set&#34;&gt;View (Derived relvar / Result set)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In a relational database, all data are stored and accessed via relations. Relations that store data are called &amp;ldquo;base relations&amp;rdquo;, and in implementations are called &amp;ldquo;tables&amp;rdquo;. Other relations do not store data, but are computed by applying relational operations to other relations. These relations are sometimes called &amp;ldquo;derived relations&amp;rdquo;. In implementations these are called &amp;ldquo;views&amp;rdquo; or &amp;ldquo;queries&amp;rdquo; - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queryString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT Catalog.catsid,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Suppliers.sname,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Catalog.catpid,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Parts.pname,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Parts.pcolor,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Catalog.catcost
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM Suppliers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  INNER JOIN (Parts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              INNER JOIN [Catalog] ON Parts.pid = Catalog.[catpid]) ON Suppliers.sid = Catalog.[catsid]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE (((Catalog.catpid)=998))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY Catalog.catcost;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, queryString, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;&lt;img alt=&#34;notebook-output-03&#34; src=&#34;https://healis.eu/en/post/20150317/notebook03.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Each database is a collection of related tables; these are also called relations, hence the name &amp;ldquo;relational database&amp;rdquo;. Each table is a physical representation of an entity or object that is in a tabular format consisting of columns and rows - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TableType&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableTypeNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysAccessObjects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysAccessXML&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysACEs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysIMEXColumns&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysIMEXSpecs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNameMap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroupCategories&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroups&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroupToObjects&amp;#34;&lt;/span&gt;, \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneObjectIDs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysObjects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysQueries&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysRelationships&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;View998Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ViewAll&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableInformation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;&lt;img alt=&#34;notebook-output-04&#34; src=&#34;https://healis.eu/en/post/20150317/notebook04.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;entity-relationship-er-constructs&#34;&gt;Entity-Relationship (ER) Constructs&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ER data model is a systematic way of describing and defining a business process. The process is modeled as components (entities) that are linked with each other by relationships that express the dependencies and requirements between them. Entities may have various properties (attributes) that characterize them. Diagrams created to represent these entities, attributes, and relationships graphically are called ER diagrams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced Entity Relationship (EER)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The EER data model includes all of the concepts introduced by the ER model. Additionally it includes the concepts of a subclass and superclass (Is-a), along with the concepts of specialization and generalization. Furthermore, it introduces the concept of a union type or category, which is used to represent a collection of objects that is the union of objects of different entity types - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entity–relationship_model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;record-representations&#34;&gt;Record Representations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You need to maintain two ordered lists, one for the data values and another one for the semantics, i.e. the attribute/column names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  partInstanceAsList
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  attributes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {pid, pname, pcolor}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can combine the two lists in one list of &lt;code&gt;Rules&lt;/code&gt; with the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;attributes, partInstanceAsList&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Rule is the equivalent of a key-value pair, but it is more powerful because in Wolfram Language it is the basic mechanism that is used in transformations. Nevertheless for lookup operations and updating Wolfram researchers added a more powerful construct that is called Association, see below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Triples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let us call a specific part instance partXYZ, if we represent this as the subject resource of a triplet, the list of attributes as the predicates and the list of values as the objects we can take the following triplets&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.org/resource/partXYZ&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;predicate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StringJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.org/attribute/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ attributes;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partInstanceAsList;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Transpose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{subject, predicate, object}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-05&#34; src=&#34;https://healis.eu/en/post/20150317/notebook05.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Directed Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;notebook-output-06&#34; src=&#34;https://healis.eu/en/post/20150317/notebook06.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Tree&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wolfram Language functions are tree data structures that are created in the memory as a contiguous array of pointers, the first to the head and the rest to its successive elements. Take for example the &lt;code&gt;List&lt;/code&gt; we defined, we can present it in a tree form with the command :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TreeForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly we can represent this row of data as a function with three arguments that take values from the Integer, String, and Color domain, e.g. :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partFunction&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;RGBColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TreeForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-07&#34; src=&#34;https://healis.eu/en/post/20150317/notebook07.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Association&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Associations in Wolfram Language are very similar to the &lt;a href=&#34;http://www.topicmapslab.de/articles/TMDM_in_a_nutshell&#34;&gt;Association Type&lt;/a&gt; construct of the Topic Map data model. Each defined association is an instance of an association type. The keys of the association, association role types according to Topic Maps terminology, describe the role type of each value in the association instance. The values of the association, association role players according to Topic Maps terminology, describe the particular instance of the association type.&lt;/p&gt;
&lt;p&gt;The command to perform the association of attributes with their values is the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;attributes&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;partInstanceAsList&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Keys&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {partID, partName, partColor}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Association is a relatively new fundamental construct in Wolfram Language, it acts like a symbolically indexed list. The main reason for using it is to allow highly efficient lookup and updating and also build complex hierarchical structures and other datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. List of Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can easily convert an Association to a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Rules&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Normal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;6. Hypergraph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the following hypergraph representation we keep separate the schema from the data, i.e. the types from instances.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;notebook-output-08&#34; src=&#34;https://healis.eu/en/post/20150317/notebook08.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this hypergraph the &lt;code&gt;$Part&lt;/code&gt; plays the role of the hyperedge (red color) that connects three hypernodes that represent the attributes pid, pname, and pcolor (black color). Similarly for the values we have:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;notebook-output-09&#34; src=&#34;https://healis.eu/en/post/20150317/notebook09.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this hypergraph the &lt;code&gt;$Part991&lt;/code&gt; plays the role of a hyperedge (green color) that connects three hypernodes that represent the values 991, &amp;ldquo;Left Handled&amp;hellip;.&amp;rdquo;, RED (blue color).&lt;/p&gt;
&lt;p&gt;We defined two &lt;code&gt;hyperedges&lt;/code&gt;, one at a layer of concepts to represent the head of the record, and another at the data layer to represent the body of the record.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. EntityPropertyAssociation&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$Part991&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partColor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt; $Part991 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;table-representations&#34;&gt;Table Representations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. List of Lists&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Silver&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Brake for Crop Circles Sticker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Translucent&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cyan&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magenta&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7 Segment Display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. List of Associations&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ;;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bacon&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stretcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cover&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Smoke&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Shifter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Black&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Silver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;I &lt;span style=&#34;color:#66d9ef&#34;&gt;Brake&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Circles&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sticker&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Translucent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Cyan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Magenta&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Fire&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Hydrant&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cap&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Segment&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Display&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Green&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3. Dataset&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ;;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ body //Dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;notebook-output-10&#34; src=&#34;https://healis.eu/en/post/20150317/notebook10.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Constraints provide one method of implementing business rules in the database. SQL implements constraint functionality in the form of check constraints. Constraints restrict the data that can be stored in relations. These are usually defined using expressions that result in a boolean value, indicating whether or not the data satisfies the constraint - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Constraints can apply to single attributes, to a tuple (restricting combinations of attributes) or to an entire relation. Since every attribute has an associated domain, there are constraints (domain constraints). The two principal rules for the relational model are known as entity integrity and referential integrity - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-1-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://community.wolfram.com/groups/-/m/t/464147&#34;&gt;Wolfram Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
