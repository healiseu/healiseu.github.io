<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data_model on HEALIS</title>
    <link>https://healis.eu/en/tags/data_model/</link>
    <description>Recent content in Data_model on HEALIS</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; HEALIS - Athanassios I. Hatzis, {year}</copyright>
    <lastBuildDate>Wed, 12 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://healis.eu/en/tags/data_model/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Associative Semiotic Hypergraph based on R3DM/S3DM</title>
      <link>https://healis.eu/en/post/20170412/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170412/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#abstract&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#r3dm-definition&#34;&gt;R3DM Definition&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architecture-overview&#34;&gt;Architecture Overview&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#conceptual-perspective&#34;&gt;Conceptual Perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logical-perspective&#34;&gt;Logical Perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#instances-perspective&#34;&gt;Instances Perspective&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#semantic-perspective&#34;&gt;Semantic Perspective&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#environment-type-systems&#34;&gt;Environment Type Systems&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#database-type-system-dbs&#34;&gt;Database Type System (DBS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#model-type-system-mts&#34;&gt;Model Type System (MTS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#entity-type-system-ets&#34;&gt;Entity Type System (ETS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#attribute-type-system-ats&#34;&gt;Attribute Type System (ATS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#items-type-system-its&#34;&gt;Items Type System (ITS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#value-type-system-vts&#34;&gt;Value Type System (VTS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-sources-type-system-dss&#34;&gt;Data Sources Type System (DSS)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#link-type-system-lts&#34;&gt;Link Type System (LTS)&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#functional-operations&#34;&gt;Functional Operations&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#get-anything&#34;&gt;Get Anything&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-anything&#34;&gt;Add anything&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#filtering&#34;&gt;Filtering&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#case1-condition-and-sorting-order&#34;&gt;Case1: Condition and Sorting Order&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#case2-condition-and-cleansing&#34;&gt;Case2: Condition and Cleansing&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#case3-graph-traversal&#34;&gt;Case3: Graph Traversal&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-end&#34;&gt;The End&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In this last post for this series &lt;code&gt;Associative Semiotic Hypergraph&lt;/code&gt; technology is introduced to the public with a demonstration of a fully functional prototype that is built in &lt;a href=&#34;http://orientdb.com/&#34;&gt;OrientDB&lt;/a&gt; multi-model DBMS and coded with &lt;a href=&#34;http://www.wolfram.com/language/?source=nav&#34;&gt;Wolfram Language&lt;/a&gt;. This is the first working prototype that is based on &lt;strong&gt;&lt;a href=&#34;https://healis.eu/en/project/r3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;&lt;/strong&gt; conceptual, computational semiotics framework, the theoretical framework behind our technology.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;It is remarkable how we turned an electronic device that is processing only 1s and 0s to an inseparable intelligent companion and trustworthy assistant. There is a long &lt;a href=&#34;http://www.wolframalpha.com/docs/timeline/computable-knowledge-history-6.html&#34;&gt;historical record of technological achievements&lt;/a&gt; in the development of computable information and the interactive engagement of the user. In every step of our technological progress we made systems with better performance, pushing towards a simpler, extensible, modifiable, scalable and generic logic. And the key behind this imaginative use of computers is the captivating abstract thinking process of the human brain. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; conceptual and logical framework is an attempt to model databases with the very same intimate mechanism that creates models. In this endeavor, there could not be a better theory as the base of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; other than Aristotle&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiosis&#34;&gt;Semiosis&lt;/a&gt;. &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiotics&#34;&gt;Semiotics&lt;/a&gt; is the study of meaning-making and it binds semantics with symbolic representation and transformation which is the bread and butter of computer programs and digital storage. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is not only conceived along this theory, it is also founded on those semiotic principles.&lt;/p&gt;
&lt;h3 id=&#34;r3dm-definition&#34;&gt;R3DM Definition&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;R3DM - &lt;strong&gt;Representation(Resource, Realization)&lt;/strong&gt; or S3DM - &lt;strong&gt;Sign(Signified, Signifier)&lt;/strong&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Computational_semiotics&#34;&gt;computational semiotic&lt;/a&gt; framework with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Morphism&#34;&gt;mathematical morphism&lt;/a&gt; that formalizes the architectural design of &lt;a href=&#34;http://hypergraphdb.org/&#34;&gt;associative&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_model_of_data&#34;&gt;hypergraph&lt;/a&gt; databases.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Following this definition we will unfold &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; and explain its main characteristics starting with the classic three layered database architecture.&lt;/p&gt;
&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h2&gt;
&lt;p&gt;One of the main purposes of &lt;a href=&#34;https://www.zachman.com/ea-articles-reference/58-conceptual-logical-physical-it-is-simple-by-john-a-zachman&#34;&gt;Zachman&amp;rsquo;s conceptual, logical, and physical database design&lt;/a&gt;, is to provide data independence at the application-user level. The three layers are in descending levels of abstraction where the conceptual model is the most abstract and the physical data model the least abstract or most concrete.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Conceptual_schema&#34;&gt;conceptual model&lt;/a&gt; usually refers to the domain of discourse and describes the semantics of the application without any reference to the database technology. On the contrary, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Logical_data_model&#34;&gt;logical data model&lt;/a&gt; implements the concept model in terms of abstract data types, (e.g. List, Set, Map, Graph). In the following list you can see the correspondence between these two layers for five popular data models.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conceptual Schema&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Predicates&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entities and Relationships&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_Maps&#34;&gt;Topics, Associations and Occurences&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;Subjects, Objects and Predicates&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_database&#34;&gt;Classes and Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logical Structure&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;n-ary Relation, Tuples and Attributes&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Table, Rows and Columns&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypergraph&#34;&gt;Hyperedges, Hypernodes&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_databasehttps://en.wikipedia.org/wiki/Type_system&#34;&gt;Nodes, Edges and Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_(computer_science)&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both conceptual and logical layers should act independently of the underlying &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_engine&#34;&gt;database engine&lt;/a&gt;, i.e. &lt;a href=&#34;https://en.wikipedia.org/wiki/Physical_data_model&#34;&gt;physical data model&lt;/a&gt;. The following is an indicative list of what is normally included in this layer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Physical Data Storage Organization&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_engine#Data_orientation_and_clustering&#34;&gt;Data orientation (rows/columns, correlational)&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_structure&#34;&gt;Data structure&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_storage&#34;&gt;Object storage&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Block_(data_storage)&#34;&gt;Block storage&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_cluster&#34;&gt;Data cluster&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_index&#34;&gt;Database index&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conceptual-perspective&#34;&gt;Conceptual Perspective&lt;/h3&gt;
&lt;p&gt;Regarding to the conceptual data model &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is using terms that are well-known among database experts, i.e. &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt;. In &lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt; segment we can view instances of &lt;strong&gt;Supplier&lt;/strong&gt;, &lt;strong&gt;Part&lt;/strong&gt; and &lt;strong&gt;Catalog&lt;/strong&gt; &lt;code&gt;Entities&lt;/code&gt; and the &lt;code&gt;Attributes&lt;/code&gt; that describe them. Remember that in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; play the role of abstract concepts that we associate to create models of our data, they are NOT containers or instances of data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity&#34;&gt;&lt;code&gt;Entity&lt;/code&gt;&lt;/a&gt; is something that has a discrete, independent existence,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. &lt;em&gt;Eiffel Tower&lt;/em&gt; (Building), &lt;em&gt;Apple Inc&lt;/em&gt; (Company), &lt;em&gt;Porsche 993 GT2 with a specific VIN&lt;/em&gt; (Car)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Attribute_(computing)&#34;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; is a piece of information that describes an &lt;code&gt;Entity&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. (referring to the above &lt;code&gt;Entities&lt;/code&gt;) &lt;em&gt;300m&lt;/em&gt; (Height),  &lt;em&gt;US$215.639&lt;/em&gt; (Revenue), &lt;em&gt;WP0ZZZ99ZTS392124&lt;/em&gt; (VIN)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/#sect-association&#34;&gt;&lt;code&gt;Association&lt;/code&gt;&lt;/a&gt; represents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An N-ary relation of an &lt;code&gt;Entity&lt;/code&gt; with its &lt;code&gt;Attributes&lt;/code&gt; (see &lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;e.g. Part{ID, Description, Color, Weight}&lt;/li&gt;
&lt;li&gt;e.g. &lt;em&gt;Part998 {998, &amp;ldquo;Fire Hydrant Cap&amp;rdquo;, &amp;ldquo;Red&amp;rdquo;, 7.2}&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;An N-ary relationship between one or more &lt;code&gt;Entities&lt;/code&gt;, sharing one or more common &lt;code&gt;Attributes&lt;/code&gt;, that is defined by the roles they play in the association (see &lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;e.g. Film {StarringActor1, StarringActor2, Director}&lt;/li&gt;
&lt;li&gt;e.g. FilmID { ActorID1, ActorID2, DirectorID }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.1&lt;/strong&gt; - Result sets from SQL queries on Supplier, Part and Catalog tables. The same result sets are drawn in &lt;a href=&#34;#fig1&#34;&gt;&lt;strong&gt;Fig.1&lt;/strong&gt;&lt;/a&gt; with a hypergraph and in &lt;a href=&#34;#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; segment they are assimilated with AIR units in &lt;code&gt;Associations&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;logical-perspective&#34;&gt;Logical Perspective&lt;/h3&gt;
&lt;p&gt;Changing now our perspective with a focus on the logical building blocks, &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; can be viewed as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypergraph&#34;&gt;hypergraph&lt;/a&gt;, &lt;a href=&#34;#fig1&#34;&gt;&lt;strong&gt;Fig.1&lt;/strong&gt;&lt;/a&gt;, comprised of three data structures &lt;code&gt;hyperatoms&lt;/code&gt; (hypernodes), &lt;code&gt;hyperbonds&lt;/code&gt; (hyperedges), and &lt;code&gt;hyperlinks&lt;/code&gt; (edges).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;hyperbond&lt;/code&gt; represents graphically a complex data structure (e.g. tuple, JSON object). The role of &lt;code&gt;hyperbond&lt;/code&gt; is to connect a set of &lt;code&gt;hyperatoms&lt;/code&gt; in order to form associations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;hyperatom&lt;/code&gt; represents graphically an atomic data item (e.g. record value, a key-value pair of a JSON object).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;hyperlink&lt;/code&gt; graphically speaking is a &lt;a href=&#34;http://mathworld.wolfram.com/GraphEdge.html&#34;&gt;Graph Edge&lt;/a&gt; that connects bidirectionally a &lt;code&gt;hyperatom&lt;/code&gt; to &lt;code&gt;hyperbond&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;SPC_Hypergraph_with_values-1024x362.jpg&#34; alt=&#34;A hypergraph of Supplier Part Catalog for Part No. 998 with its four Catalog entries and its four Suppliers. Hyperedges are in green and hyperatoms are in red&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;SPC Hypergraph&lt;/h4&gt;
  &lt;p&gt;
    A hypergraph of Supplier Part Catalog for Part No. 998 with its four Catalog entries and its four Suppliers. Hyperedges are in green and hyperatoms are in red
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;instances-perspective&#34;&gt;Instances Perspective&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Entity&lt;/code&gt; or &lt;code&gt;Attribute&lt;/code&gt; in R3DM/S3DM are &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Class_(computer_programming)&#34;&gt;Types&lt;/a&gt;&lt;/strong&gt; and represent uniquely a single &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics)&#34;&gt;Set&lt;/a&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Instance_(computer_science)&#34;&gt;Instances&lt;/a&gt;&lt;/strong&gt; also known as items (see also &lt;a href=&#34;https://healis.eu/en/post/20170412/#items-type-system-its&#34;&gt;Items Type System&lt;/a&gt;). &lt;code&gt;Entities&lt;/code&gt; or &lt;code&gt;Attributes&lt;/code&gt; can be thought as &lt;strong&gt;references&lt;/strong&gt; to &lt;code&gt;Collections&lt;/code&gt;, &lt;a href=&#34;#fig2&#34;&gt;&lt;strong&gt;Fig.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;Meta-Domain-Instance%20Levels-600x407.jpg&#34; alt=&#34;Fig. 2 - Meta Level and Domain Level, i.e. Domain Abstractions and Specializations are abstract types, e.g. a Person, a Credit Card, an Item and refer to the Instance Level. The Instance Level includes domain particular instances, e.g. Tom the person, his Credit Card with No: XXXX, an Item ZZZZ that he purchased&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Domain Abstractions and Specializations&lt;/h4&gt;
  &lt;p&gt;
    Fig. 2 - Meta Level and Domain Level, i.e. Domain Abstractions and Specializations are abstract types, e.g. a Person, a Credit Card, an Item and refer to the Instance Level. The Instance Level includes domain particular instances, e.g. Tom the person, his Credit Card with No: XXXX, an Item ZZZZ that he purchased
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Collection&lt;/code&gt; (set of instances) is a generic container for items with no duplicates. A &lt;code&gt;Collection&lt;/code&gt; can have one or more representative concepts (&lt;code&gt;Entities&lt;/code&gt; or &lt;code&gt;Attributes&lt;/code&gt;). We have two types of collection, &lt;code&gt;Datum Collection&lt;/code&gt; and &lt;code&gt;Nexus Collection&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Datum Item&lt;/code&gt; (datum) can be thought as an instance of a particular &lt;code&gt;Attribute&lt;/code&gt; type that points to a single atomic piece of data (atomic value). A &lt;code&gt;Datum Collection&lt;/code&gt; contains &lt;code&gt;Datum Items&lt;/code&gt; (data). In our hypergraph perspective &lt;code&gt;Datum Items&lt;/code&gt; are represented with &lt;code&gt;hyperatoms&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Nexus Item&lt;/code&gt; (nexus) can be thought as an instance of a particular &lt;code&gt;Entity&lt;/code&gt; type with a role of associating, binding together, &lt;code&gt;Datum Items&lt;/code&gt;. A &lt;code&gt;Nexus Collection&lt;/code&gt; is a type of collection which holds &lt;code&gt;Nexus items&lt;/code&gt; (nexuses). The graphic equivalent of &lt;code&gt;Nexus Items&lt;/code&gt; is the &lt;code&gt;hyperbond&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ponder for a moment here, it is a common ground to consider a type, i.e. class, as a container of its instances. But that is not the case in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; where abstract concepts (types) have an independent existence and refer to collections, i.e. the containers of instances.&lt;/p&gt;
&lt;p&gt;This separation between containers of items (instances) and abstract concepts (types) is extremely important as it decouples the data modeling layer from the data collections that are ingested into the database
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;h3 id=&#34;semantic-perspective&#34;&gt;Semantic Perspective&lt;/h3&gt;
&lt;p&gt;Data, e.g. names, codes, quantities, time, location, categorical are meaningless without context. They are separated, isolated bits of information with no related context. Data inherits more meaning when the data are processed within a context. This is exactly the purpose of &lt;a href=&#34;https://en.wikipedia.org/wiki/Semantic_data_model&#34;&gt;semantic data modeling&lt;/a&gt;, a data modeling technique to define the meaning of data within the context of its interrelationships with other data. Semantic models can be either fact oriented, e.g. RDF triples, or object oriented e.g. Entities and Relationships. The disadvantage of the second is that you have to manage dissimilar 2D structures (tables) that are dependent of a fixed database schema and not connected or related directly. The drawbacks of the first are the labeled edges, the modeling of n-ary relations, the inseparable mixture of plain and typed literal triples that represent values with RDF links that represent resources, the &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-642-02121-3_39&#34;&gt;Semantic Web Identity Crisis&lt;/a&gt; to name a few. &lt;strong&gt;R3DM/S3DM assimilates both fact and object-oriented views by defining an atomic information reference unit which is based on semiotics&lt;/strong&gt;. Naturally, with this solution we escape from many of the above problems. This is one of the most innovative aspects of this framework.&lt;/p&gt;
&lt;h4 id=&#34;object-oriented-view&#34;&gt;Object-Oriented View&lt;/h4&gt;
&lt;p&gt;The most commercially successful semantic model is &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entity-Relationship&lt;/a&gt; data model. In the first post of this series we discussed the conceptual data model that Chen is using to represent the tuples of &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;relational data model&lt;/a&gt;. &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000100/#fig2&#34;&gt;Fig. 2&lt;/a&gt; and &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000100/#fig3&#34;&gt;Fig. 3&lt;/a&gt; shows that Chen is using either Entity Set, Attributes and Value Sets or Entity Set(s), Relationship Set(s), Attributes and Value Sets to form an &lt;code&gt;Association&lt;/code&gt;. The key point here is that &lt;strong&gt;Entity set and Attributes in both cases are separated from the Value sets&lt;/strong&gt;. Indeed, this is the design principle that is followed in any modern relational DBMS. There is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_dictionary&#34;&gt;data dictionary&lt;/a&gt;, also known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Metadata_repository&#34;&gt;metadata repository&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Metadata_registry&#34;&gt;metadata registry&lt;/a&gt;, that stores among other things names and descriptions of Entity Sets, Relationships and their Attributes that construct a &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_schema&#34;&gt;database schema&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Semantically speaking, the database schema and its &lt;a href=&#34;https://en.wikipedia.org/wiki/Metadata&#34;&gt;metadata&lt;/a&gt; describe the meaning of its instances, i.e. Entity relations, Entity relationships and Attribute Value sets. For this purpose, in the current OrientDB implementation of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; each one of these sets is &lt;strong&gt;defined explicitly&lt;/strong&gt; and is represented with an &lt;a href=&#34;http://orientdb.com/docs/last/Concepts.html#class&#34;&gt;OrientDB Class&lt;/a&gt;. There is another reason we keep separate the actual data values. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; uses a &lt;strong&gt;single instance value-based storage&lt;/strong&gt;. Each unique value in the raw data is stored only once. With this feature there is some resemblance with the data model of &lt;a href=&#34;https://en.wikipedia.org/wiki/Correlation_database&#34;&gt;Correlation Database&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;network-graph-view&#34;&gt;Network Graph View&lt;/h4&gt;
&lt;p&gt;While it is helpful to view the higher-level &lt;strong&gt;&lt;a href=&#34;https://healis.eu/en/post/20170412/#environment-type-systems&#34;&gt;Type System Architecture of R3DM/S3DM&lt;/a&gt;&lt;/strong&gt; through an object-oriented filter, it is important to understand that at a low-level &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; consists of nodes and edges. In particular, the prototype framework we describe in this article is built on top of &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Document-and-graph-model.html#the-graph-model&#34;&gt;OrientDB Graph engine&lt;/a&gt; with &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Working-with-graphs.html#lightweight-edges&#34;&gt;Lightweight Edges&lt;/a&gt; and a hypergraph structure, &lt;a href=&#34;#fig9&#34;&gt;&lt;strong&gt;Fig.9&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In previous posts of this series we have made a comparison of the &lt;code&gt;Association&lt;/code&gt; construct with &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000100&#34;&gt;Relational tuples&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000101/&#34;&gt;Topic Map Association&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000102/&#34;&gt;RDF triplet&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000103/&#34;&gt;Property Graph nodes and edges&lt;/a&gt; and &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000104/http://orientdb.com/docs/master/Graph-Editor.html&#34;&gt;Qlik binary coded records&lt;/a&gt;. Such semantic models, with the exception of Qlik technology, are fact oriented and semantics are typically expressed by binary or n-ary relations between data elements. In &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; the graph is usually undirected with &lt;a href=&#34;https://healis.eu/en/post/20170412/#link-type-system-lts&#34;&gt;symmetric and typed binary relations&lt;/a&gt; between the &lt;code&gt;hyperbond&lt;/code&gt; and the &lt;code&gt;hyperatom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This low-level graph view of the system can be implemented in many ways. For example you can have two constructs, e.g. tables, one for the nodes and another for the edges (see the work of Simon Williams in &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000103/#associative-model&#34;&gt;Sentences database&lt;/a&gt;), or you can use a key-value store that saves tuples (&lt;a href=&#34;http://blog.hostilefork.com/brief-tour-graphd-scott-meyer/&#34;&gt;Graphd&lt;/a&gt; the back store of Freebase) or you can also have a native triple store.&lt;/p&gt;
&lt;h4 id=&#34;semiotic-view&#34;&gt;Semiotic View&lt;/h4&gt;
&lt;p&gt;So far we have seen how we can contextualize data using &lt;code&gt;Association&lt;/code&gt; construct. This is the mechanism to assimilate tuples of data. Nevertheless, values in a tuple or literals/resources in a triple are meaningless in isolation. In the first case you need either the head and the type of the relation (table and column names), in the second case you need the label and direction on the edge (Predicate) that connects the Subject and the Object to give meaning in the binary relation. To quote Ron Everett,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every table is a silo. Every cell is an atom of data with no awareness of its contexts, or how it fits in to anything beyond its cell. It can be located by external intelligence but on its own it’ s a “dumb” participant in the system - the ultimate disconnected micro - fragment accessible only by knowing the column and the record it exists in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and according to him,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The alternative is to replace the data elements with information at the atomic level of the system. Instead of a data atom in a table, we have an information atom with no table.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; Ron Everett &lt;!-- raw HTML omitted --&gt; in &amp;ldquo;&lt;a href=&#34;https://www.linkedin.com/pulse/introduction-associative-information-systems-n-normal-letennier&#34;&gt;Introduction to Associative Information Systems&lt;/a&gt; - (N) Normal Form&amp;rdquo;
{: .small}&lt;/p&gt;
&lt;p&gt;Therefore the trick here is to build &lt;code&gt;Associations&lt;/code&gt;, based on a uniform representation of its members and the roles they play, in a similar way to Topic Map &lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/#sect-association&#34;&gt;Association items&lt;/a&gt;. For this purpose we have introduced &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000104/#air-units&#34;&gt;Atomic Information Resource (AIR)&lt;/a&gt; unit in the previous post of this series. Now we will view &lt;code&gt;AIR&lt;/code&gt; with more detail and in action. For each &lt;code&gt;AIR&lt;/code&gt; unit we maintain a record of information. For simplicity and for demonstration purposes, the &lt;code&gt;AIR&lt;/code&gt; unit in the current implementation of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is equivalent to &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Record-ID.html&#34;&gt;OrientDB Record ID&lt;/a&gt; (RID).&lt;/p&gt;
&lt;p&gt;For example the &lt;code&gt;Supplier&lt;/code&gt; result set in &lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt; is transformed to an associative set and each cell of &lt;code&gt;Supplier&lt;/code&gt; table is represented with an &lt;code&gt;RID&lt;/code&gt; (&lt;a href=&#34;#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; - &lt;em&gt;Get &lt;code&gt;Supplier&lt;/code&gt; Associative Set&lt;/em&gt;). Columns of &lt;code&gt;Part&lt;/code&gt; table, e.g. &lt;code&gt;pid&lt;/code&gt; (&lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;), and any of its values are also represented with &lt;code&gt;RIDs&lt;/code&gt; (&lt;a href=&#34;#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; - &lt;em&gt;Get &lt;code&gt;Datum&lt;/code&gt; where Parts.pid=998&lt;/em&gt;). The single &lt;code&gt;Part&lt;/code&gt; tuple where &lt;code&gt;pid=998&lt;/code&gt;, (&lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;) is considered to be an instance of a &lt;code&gt;Entity&lt;/code&gt; and has an &lt;code&gt;RID&lt;/code&gt; too (&lt;a href=&#34;#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt; - &lt;em&gt;Get tuples that this Datum is part of&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;This way AIR information representation serves two principal functions; information resource identification and location addressing, i.e. dereferencing and retrieval.
{: .btn .btn&amp;ndash;success}&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.2&lt;/strong&gt; - Associative sets are presented with values or in RID (reference key) format. The equivalent result sets are drawn in the hypergraph of &lt;a href=&#34;#fig1&#34;&gt;&lt;strong&gt;Fig.1&lt;/strong&gt;&lt;/a&gt; and fetched with SQL in (&lt;a href=&#34;#code1&#34;&gt;&lt;strong&gt;Code.1&lt;/strong&gt;&lt;/a&gt;) segment. The document record in OrientDB with RID &lt;strong&gt;#60:7&lt;/strong&gt; is an instance of &lt;code&gt;prtID Attribute&lt;/code&gt; collection. We can read the &lt;code&gt;Datum&lt;/code&gt; value, find which &lt;code&gt;Attribute&lt;/code&gt; collection (class) it belongs to, and get its siblings, i.e. other &lt;code&gt;Datum&lt;/code&gt; items of the class. In the same &lt;code&gt;Datum&lt;/code&gt; record we can see its row context associates, i.e. &lt;code&gt;Nexus Items&lt;/code&gt;. These are the five tuples it participates, one &lt;code&gt;Part&lt;/code&gt; relation (&lt;strong&gt;#52:7&lt;/strong&gt;) and four &lt;code&gt;Catalog&lt;/code&gt; relationships (&lt;strong&gt;#53:7, #53:11, #53:12, #53:16&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/getFromDataItem&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;p&gt;There are two steps towards this transformation of tuples. First we create a &lt;a href=&#34;https://healis.eu/en/post/20170412/#value-type-system-vts&#34;&gt;value type system&lt;/a&gt;, i.e. a place where we store atomic values based on their type. And second we apply a uniform representation on everything, i.e. data and metadata. This turns our DBMS to a &lt;strong&gt;Reference Database Management System (RDBMS)&lt;/strong&gt;, i.e. redefining this way the acronym of &lt;strong&gt;Relational Database Management Systems&lt;/strong&gt;. Remember that deep down to an atomic level we store single instance values. &lt;strong&gt;It is only the reference keys to those values that we manage&lt;/strong&gt;. This enables a cellular granularity on &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. Metadata with a high granularity allows for deeper, more detailed, and more structured information and enables greater levels of technical manipulation.&lt;/p&gt;
&lt;p&gt;This uniform &lt;em&gt;Representation&lt;/em&gt; and management of abstract information &lt;em&gt;Resources&lt;/em&gt; (Models, Data Sources, Metadata) with AIR units in &lt;strong&gt;R3DM&lt;/strong&gt; is the &lt;em&gt;Realization&lt;/em&gt; of the fact that underneath there is a separate storage layer of single instance data values.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S3DM&lt;/strong&gt; framework is based on the powerful theory of the semiotic triangle also known as the triangle of meaning or the triangle of reference. We use key references (&lt;em&gt;Signs-Symbols&lt;/em&gt;), to represent abstract things (&lt;em&gt;Signified Concepts&lt;/em&gt;) in our mind. We encode these into data containers, i.e. forms that the sign takes, for the storage of data values (&lt;em&gt;Signifiers&lt;/em&gt;), &lt;a href=&#34;#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt;&lt;/a&gt;.
{: .btn .btn&amp;ndash;success}&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;r3dm_semiotic_triangle_porsche-1200x839.jpg&#34; alt=&#34;Fig. 3 - R3DM/S3DM Triangle of Meaning, Semiotic Triangle, Triangle of Reference&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 3 - R3DM/S3DM Triangle of Meaning, Semiotic Triangle, Triangle of Reference
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This trilateral principle permits a uniform treatment of semantics, syntax, storage and structure of information based on symbolic representation. The very same principle is applied to the architectural design of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; type system.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;h2 id=&#34;environment-type-systems&#34;&gt;Environment Type Systems&lt;/h2&gt;
&lt;p&gt;In the previous section we have seen that &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; can be seen from many perspectives. At a lower level we have a network graph of nodes and edges. In OrientDB &lt;a href=&#34;http://orientdb.com/docs/last/Tutorial-Document-and-graph-model.html#the-graph-model&#34;&gt;graph model&lt;/a&gt; these are instances of the &amp;ldquo;V&amp;rdquo; (for Vertex) and &amp;ldquo;E&amp;rdquo; (for Edges) classes. At a higher level, based on those two classes, we build a hierarchically organized &lt;a href=&#34;https://en.wikipedia.org/wiki/Namespace&#34;&gt;namespace&lt;/a&gt; in OrientDB &lt;a href=&#34;http://orientdb.com/docs/last/Paginated-Local-Storage.html&#34;&gt;paginated local storage&lt;/a&gt; (plocal). This is the database &lt;code&gt;Environment&lt;/code&gt;, the highest organizational structure, a logical container that it may represent a business environment, a user environment, even a programming environment. Its role is to group related classes into eight &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system&#34;&gt;type systems&lt;/a&gt;. Seven of them manage vertices and one of them is for the different types of edges, &lt;a href=&#34;#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;. The process of initializing and defining the structures in OrientDB database is fully automated by reading the schema of the type system from a JSON file, &lt;a href=&#34;#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;OrientDB_R3DM_REG.png&#34; alt=&#34;Fig. 4 (Left)- Information about R3DM/S3DM hierarchical type system stored in *DBRegistry* subsystem&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 4 (Left)- Information about R3DM/S3DM hierarchical type system stored in &lt;em&gt;DBRegistry&lt;/em&gt; subsystem
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;R3DM_REG_JSON.png&#34; alt=&#34;Fig. 5 (Right) - Schema of R3DM/S3DM hierarchical type system in a JSON format. For simplicity, in the current implementation Items Type System (ITS) is not present. Entity Type System (ETS) and Attribute Type System (ATS) OrientDB classes compose this missing system&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 5 (Right) - Schema of R3DM/S3DM hierarchical type system in a JSON format. For simplicity, in the current implementation Items Type System (ITS) is not present. Entity Type System (ETS) and Attribute Type System (ATS) OrientDB classes compose this missing system
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi/&#34;&gt;DBAPI project&lt;/a&gt; in Wolfram Language has been extended to cover all R3DM/S3DM functionality. For example, an &lt;code&gt;Environment&lt;/code&gt; is added with &lt;code&gt;OR3addEnvironment&lt;/code&gt; command, (&lt;a href=&#34;#code3&#34;&gt;&lt;strong&gt;Code.3&lt;/strong&gt;&lt;/a&gt;), and we retrieve any metadata about it with the &lt;code&gt;OR3getAnything&lt;/code&gt; command (&lt;a href=&#34;#code4&#34;&gt;&lt;strong&gt;Code.4&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3addEnvironment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mp\R3DM_TypeSystem.json&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R3DB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{: .notice}
&lt;strong&gt;Code.3&lt;/strong&gt; - We pass the schema file (JSON), the name of the database (R3DB), the username and the password. Metadata for the newly created classes are stored in the &lt;code&gt;DBRegistry&lt;/code&gt; subsystem &lt;a href=&#34;#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.4&lt;/strong&gt; - Retrieval of Environment System Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command. By default it is returning a List of references (RIDs) unless we specify a specific format for the structure e.g. Dataset.&lt;/p&gt;
&lt;h3 id=&#34;database-type-system-dbs&#34;&gt;Database Type System (DBS)&lt;/h3&gt;
&lt;p&gt;Classes that start with the letters DB such as &lt;code&gt;DBLog&lt;/code&gt;, &lt;code&gt;DBUser&lt;/code&gt;, &lt;code&gt;DBOperation&lt;/code&gt;, and &lt;code&gt;DBUserRole&lt;/code&gt; are used to store the user &lt;code&gt;Environment&lt;/code&gt; metadata useful for administrative, security, and monitoring purposes (&lt;a href=&#34;#code5&#34;&gt;&lt;strong&gt;Code.5&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.5&lt;/strong&gt; - Retrieval of Primitive Database Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command as a List of references or as as Dataset.&lt;/p&gt;
&lt;p&gt;We have already seen the &lt;code&gt;DBRegistry&lt;/code&gt; subsystem where information about the schema of &lt;code&gt;Environment&lt;/code&gt; is stored, &lt;a href=&#34;#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;. Another class &lt;code&gt;DBObject&lt;/code&gt; is used for casting multi-type role playing at a node (&lt;code&gt;Object&lt;/code&gt; is an instance of a &lt;code&gt;Type&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;model-type-system-mts&#34;&gt;Model Type System (MTS)&lt;/h3&gt;
&lt;p&gt;Next we will examine how we can add a new domain model in the system. Usually at this stage the database expert draws the entity-relationship diagram of the model which is a graph of &lt;code&gt;Entities&lt;/code&gt;, &lt;code&gt;Attributes&lt;/code&gt; and relationships. In &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt; we present a similar diagram for our Supplier-Part-Catalog data set and in &lt;a href=&#34;#fig9&#34;&gt;&lt;strong&gt;Fig.9&lt;/strong&gt;&lt;/a&gt; we have drawn the same diagram in OrientDB &lt;a href=&#34;http://orientdb.com/docs/master/Graph-Editor.html&#34;&gt;Graph Editor&lt;/a&gt;. The main difference with ER diagrams is that relationships/relations here have a direct representation on the system with the edges (&lt;strong&gt;R3DM/S3DM&lt;/strong&gt; links) and dictionary metadata are explicitly defined and stored in &lt;code&gt;MTS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;R3DM_SPC_model.png&#34; alt=&#34;Fig. 6 - The schema diagram of SupplierPartCatalog Model (red). Entities (blue boxes) and Attributes (green ovals) are written with their full names (blue) and short names (purple) that take positions outside each shape. Entity boxes inside carry their type (red) and their super-type (blue). While inside each Attribute oval super-type (black) and value type (red) is written. We can also see two types of links. LTS_EA (blue) connects Entities with Attributes and LTS_WP (brown) is linking the model with its Entities.&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 6 - The schema diagram of SupplierPartCatalog Model (red). Entities (blue boxes) and Attributes (green ovals) are written with their full names (blue) and short names (purple) that take positions outside each shape. Entity boxes inside carry their type (red) and their super-type (blue). While inside each Attribute oval super-type (black) and value type (red) is written. We can also see two types of links. LTS_EA (blue) connects Entities with Attributes and LTS_WP (brown) is linking the model with its Entities.
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We have &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/media/SupplierPartCatalogue/json/.json&#34;&gt;serialized the domain model&lt;/a&gt; graph of &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt; in the same manner as the schema of the type system and the task of loading and building the model is simplified again with the following single function call (&lt;a href=&#34;#code6&#34;&gt;&lt;strong&gt;Code.6&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3addDomainModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mp\SPCModel.json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{: .notice}
&lt;strong&gt;Code.6&lt;/strong&gt; - The only parameter required in &lt;em&gt;OR3addDomainModel&lt;/em&gt; is the &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/media/SupplierPartCatalogue/json/.json&#34;&gt;schema definition file&lt;/a&gt; of the model. This function call will instruct OrientDB to create classes for all &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; of the &lt;code&gt;Model&lt;/code&gt;. All the metadata from the schema, &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;, will be stored in &lt;code&gt;MTS&lt;/code&gt; and will be available for retrieval with &lt;code&gt;OR3getAnything&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Using the powerful &lt;code&gt;OR3getAnything&lt;/code&gt; function in the context of &lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi/&#34;&gt;DBAPI&lt;/a&gt;&lt;code&gt;OrientR3S3&lt;/code&gt; package we can retrieve metadata, &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;, for any Model, Entity or Attribute. The result set can be in the form of Wolfram Language &lt;a href=&#34;http://reference.wolfram.com/language/ref/Dataset.html&#34;&gt;&lt;code&gt;Dataset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://reference.wolfram.com/language/ref/List.html&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;http://reference.wolfram.com/language/ref/Graph.html&#34;&gt;&lt;code&gt;Graph&lt;/code&gt;&lt;/a&gt; data structures (&lt;a href=&#34;#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.7&lt;/strong&gt; - Three examples of the &lt;code&gt;OR3getAnything&lt;/code&gt; function where we retrieve OrientDB records for &lt;code&gt;Models&lt;/code&gt;, &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; respectively. The function call is translated to OrientDB RESTful API command and the JSON response from the DBMS is transformed to Wolfram Language data structures for further processing and visualization. It worths noticing the hypergraph representation which is the equivalent graphical form of Model&amp;rsquo;s schema diagram in &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/getModelEntityAttribute/&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;p&gt;To maintain compatibility and interoperability with ontologies and other vocabularies for structured data on the Internet such as &lt;a href=&#34;http://schema.org/&#34;&gt;schema.org&lt;/a&gt; we categorize &lt;code&gt;Entities&lt;/code&gt; and &lt;code&gt;Attributes&lt;/code&gt; of any &lt;code&gt;Model&lt;/code&gt; according to OrientDB classes that typically form the hierarchical structure of &lt;code&gt;Entity Type System&lt;/code&gt; and &lt;code&gt;Attribute Type System&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;entity-type-system-ets&#34;&gt;Entity Type System (ETS)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Entity Types&lt;/code&gt; usually refer to abstract entity types. They are used to create schema templates for popular entity types. Metadata are kept in DB_Registry and as usual they can be retrieved with &lt;code&gt;OR3getAnything&lt;/code&gt; command (&lt;a href=&#34;#code8&#34;&gt;&lt;strong&gt;Code.8&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.8&lt;/strong&gt; - Retrieval of Entity Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;Entity Type&lt;/code&gt; we can view its type and its super-type as well as the name and shortname that can be accessed.&lt;/p&gt;
&lt;p&gt;As an example consider the schema diagram of &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt; where we have three entity sub types, &lt;strong&gt;&lt;code&gt;ORGANIZATION&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;PRODUCT&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;DATACATALOGUE&lt;/code&gt;&lt;/strong&gt;  where we classify the &lt;code&gt;Supplier&lt;/code&gt;, &lt;code&gt;Product&lt;/code&gt; and &lt;code&gt;Catalogue&lt;/code&gt; entity collections respectively (see &lt;a href=&#34;#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;, &lt;em&gt;Get Entities section&lt;/em&gt;).&lt;/p&gt;
&lt;h3 id=&#34;attribute-type-system-ats&#34;&gt;Attribute Type System (ATS)&lt;/h3&gt;
&lt;p&gt;Similarly, &lt;code&gt;Attribute Types&lt;/code&gt; refer to abstract attribute types. Each attribute can participate in one or more &lt;code&gt;Entity Types&lt;/code&gt; and that is how schema templates are formed. In our &lt;code&gt;Supplier-Product-Catalogue&lt;/code&gt; data model, &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;, attributes can be classified as &lt;strong&gt;&lt;code&gt;CATEGORICAL&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Supplier_status&lt;/code&gt;, &lt;code&gt;Part_color&lt;/code&gt;, &lt;code&gt;Part_unit&lt;/code&gt;, &lt;code&gt;Catalog_check&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;IDENTITY&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Supplier_id&lt;/code&gt;, &lt;code&gt;Part_id&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Part_nameEN&lt;/code&gt;, &lt;code&gt;Supplier_nameEN&lt;/code&gt;, &lt;code&gt;Supplier_city&lt;/code&gt;, &lt;code&gt;Supplier_country&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;QUANTITY&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Part_weight&lt;/code&gt;, &lt;code&gt;Catalog_price&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;COUNT&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Catalog_total&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;TIME&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Catalog_date&lt;/code&gt;) and &lt;strong&gt;&lt;code&gt;DESCRIPTION&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;Supplier_address&lt;/code&gt;). The following &lt;code&gt;OR3getAnything&lt;/code&gt; command demonstrates how we can draw metadata about this type system (&lt;a href=&#34;#code9&#34;&gt;&lt;strong&gt;Code.9&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.9&lt;/strong&gt; - Retrieval of Attribute Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;Attribute Type&lt;/code&gt; we can view its type and its super-type as well as the name and shortname that can be accessed.&lt;/p&gt;
&lt;p&gt;Each of these attribute classes above (see &lt;a href=&#34;#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;, &lt;em&gt;Get Attributes section&lt;/em&gt;) refers to an attribute collection of data items that has a value type. For example, &lt;code&gt;Supplier_status&lt;/code&gt;, &lt;code&gt;Part_id&lt;/code&gt;, &lt;code&gt;Catalog_total&lt;/code&gt;, &lt;code&gt;Supplier_id&lt;/code&gt; are of value type &lt;strong&gt;INT&lt;/strong&gt; (integer) and &lt;code&gt;Part_weight&lt;/code&gt; is of value type &lt;strong&gt;REA&lt;/strong&gt; (real).&lt;/p&gt;
&lt;h3 id=&#34;items-type-system-its&#34;&gt;Items Type System (ITS)&lt;/h3&gt;
&lt;p&gt;This is the system of items collections, i.e. where &lt;code&gt;Entity&lt;/code&gt; and &lt;code&gt;Attribute&lt;/code&gt; reference instances are stored (see &lt;a href=&#34;https://healis.eu/en/post/20170412/#instances-perspective&#34;&gt;Instances Perspective&lt;/a&gt;). In our demo these are represented with OrientDB classes, &lt;a href=&#34;#fig7&#34;&gt;&lt;strong&gt;Fig.7&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;OrientDB_entity_attribute_item_records-770x584.png&#34; alt=&#34;Fig. 7 - Two Select SQL queries with OrientDB Studio manager. The first one returns four Entity records and the second one returns four Attribute records. Each Entity and Attribute record is represented with an item from a collection. These items in turn are represented with a reference key which is OrientDB @rid&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Fig. 7 - Two Select SQL queries with OrientDB Studio manager. The first one returns four Entity records and the second one returns four Attribute records. Each Entity and Attribute record is represented with an item from a collection. These items in turn are represented with a reference key which is OrientDB @rid
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;For simplicity&amp;rsquo;s sake we have not constructed &lt;code&gt;ITS&lt;/code&gt; separately but we used OrientDB classes instead to populate them with instances of &lt;code&gt;Entity&lt;/code&gt; and &lt;code&gt;Attribute&lt;/code&gt; types. Nevertheless the idea is the same, segregate the abstract concepts, &lt;strong&gt;TYPES&lt;/strong&gt;, from the domain particular &lt;strong&gt;INSTANCES&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;value-type-system-vts&#34;&gt;Value Type System (VTS)&lt;/h3&gt;
&lt;p&gt;According to our Semiotic View (&lt;a href=&#34;#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt;&lt;/a&gt;) key &lt;strong&gt;REFERENCES&lt;/strong&gt; (RIDs) represent &lt;strong&gt;RESOURCES&lt;/strong&gt; from &lt;code&gt;DBS&lt;/code&gt;, &lt;code&gt;MTS&lt;/code&gt;, &lt;code&gt;ETS&lt;/code&gt;, &lt;code&gt;ATS&lt;/code&gt;, &lt;code&gt;ITS&lt;/code&gt;, &lt;code&gt;LTS&lt;/code&gt;, &lt;code&gt;DSS&lt;/code&gt; and encoded form of data, i.e. &lt;strong&gt;REALIZATION&lt;/strong&gt; of data values. These values have domains that are based on OrientDB primitive data types, e.g. &lt;em&gt;Integer&lt;/em&gt;, &lt;em&gt;Double&lt;/em&gt;, &lt;em&gt;DateTime&lt;/em&gt;, &lt;em&gt;String&lt;/em&gt; and types  that are defined in the &lt;strong&gt;Value Type System&lt;/strong&gt; (&lt;code&gt;VTS&lt;/code&gt;),  &lt;a href=&#34;#code10&#34;&gt;&lt;strong&gt;Code.10&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.10&lt;/strong&gt; - Retrieval of Value Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;Attribute Type&lt;/code&gt; we can view its RID, type, super-type, name, shortname and the &lt;a href=&#34;http://orientdb.com/docs/master/Types.html&#34;&gt;OrientDB data type&lt;/a&gt; that is based on.&lt;/p&gt;
&lt;p&gt;Data values are stored together in ordered &lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics)&#34;&gt;sets&lt;/a&gt; based on &lt;code&gt;Value Types&lt;/code&gt;, e.g. all integers in one set (&lt;code&gt;VTS_Integer&lt;/code&gt;), identifiers in another (&lt;code&gt;VTS_Encoded&lt;/code&gt;), and so on. This optimizes the access and management of values. Each &lt;code&gt;Item Collection&lt;/code&gt; is a subset of values, i.e. a subset of a value set, &lt;a href=&#34;#fig8&#34;&gt;&lt;strong&gt;Fig.8&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;OrientDB-four%20values%20of%20supplierID-943x202.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Figure 8:&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;{: .notice}
Fig.8 - A subset of the &lt;code&gt;VTS_Integer&lt;/code&gt; value set. This record set is obtained with OrientDB SQL select command. Each one of these records is pointed from a &lt;code&gt;datum&lt;/code&gt; item of the &lt;code&gt;Supplier_id&lt;/code&gt; collection (see &lt;a href=&#34;#fig7&#34;&gt;&lt;strong&gt;Fig.7&lt;/strong&gt;&lt;/a&gt;) using the &lt;a href=&#34;http://orientdb.com/docs/master/Types.html&#34;&gt;OrientDB Link type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elements of both &lt;code&gt;Value Sets&lt;/code&gt; and &lt;code&gt;Item Collections&lt;/code&gt; are unique, i.e. a single instance of each one. In OrientDB this is implemented by setting &lt;a href=&#34;http://orientdb.com/docs/master/SB-Tree-index.html&#34;&gt;SB-Tree index with UNIQUE keys&lt;/a&gt; in both &lt;code&gt;Value set&lt;/code&gt; and &lt;code&gt;Item Collection&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;data-sources-type-system-dss&#34;&gt;Data Sources Type System (DSS)&lt;/h3&gt;
&lt;p&gt;Yet there is another type system in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; framework that is reserved for the input of data sets, the &lt;code&gt;Data Sources Type System&lt;/code&gt; (DSS). A &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_set&#34;&gt;&lt;code&gt;Data Set&lt;/code&gt;&lt;/a&gt; is considered to be a number of related collections that usually correspond to the contents of &lt;a href=&#34;https://en.wikipedia.org/wiki/Flat_file_database&#34;&gt;flat files&lt;/a&gt; or database tables. During the process of adding a &lt;code&gt;Data Set&lt;/code&gt;we do not store the values but only the structure and properties, &lt;a href=&#34;#code11&#34;&gt;&lt;strong&gt;Code.11&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.11&lt;/strong&gt; - Demonstration of the &lt;code&gt;OR3addDataSet&lt;/code&gt; command with three parameters, the name of the new DataSet that will be created, the working path and the filenames of the flat files to inspect. This function call will instruct OrientDB to create a new class to store information about the structure of these flat files. These metadata will be available for retrieval with &lt;code&gt;OR3getAnything&lt;/code&gt; command (&lt;a href=&#34;#code12&#34;&gt;&lt;strong&gt;Code.12&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.12&lt;/strong&gt; - Retrieval of a &lt;code&gt;DataSet&lt;/code&gt; structure, e.g. name, shortname, type, supertype, path, table names, table types, column names, etc, with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DSS&lt;/code&gt; system.&lt;/p&gt;
&lt;h3 id=&#34;link-type-system-lts&#34;&gt;Link Type System (LTS)&lt;/h3&gt;
&lt;p&gt;Last but not least the aforementioned &lt;a href=&#34;https://healis.eu/en/post/20170412/#network-graph-view&#34;&gt;&lt;strong&gt;symmetric and typed binary relation&lt;/strong&gt;&lt;/a&gt; is a bidirectional link, i.e. &lt;code&gt;hyperlink&lt;/code&gt;, that is used to connect a &lt;code&gt;hyperatom&lt;/code&gt; to a &lt;code&gt;hyperbond&lt;/code&gt; to form &lt;a href=&#34;https://healis.eu/en/post/20170412/#conceptual-perspective&#34;&gt;&lt;code&gt;Associations&lt;/code&gt;&lt;/a&gt;. We have two kinds of &lt;code&gt;hyperlinks&lt;/code&gt;, directed and undirected. Directed links are used to form directed associations of a specific type, e.g. &lt;code&gt;Entity&lt;/code&gt;-&lt;code&gt;Attribute&lt;/code&gt;, &lt;code&gt;Whole&lt;/code&gt;-&lt;code&gt;Part&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;-&lt;code&gt;Instance&lt;/code&gt; &lt;a href=&#34;#fig9&#34;&gt;&lt;strong&gt;Fig.9&lt;/strong&gt;&lt;/a&gt;. Depending on which direction we traverse the link, outgoing or incoming we have two different labels to assist us in reading and understanding the semantics of the binary relation. In all cases metadata about the &lt;code&gt;Link Type System&lt;/code&gt; (LTS) are currently stored in &lt;code&gt;DB_Registry&lt;/code&gt; and as usual we can retrieve link types with &lt;code&gt;OR3getAnything&lt;/code&gt; command, &lt;a href=&#34;#code13&#34;&gt;&lt;strong&gt;Code.13&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.13&lt;/strong&gt; - Retrieval of Link Types with &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;code&gt;DB_Registry&lt;/code&gt;. For each &lt;code&gt;ASSOCIATION&lt;/code&gt; type we can view its supertype, name, short name, and the labels for outgoing or incoming traversal direction.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

&lt;img src=&#34;OrientDB_GraphEditor_SPC_Model-1269x625.png&#34; alt=&#34;Fig.9 - Schema diagram of Supplier-Part-Catalog model in OrientDB Graph Editor. Red edges connect Entities to Attributes and green edge connect the Model to Entities. We can also view the type of R3DM/S3DM link in LTS system as a label on the edge&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Figure 9:&lt;/h4&gt;
  &lt;p&gt;
    Fig.9 - Schema diagram of Supplier-Part-Catalog model in OrientDB Graph Editor. Red edges connect Entities to Attributes and green edge connect the Model to Entities. We can also view the type of R3DM/S3DM link in LTS system as a label on the edge
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;functional-operations&#34;&gt;Functional Operations&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;OrientR3S3 Package&lt;/strong&gt; extends &lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi_project/orientdb-package/&#34;&gt;OrientDB RESTful API package&lt;/a&gt; in Mathematica with a powerful functional set of commands that cover all operations in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. These operations fall in four categories, &lt;strong&gt;get&lt;/strong&gt;, &lt;strong&gt;update&lt;/strong&gt;, &lt;strong&gt;delete&lt;/strong&gt;, &lt;strong&gt;add&lt;/strong&gt; (&lt;a href=&#34;%7B%7Bbase_path%7D%7D/dbapi_project/guda&#34;&gt;GUDA&lt;/a&gt;). The main idea here is to define standard &lt;a href=&#34;http://reference.wolfram.com/language/tutorial/SettingUpFunctionsWithOptionalArguments.html&#34;&gt;&lt;strong&gt;named optional arguments&lt;/strong&gt;&lt;/a&gt; for any of these functional categories and then allow their values, default or mandatory, to be given using Wolfram Language transformation rules. We have already started viewing examples of this functional approach to data management with the &lt;code&gt;OR3getAnything&lt;/code&gt; command, &lt;a href=&#34;#code2&#34;&gt;&lt;strong&gt;Code.2&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code4&#34;&gt;&lt;strong&gt;Code.4&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code5&#34;&gt;&lt;strong&gt;Code.5&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code7&#34;&gt;&lt;strong&gt;Code.7&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code8&#34;&gt;&lt;strong&gt;Code.8&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code9&#34;&gt;&lt;strong&gt;Code.9&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code10&#34;&gt;&lt;strong&gt;Code.10&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code12&#34;&gt;&lt;strong&gt;Code.12&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;#code13&#34;&gt;&lt;strong&gt;Code.13&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-anything&#34;&gt;Get Anything&lt;/h3&gt;
&lt;p&gt;By varying the named optional arguments we pass to &lt;code&gt;OR3getAnything&lt;/code&gt; public function of the &lt;strong&gt;OrientR3S3 Package&lt;/strong&gt;, &lt;a href=&#34;#code14&#34;&gt;&lt;strong&gt;Code.14&lt;/strong&gt;&lt;/a&gt;, we can retrieve or search for anything in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; and we can also ask to &lt;strong&gt;return&lt;/strong&gt; the result in a specified format e.g. &lt;code&gt;Dataset&lt;/code&gt;, &lt;code&gt;References&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, and &lt;code&gt;Associations&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;
(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Search&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:01&amp;#34;&lt;/span&gt;, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prtName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:02&amp;#34;&lt;/span&gt;, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Acme Widget Washer&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Systems&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SYSTEM&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;, debug&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, check&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PRIMITIVE&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;, debug&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASSOCIATION&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:19&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VALUE&amp;#34;&lt;/span&gt;,       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MODEL&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENTITY&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:02&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ATTRIBUTE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:01&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATASET&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:01&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TABLE&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25:01&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMN&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mapping&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;,         get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;,         get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bigraph&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;supplierMRules, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssociationWithValueTypes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;supplierMRules, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mapping&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssociationWithNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Items&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Operations&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entities&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:5&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entities&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attributes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Model&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attributes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RulesWithNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attributes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:5&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whole&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;70:1&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RulesWithNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;,    values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;,       values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;,       values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;58:0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:2&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FieldsDataset&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:3&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Collections&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50:11&amp;#34;&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DataItems&amp;#34;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;References&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Association&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AssociationWithFields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60:7&amp;#34;&lt;/span&gt;,  get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nexuses&amp;#34;&lt;/span&gt;,     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dataset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{: .notice}
&lt;strong&gt;Code.14&lt;/strong&gt; - Examples of the &lt;code&gt;OR3getAnything&lt;/code&gt; command from &lt;strong&gt;OrientR3S3 Wolfram Language package&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;add-anything&#34;&gt;Add anything&lt;/h3&gt;
&lt;p&gt;We have not reached the development phase of integrating all &lt;strong&gt;add&lt;/strong&gt; operation in an &lt;code&gt;OR3addAnything&lt;/code&gt; function of &lt;strong&gt;OrientR3S3 Package&lt;/strong&gt;. Instead of this unified function we have defined many others such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addEnvironment&lt;/code&gt; &lt;em&gt;[ envstruct, envname, usrname, usrpwd ]&lt;/em&gt; - &lt;a href=&#34;#code13&#34;&gt;Code13&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addDomainModel&lt;/code&gt; &lt;em&gt;[ jsonFileName]&lt;/em&gt; - &lt;a href=&#34;#code6&#34;&gt;Code6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addDataSet&lt;/code&gt; &lt;em&gt;[ datasetName, dataSetPath, fileNames]&lt;/em&gt; - &lt;a href=&#34;#code11&#34;&gt;Code11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, we have seen how we can add an &lt;a href=&#34;https://healis.eu/en/post/20170412/#environment-type-systems&#34;&gt;Environment Type System&lt;/a&gt;, a &lt;a href=&#34;https://healis.eu/en/post/20170412/#model-type-system-mts&#34;&gt;Domain Model&lt;/a&gt; and a &lt;a href=&#34;https://healis.eu/en/post/20170412/#data-sources-type-system-dss&#34;&gt;Data Source&lt;/a&gt;. The last two and those that follow are repetitive actions in data analytics lifecycle, i.e. &lt;strong&gt;data sources import&lt;/strong&gt;, &lt;strong&gt;modeling&lt;/strong&gt;, &lt;strong&gt;mapping&lt;/strong&gt;, &lt;strong&gt;ingestion&lt;/strong&gt;,  [&lt;strong&gt;filtering and aggregation&lt;/strong&gt;][].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addMapping&lt;/code&gt; &lt;em&gt;[columns, attributes, mappingRules]&lt;/em&gt; - &lt;a href=&#34;#code15&#34;&gt;Code15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a problem of matching the Columns of a Table or in general fields of a data set with the Attributes of an Entity in a data model.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;p&gt;We can have fields from multiple data sources that are mapped in the same model. The following code section &lt;a href=&#34;#code15&#34;&gt;Code15&lt;/a&gt; demonstrates how we perform the mapping of the &lt;code&gt;Columns&lt;/code&gt; from the three &lt;code&gt;Tables&lt;/code&gt; of a data set that we added in &lt;a href=&#34;#code12&#34;&gt;Code12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.15&lt;/strong&gt; demonstrates the mapping of data fields onto &lt;code&gt;Attributes&lt;/code&gt; in three steps. &lt;strong&gt;Step1:&lt;/strong&gt; retrieve metadata from the &lt;code&gt;Data Set&lt;/code&gt; and the &lt;code&gt;Model&lt;/code&gt;, &lt;strong&gt;Step2:&lt;/strong&gt; specify the mapping rules, &lt;strong&gt;Step3:&lt;/strong&gt; store the mapping.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/addMapping&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;p&gt;Mapping is necessary in order to proceed with the data ingestion. This allows seamless integration of data from multiple data sources on the model we design in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. The following three &lt;strong&gt;add&lt;/strong&gt; operations are used in populating &lt;code&gt;Entity&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; items collections with reference instances and the &lt;code&gt;Value Type System&lt;/code&gt; with data values. Records, i.e. tuples, are assimilated by creating associations (&lt;a href=&#34;#code16&#34;&gt;Code16&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addValue&lt;/code&gt; &lt;em&gt;[className, propertyValue, propertyName]&lt;/em&gt; - &lt;a href=&#34;#code16&#34;&gt;Code16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addNexus&lt;/code&gt; &lt;em&gt;[className]&lt;/em&gt; - &lt;a href=&#34;#code16&#34;&gt;Code16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OR3addEdge&lt;/code&gt;  &lt;em&gt;[edgeClass, fromItem, toItem]&lt;/em&gt; - &lt;a href=&#34;#code16&#34;&gt;Code16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;strong&gt;Code.16&lt;/strong&gt; demonstrates the ingestion of three data sources (TSV files). First we read headers and body from each file in memory. Then we &lt;strong&gt;get&lt;/strong&gt; the mapping of &lt;code&gt;Columns&lt;/code&gt; from the stored &lt;code&gt;Dataset&lt;/code&gt; onto the &lt;code&gt;Attributes&lt;/code&gt; of each &lt;code&gt;Entity&lt;/code&gt; and finally we &lt;strong&gt;add&lt;/strong&gt; values, collections items and associations.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/addValues&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;filtering&#34;&gt;Filtering&lt;/h2&gt;
&lt;p&gt;It should have become apparent that &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; operates in a different way than other database models. Instead of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_definition_language&#34;&gt;Data definition language&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_manipulation_language&#34;&gt;Data manipulation language&lt;/a&gt; or a Query language (&lt;a href=&#34;https://en.wikipedia.org/wiki/SQL&#34;&gt;SQL&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/SPARQL&#34;&gt;SPARQL&lt;/a&gt;) the functional, uniform set of commands that we have seen in the previous section due to the consistent structure of its type systems and the &lt;code&gt;AIR&lt;/code&gt; units makes it easier to manipulate data and elements of the database.&lt;/p&gt;
&lt;p&gt;One of the most characteristic features of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is the ability to filter data in a seamless standard way instead of accessing data with a query plan which may vary between database models.
{: .btn .btn&amp;ndash;info}&lt;/p&gt;
&lt;p&gt;This filtering operation is similar to &lt;a href=&#34;http://www.qlik.com/us/products/qlikview&#34;&gt;QlikView&lt;/a&gt; and we will make a contrast with the same data set and example case we used in the &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000104/#explorefilter-data-via-selections&#34;&gt;5th article of this series&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;case1-condition-and-sorting-order&#34;&gt;Case1: Condition and Sorting Order&lt;/h3&gt;
&lt;p&gt;In this case we are looking for the &lt;code&gt;Supplier&lt;/code&gt; that has the minimum &lt;code&gt;Catalog&lt;/code&gt; &lt;code&gt;Price&lt;/code&gt; for a &lt;code&gt;Red Fire Hydrant Cap&lt;/code&gt; and we want to retrieve &lt;em&gt;supID&lt;/em&gt;, &lt;em&gt;supName&lt;/em&gt;, &lt;em&gt;supCity&lt;/em&gt;, &lt;em&gt;supCountry&lt;/em&gt;, &lt;em&gt;catPrice&lt;/em&gt;, &lt;em&gt;catQuantity&lt;/em&gt;, &lt;em&gt;prtID&lt;/em&gt;, &lt;em&gt;prtName&lt;/em&gt;, and &lt;em&gt;prtColor&lt;/em&gt;. The following &lt;a href=&#34;#code17&#34;&gt;SQL SELECT query&lt;/a&gt; and &lt;a href=&#34;#code18&#34;&gt;SPARQL query&lt;/a&gt; retrieve a result set using the relational or the RDF data model respectively.&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code.17&lt;/strong&gt; - SQL query: sort &lt;code&gt;Catalog&lt;/code&gt; prices for a &lt;code&gt;Red Fire Hydrant Cap&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; suppliers.sid, suppliers.sname, suppliers.scountry,
       &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catcost, &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catqnt,
       parts.pid, parts.pname, parts.pcolor
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;   suppliers
       &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; (parts
                   &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;]
                           &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; parts.pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catpid)
               &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; suppliers.sid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catsid
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt;  (( ( parts.pid ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; ))
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catalog&lt;/span&gt;.catcost;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{: .notice}
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code.18&lt;/strong&gt; - SPARQL query: sort &lt;code&gt;Catalog&lt;/code&gt; prices for a &lt;code&gt;Red Fire Hydrant Cap&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supName &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supCountry
       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catQuantity
       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtName &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtColor &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt dc:identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^^&lt;/span&gt;xsd:int .
    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt rdf:label &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtName .
    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:color &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prtColor .            

    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasPart &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;prt .
    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:cost &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice
    OPTIONAL &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:quantity &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catQuantity .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;cat wd:hasVendor &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup .
    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup rdf:label &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supName .
    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;sup &lt;span style=&#34;color:#66d9ef&#34;&gt;schema&lt;/span&gt;:country &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;supCountry
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;catPrice)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{: .notice}
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code. 19&lt;/strong&gt; - We have coded two solutions for the testing case using our &lt;code&gt;DBAPI&lt;/code&gt; &lt;code&gt;OrientR3S3&lt;/code&gt; package. In the first one (see condensed form in &lt;a href=&#34;#code20&#34;&gt;Code20&lt;/a&gt;) &lt;code&gt;Catalog Tuples&lt;/code&gt; are filtered then sorted with a single command ! The first tuple in the resulting set is the one we are looking for. Then we use filtering on &lt;code&gt;Part&lt;/code&gt; and &lt;code&gt;Supplier&lt;/code&gt; sets to obtain other information. Finally we project and we &lt;code&gt;Join&lt;/code&gt; all three tuples deleting any duplicates. In the second solution we start by filtering &lt;code&gt;Catalog&lt;/code&gt; collections, then we find the &lt;code&gt;Datum&lt;/code&gt; with the minimum &lt;code&gt;Catalog price&lt;/code&gt;. Then we filter &lt;code&gt;Catalog&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; and &lt;code&gt;Part&lt;/code&gt; tuples, we project and join the final tuples.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/filteringCase&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code.20&lt;/strong&gt; R3DM/S3DM Filtering. This is the condensed version of &lt;a href=&#34;#code19&#34;&gt;Code.19&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;    {&lt;span style=&#34;color:#66d9ef&#34;&gt;SUP&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;PRT&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;CAT&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;spcModel, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Entities&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    prtID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;spcModel, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prtID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
    fval1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prtID, find&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;998&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;


    minCatPriceTuple &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SortBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
             &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CAT&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fval1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getValue&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[[3]] &amp;amp;][[1]]&lt;/span&gt;

    catTuple &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; minCatPriceTuple &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getValue&lt;/span&gt;
    fval2    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; minCatPriceTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;

    supTuple&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SUP&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fval2, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;

    prtTuple&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR3getAnything&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;from&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PRT&lt;/span&gt;, get&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuples&amp;#34;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fval1, values&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;][[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;

    prtTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ;; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;catTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ;; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;supTuple&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DeleteDuplicates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case2-condition-and-cleansing&#34;&gt;Case2: Condition and Cleansing&lt;/h3&gt;
&lt;p&gt;This is a case of detecting and correcting an inaccurate value from a record set that is returned by specifying a condition.&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code. 21&lt;/strong&gt; - This is an example of cleansing in two phases, detection and correction. Here we can spot the error by filtering collection sets with the condition &lt;code&gt;prtName=Acme Widget Washer&lt;/code&gt;. There are two values in &lt;code&gt;prtUnit&lt;/code&gt; collection &lt;code&gt;kg&lt;/code&gt; and &lt;code&gt;kb&lt;/code&gt;. The second one should be &lt;code&gt;kg&lt;/code&gt;, it is a typographical error. We can fix this by deleting the &lt;code&gt;hyperlink&lt;/code&gt; that connects the &lt;code&gt;nexus 52:3&lt;/code&gt; (&lt;code&gt;red hyperbond&lt;/code&gt;), with the &lt;code&gt;datum kb&lt;/code&gt; (&lt;code&gt;green hyperatom&lt;/code&gt;), and then adding a new &lt;code&gt;hyperlink&lt;/code&gt; from &lt;code&gt;52:3&lt;/code&gt; to &lt;code&gt;datum 64:1&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/dataCleansing&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;h3 id=&#34;case3-graph-traversal&#34;&gt;Case3: Graph Traversal&lt;/h3&gt;
&lt;p&gt;This is how we perform graph traversal in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;. Instead of visiting each vertex in the graph we filter &lt;code&gt;hyperbonds&lt;/code&gt; on account of the &lt;code&gt;hyperatoms&lt;/code&gt; they share.&lt;/p&gt;
&lt;p&gt;{: .notice}
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
&lt;strong&gt;Code. 22&lt;/strong&gt; - We start by specifying a condition, e.g. visiting a single &lt;code&gt;hyperatom&lt;/code&gt;. This is a green node on the &lt;strong&gt;first hypergraph&lt;/strong&gt; with the label &lt;code&gt;Acme Widget Washer&lt;/code&gt;. Now we can get &lt;code&gt;hyperbonds&lt;/code&gt; (red nodes) and find all its siblings. This is also a visual representation of &lt;code&gt;Part&lt;/code&gt; tuples. There are two &lt;code&gt;Part&lt;/code&gt; items with the description &lt;code&gt;Acme Widget Washer&lt;/code&gt;. One has &lt;code&gt;Silver&lt;/code&gt; color, the other is &lt;code&gt;Red&lt;/code&gt; and both of them weigh &lt;code&gt;142.88kg&lt;/code&gt;. In the same hypergraph we have also two identifiers &lt;code&gt;993&lt;/code&gt; and &lt;code&gt;994&lt;/code&gt; these are &lt;code&gt;prtID Attribute&lt;/code&gt; values that are shared with &lt;code&gt;Catalog Entity&lt;/code&gt; tuples. Therefore in the &lt;strong&gt;second hypergraph&lt;/strong&gt; we have filtered &lt;code&gt;Catalog&lt;/code&gt; tuples and we have drawn three of them that are related to these two &lt;code&gt;Part&lt;/code&gt; items. This time there are common &lt;code&gt;hyperatoms&lt;/code&gt;, those with a supplier identifier (1081, 1084), that are shared between &lt;code&gt;Catalog&lt;/code&gt; and &lt;code&gt;Supplier&lt;/code&gt;. In the &lt;strong&gt;third hypergraph&lt;/strong&gt; we get a complete 360 degrees view of our case by filtering the &lt;code&gt;Supplier Entity&lt;/code&gt;. Now we can see that there are two &lt;code&gt;Suppliers&lt;/code&gt; one located in USA that supplies both &lt;code&gt;Part&lt;/code&gt; items and the other in &lt;code&gt;UK&lt;/code&gt; that supplies only the &lt;code&gt;Silver Acme Widget Washer&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://test.healis.eu/post000107/graphTraversal&#34;&gt;View Code Frame&lt;/a&gt;
{: .btn .btn&amp;ndash;small}&lt;/p&gt;
&lt;p&gt;In all three cases we have demonstrated that there are two ways to present the resulting data set from filtering. We can either return item collections, i.e. sets of values for each &lt;code&gt;Attribute&lt;/code&gt; we are interested in, or projected tuples from each &lt;code&gt;Entity&lt;/code&gt; separately or in a consolidated multi-grid flat form.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have presented &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; data modeling framework from a multi-perspective view. The building blocks of &lt;a href=&#34;https://healis.eu/en/post/20170412/#conceptual-perspective&#34;&gt;&lt;strong&gt;conceptual&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#logical-perspective&#34;&gt;&lt;strong&gt;logical&lt;/strong&gt;&lt;/a&gt; perspective are paired up. &lt;a href=&#34;https://healis.eu/en/post/20170412/#instances-perspective&#34;&gt;&lt;strong&gt;Types are separated from instances&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#semantic-perspective&#34;&gt;&lt;strong&gt;semantics&lt;/strong&gt;&lt;/a&gt; are defined and explained with three alternative paradigms &lt;a href=&#34;https://healis.eu/en/post/20170412/#object-oriented-view&#34;&gt;&lt;strong&gt;object-oriented&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#network-graph-view&#34;&gt;&lt;strong&gt;network graph&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#semiotic-view&#34;&gt;&lt;strong&gt;semiotics&lt;/strong&gt;&lt;/a&gt;. It is the interpreted, encoded (materialized) and representative forms in the triangle of reference that gave &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; its name. This trilateral principle is applied to everything including the architectural design of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The eight type systems of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; play the role of a formal upper level ontology and its construction is based on the &lt;a href=&#34;http://neuro.gr/NULO/toc.htm&#34;&gt;Neurorganon Upper Level Ontology&lt;/a&gt; (NULON). Terms of this ontology describe the framework with a hierarchical organizational structure that defines schemata and types for &lt;a href=&#34;https://healis.eu/en/post/20170412/#model-type-system-mts&#34;&gt;models&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#entity-type-system-ets&#34;&gt;entities&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#attribute-type-system-ats&#34;&gt;attributes&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#items-type-system-its&#34;&gt;items&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#value-type-system-vts&#34;&gt;values&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#data-sources-type-system-dss&#34;&gt;data sources&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/post/20170412/#link-type-system-lts&#34;&gt;links&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20170412/#database-type-system-dbs&#34;&gt;database metadata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In terms of querying and managing data there is a set of &lt;a href=&#34;https://healis.eu/en/post/20170412/#functional-operations&#34;&gt;functional operations&lt;/a&gt; that match SQL &lt;code&gt;Select&lt;/code&gt;, &lt;code&gt;Insert&lt;/code&gt;, &lt;code&gt;Update&lt;/code&gt;, &lt;code&gt;Delete&lt;/code&gt; statements and there is a &lt;a href=&#34;https://healis.eu/en/post/20170412/#filtering&#34;&gt;filtering mechanism&lt;/a&gt; implemented which is equivalent to SQL &lt;code&gt;Where&lt;/code&gt; conditions. Thanks to the powerful Wolfram Language transformations we can return results in the form of a table, &lt;code&gt;Rule&lt;/code&gt; set, &lt;code&gt;Association&lt;/code&gt; set, &lt;code&gt;Dataset&lt;/code&gt;, or even a network graph. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; has also been defined as a &lt;a href=&#34;https://healis.eu/en/post/20170412/#r3dm-definition&#34;&gt;&lt;strong&gt;functional representation of information resources that are mapped to a materialized form (realization)&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is an attempt to unify existing popular data models. The key element to achieve this is the association construct. We have devoted five posts of this series to highlight differences and similarities of &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000100&#34;&gt;Relational&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000101/&#34;&gt;Topic Map&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000102/&#34;&gt;Property Graph&lt;/a&gt;, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000103/&#34;&gt;RDF&lt;/a&gt; and &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000104/http://orientdb.com/docs/master/Graph-Editor.html&#34;&gt;Qlik&lt;/a&gt; data models that are dependent on associations. And the innovative aspect of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is that it avoids namespace, addressing, and identification problems by adopting a uniform representation of everything with numerical vector references.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is a framework to construct a &lt;strong&gt;Reference Database Management System&lt;/strong&gt;, it is &lt;strong&gt;RDBMS&lt;/strong&gt; redefined. The first class citizen in this system is the &lt;strong&gt;Reference&lt;/strong&gt;. It is not the &lt;strong&gt;tuple&lt;/strong&gt; of Entity-Relationship data model, or the &lt;strong&gt;triplet&lt;/strong&gt; of RDF/OWL data model, or even the &lt;strong&gt;nodes and edges&lt;/strong&gt; of the graph data model. &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; is based on &lt;strong&gt;Atomic Information Reference&lt;/strong&gt; units (&lt;code&gt;AIR&lt;/code&gt;) and it can assimilate table, column, tuple, key-value, triplet, associations and graph data structures. This kind of granularity of &lt;strong&gt;R3DM/S3DM&lt;/strong&gt; controls also the level of information detail that will be presented to the user e.g. show only &lt;code&gt;hyperbonds&lt;/code&gt; i.e. Entity instances.&lt;/p&gt;
&lt;p&gt;Information resources are not handled by name in &lt;strong&gt;R3DM/S3DM&lt;/strong&gt;, they are always represented and function as meaningful keys (numerical vectors). We escape from the namespace entanglement and alleviate the complexity of linked data by smart &lt;code&gt;AIR&lt;/code&gt; units that are represented in a uniform way and their digital form can be processed, retrieved and stored efficiently and/or combined to create composite information structures. Where bit is the basic construction unit for data, &lt;code&gt;AIR&lt;/code&gt; becomes the fundamental processing unit for structured information. It is now possible to have a giant global graph (GGG) network of information resources based on the power of semiosis with a reference mechanism that is not built with character strings (URL) but it is similar to the Internet Protocol address (IP).&lt;/p&gt;
&lt;p&gt;This is our mantra, &lt;strong&gt;build valuable relations; establish effective communications&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;The End&lt;/h2&gt;
&lt;p&gt;&amp;hellip; or perhaps the beginning of a new era in databases and data modeling.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6257915101387591680&#34;&gt;LinkedIn - 20170412 Update about duration, effort and acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/r3dms3dm-build-powerful-relationships-easily-hatzis-phd&#34;&gt;LinkedIn - 20170412 Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6257927185156444160&#34;&gt;LinkedIn - 20170412 Update about LinkedIn article and request for comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6262704855635365889/&#34;&gt;LinkedIn - 20170426 Update about RDF predicate and literal triplets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6273400181287456768&#34;&gt;LinkedIn - 20170525 Update and comment - Post of Theodore Hills - &amp;ldquo;Data Architecture COMN Sense: Relationships and Semantics&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2357895/2357895-6273439543236657153&#34;&gt;LinkedIn - 20170525 Data Modeling Group -  Relational-Graph DBMS, how do we bridge the gap ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6265895258345783296/&#34;&gt;LinkedIn - 20170525 Update and comment - Post of Theodore Hills - &amp;ldquo;Understand Relational to Understand the Secrets of Data&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/athanassios.hatzis/posts/10212982570867520&#34;&gt;Facebook - 20170412 Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Disqus    - &lt;a href=&#34;http://healis.eu/r3dm_project/post000107/#disqus_thread&#34;&gt;Number of Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://disqus.com/home/discussion/channel-healis/r3dms3dm_build_powerful_meaningful_cohesive_relationships_easily/&#34;&gt;Disqus   - Discussion Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/forum/topics/r3dm-s3dm-a-semiotic-data-modelling-framework-to-power-on-disk&#34;&gt;Data Science Central - 20170510 Discussion - R3DM/S3DM : A Semiotic Data Modelling Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/forum/topics/sql-to-nosql-translator?commentId=6448529%3AComment%3A567101&#34;&gt;Data Science Central - 20170525 Discussion Comment on SQL to NoSQL translator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;© Athanassios I. Hatzis, March 2017 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Plerophoria vs Information</title>
      <link>https://healis.eu/en/post/20150523/</link>
      <pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150523/</guid>
      <description>&lt;h2 id=&#34;information&#34;&gt;Information&lt;/h2&gt;
&lt;p&gt;The origin of the word information reveals its use. Inform comes from the Latin verb informare, which literally means to give form, or to form an idea. Form is the mold, the container, that is used to give shape, to molten the content. When computer scientists were designing and constructing the first digital computer, at the same time digital information was given birth and shape. Modern computers operate with memory chips and those are mere containers of storing sequences of 0s and 1s.&lt;/p&gt;
&lt;h2 id=&#34;plērophoria&#34;&gt;Plērophoria&lt;/h2&gt;
&lt;p&gt;The above interpretation and use of the word information is typical of western culture way of thinking. Although it is convenvient to keep things in boxes, Eastern philosophers used to think differently. The ancient and modern Greek word for information is &lt;code&gt;πληροφορία&lt;/code&gt;, which transliterates (plērophoria) from πλήρης (plērēs) “fully” and φέρω (phorein) frequentative of (pherein) to carry through.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It literally means &amp;ldquo;bears fully&amp;rdquo; or &amp;ldquo;conveys fully&amp;rdquo;. In modern Greek the word Πληροφορία is still in daily use and has the same meaning as the word information in English&lt;/strong&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This contrasting use and interpretation of the word plerophoria traces its roots back to Socrates, Plato, and Aristotle’s theory of semiosis. In this regard every word plays the role of a symbol, i.e. sign that can be interpreted to communicate information to the one decoding that specific type of sign. There is an intimate and inseperable connection of the signified, i.e. the concept whose meaning the interpretant attempts to decode, with the signifier, i.e. sign’s physical form such as the sound of a word.&lt;/p&gt;
&lt;p&gt;Every bit of digital information, i.e. 0 or 1 assimilates this triadic relationship. Bits are symbols signified as true or false taking the form of input voltage (signifier). The infinite combination of sequences of such symbols gives us the power to represent anything digitally. Their meaning depends on how we interpret these sequences, as numbers, letters, sounds, color, or anything else that can be encoded. The form of the signifier is not limited to that of a mere container that stores a sequence of 0s and 1s. It is a fully functional level of abstraction connected to higher and lower levels by applying recursively the theory of semiosis until we reach CPU’s binary level.&lt;/p&gt;
&lt;h2 id=&#34;the-turing-machine&#34;&gt;The Turing Machine&lt;/h2&gt;
&lt;p&gt;One-tape Turing machine according to Hopcroft and Ullman can be formally defined as a 7-tuple. Elements of this tuple are members of three distinct sets. A non-empty set of tape alphabet symbols, e.g. {0, 1}, a non-empty set of states, e.g. {A, B, C, HALT} and a set of state transitions e.g. {L, R}. Turing machine reads the tape symbols and executes a sequence of instructions according to a state table. Although this is not the space and time to adapt the theory of semiosis on the Turing machine we can clearly see an analogy. The tape symbol plays the role of a sign, the signified instruction is executed according to the interpretation given by the state table, and there is the physical form it takes as a printed text symbol on a white square of a paper tape. You can apply the same logic to the set of states and the set of transitions because these are symbols (signs) too; they can be interpreted and realized in some other physical or non-physical form.&lt;/p&gt;
&lt;h2 id=&#34;r3dms3dm-abstraction-mechanism&#34;&gt;R3DM/S3DM Abstraction Mechanism&lt;/h2&gt;
&lt;p&gt;In digital representation of information we can define a chain of interpretations, representations and realizations that are built in a consecutive order. This chain of semiosis reveals the mechanism that we can use to build higher levels of abstraction. At each step the symbol that is used to link together the signifier with the signified can become a fundamental unit, i.e. signifier to build the next level of abstraction. Thus we can move in two directions, we can generalize or we can specialize.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5883270314305028098&#34;&gt;LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/plerophoria-vs-information-athanassios-i-hatzis-phd/&#34;&gt;LinkedIn - 20150523 Article - Plerophoria vs Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Wikipedia, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;Etymology section&lt;/a&gt; of the term Information was updated by user Healis with the quoted text above on the 13th of June 2014 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
