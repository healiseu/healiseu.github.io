<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entity–relationship_model on HEALIS</title>
    <link>https://healis.eu/en/tags/entityrelationship_model/</link>
    <description>Recent content in Entity–relationship_model on HEALIS</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; HEALIS - Athanassios I. Hatzis, {year}</copyright>
    <lastBuildDate>Thu, 20 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://healis.eu/en/tags/entityrelationship_model/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Many-to-Many Relationships</title>
      <link>https://healis.eu/en/post/20170420/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170420/</guid>
      <description>&lt;h2 id=&#34;in-the-past&#34;&gt;In the Past&lt;/h2&gt;
&lt;p&gt;A many to many relationship is represented with an associative entity. Experts and non-experts in IT field know that this is one of the most important topics in Entity-Relationship and Relational theory. Seven years ago, when I started my data modeling saga, searching for SQL joins returned numerous results and few of them were on XML data. But I could hardly find any discussion about how a join table is related to the theory of two international data model standards, namely RDF and Topic Maps. A year later, in 2010 W3C started publishing &lt;a href=&#34;https://www.w3.org/TR/rdb-direct-mapping/&#34;&gt;&amp;ldquo;A Direct Mapping of Relational Data to RDF&amp;rdquo;&lt;/a&gt;. Coincidentally, back in 2009-2010 the &lt;a href=&#34;https://en.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL movement&lt;/a&gt; was born and Graph Databases started becoming a hot topic but nodes and edges were shrouded in disorientation for users of relational databases.&lt;/p&gt;
&lt;h2 id=&#34;in-the-present&#34;&gt;In the Present&lt;/h2&gt;
&lt;p&gt;It is 2017 and in my opinion the situation with associative entities has become darn confusing. Edges of a Property Graph data model are bidirectional but RDF links are unidirectional. A bridge-table of an Entity-Relationship schema has links only at the many side, i.e. we have an intersection of two one-to-many relationships. Foreign keys of a bridge table can be conveyed to RDF objects but for integrity and cardinality constrains you have to use OWL. Topic Maps use bidirectional associations with roles, therefore they are closer to the property graph data model. Each data model has a query language SQL, SPARQL, TMQL, Cypher, OrientDB SQL and GraphQL. There are significant differences among them and you have to understand the model in order to process or store efficiently data.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;I took a firm decision to clear a bit this info-glut with a series of articles in associative data modeling written with a hands-on practice style:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160825/&#34;&gt;Part 1/6&lt;/a&gt; is about Entity-Relationship data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160902/&#34;&gt;Part 2/6&lt;/a&gt; discusses Topic-Map data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160913/&#34;&gt;Part 3/6&lt;/a&gt; is focusing on Property Graph data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20161220/&#34;&gt;Part 4/6&lt;/a&gt; is explaining RDF Graph data model and Sentences associative data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170211/&#34;&gt;Part 5/6&lt;/a&gt; is a demonstration of QlikView associative data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Part 6/6&lt;/a&gt; presents R3DM/S3DM associative semiotic hypergraph data modeling perspective&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/49970/49970-6183777238341681155&#34;&gt;LinkedIn Semantic Web Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6183777764466786305&#34;&gt;LinkedIn Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2013423/2013423-6183768777587453956&#34;&gt;LinkedIn Data Scientists Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/108904/108904-6183776147260608513&#34;&gt;LinkedIn Data Warehouse &amp;amp; Business Intelligence Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6183774369735544834&#34;&gt;LinkedIn Database &amp;amp; Data Store Professionals Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6183771432149884931&#34;&gt;LinkedIn Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6183764505768534020&#34;&gt;LinkedIn Database Experts Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Relation, Relationship and Association</title>
      <link>https://healis.eu/en/post/20160825/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160825/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#supplier-part-catalogue-dataset&#34;&gt;Supplier-Part-Catalogue Dataset&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-er-data-model&#34;&gt;The ER Data Model&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#association-and-associative-array&#34;&gt;Association and Associative Array&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#wolfram-language---association&#34;&gt;Wolfram Language - Association&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#json-serialization&#34;&gt;JSON Serialization&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#association-vs-relation&#34;&gt;Association vs Relation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#wolfram-language---relation&#34;&gt;Wolfram Language - Relation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#data-redundancy&#34;&gt;Data Redundancy&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#structured-query-language-sql&#34;&gt;Structured Query Language (SQL)&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In early 2009 an increasing number of non-relational DBMS started to appear on the scene. They were based on data models such as Column, Document, Key-Value, Graph and Multi-Model. At about the same time, big corporations in IT industry were concerned with data processing of large and complex data sets. Big data movement was a major driving force to re-examine whether current DBMS were sufficient to cope with the new requirements on data processing. More specifically the &lt;a href=&#34;https://www.ibmbigdatahub.com/infographic/four-vs-big-data&#34;&gt;four V&amp;rsquo;s of Big Data&lt;/a&gt;, i.e. volume, variety, velocity and veracity, put an increasing demand in major companies and organizations. This had as a result a reinvestigation on what DBMS technology to apply. Many started realizing that physical representation of data on the disk or in memory and data modeling are key factors on how you build or integrate parts of your IT solution.&lt;/p&gt;
&lt;p&gt;While most players in the IT sector adopted Graph or Document databases and Hadoop based solutions, Hadoop is an enabler of &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_HBase&#34;&gt;HBase&lt;/a&gt; column store, it went almost unnoticed that several new DBMS, &lt;a href=&#34;https://www.aisys.us/&#34;&gt;AtomicDB&lt;/a&gt; previous database engine of &lt;a href=&#34;https://www.atomicdb.ch/x10sys.html&#34;&gt;X10SYS&lt;/a&gt;, and &lt;a href=&#34;https://www.sentences.com/sentences.htm&#34;&gt;Sentences&lt;/a&gt;, based on associative technology appeared on the scene. We have introduced and discussed about the &lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-2-hatzis-phd&#34;&gt;data modelling architecture&lt;/a&gt; and the atomic information resource unit &lt;a href=&#34;https://www.linkedin.com/pulse/air-atomic-information-resource-athanassios-i-hatzis-phd&#34;&gt;(AIR)&lt;/a&gt; of AtomicDB. Similar technology has been the engine power of &lt;a href=&#34;https://www.qlik.com/us/&#34;&gt;Qlikview&lt;/a&gt;, a very popular software in Business Intelligence and Analytics, since 1993. Perhaps it is less known to the reader that the association construct is a first class citizen in &lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_Maps&#34;&gt;Topic Map&lt;/a&gt; semantic web standard and it is translated to &lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;(RDF)&lt;/a&gt;, the other semantic web standard. In other posts of this series we can see how it is possible to implement Associative Technology in multi-model graph databases such as &lt;a href=&#34;https://orientdb.org/&#34;&gt;OrientDB&lt;/a&gt;, in object-relational DBMS such as &lt;a href=&#34;https://www.intersystems.com/our-products/cache/cache-overview/&#34;&gt;Intersystems Cache&lt;/a&gt; and &lt;a href=&#34;https://docs.oracle.com/database/121/ADOBJ/toc.htm&#34;&gt;Oracle&lt;/a&gt; or build the engine for in-memory processing with Wolfram &lt;a href=&#34;https://www.wolfram.com/mathematica/&#34;&gt;Mathematica&lt;/a&gt;. In this article, we introduce the concept of association from the perspective of Entity-Relationship &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;(ER)&lt;/a&gt; data model and illustrate it with the modelling of a toy dataset.&lt;/p&gt;
&lt;h2 id=&#34;supplier-part-catalogue-dataset&#34;&gt;Supplier-Part-Catalogue Dataset&lt;/h2&gt;
&lt;p&gt;Our dataset is a collection of three related database tables. Two of the tables, Supplier ( &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Suppliers.tsv&#34;&gt;TSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/SuppliersPartsCatalogue.xlsx&#34;&gt;XLSX&lt;/a&gt; ) and Part ( &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Parts.tsv&#34;&gt;TSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/SuppliersPartsCatalogue.xlsx&#34;&gt;XLSX&lt;/a&gt; ), represent and describe Entity Types, i.e. Relations. The third one, Catalogue ( &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/tsv/Catalog.tsv&#34;&gt;TSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/blob/master/SupplierPartCatalogue/xlsx/SuppliersPartsCatalogue.xlsx&#34;&gt;XLSX&lt;/a&gt; ) is the associative entity, a.k.a. bridge table, junction table, join table, etc. The typical case where data for the bridge table is captured is from a business inventory where each item is recorded with its unit price and a quantity in stock. Such  information is stored in our Catalogue table, together with a date the item record was modified and a flag that indicates inspection of the stock.&lt;/p&gt;
&lt;h2 id=&#34;the-er-data-model&#34;&gt;The ER Data Model&lt;/h2&gt;
&lt;p&gt;Quite often (ER) Data Model is confused with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational Data Model&lt;/a&gt;. The reader should become familiar with the following equivalent terminology.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ER Data Model&lt;/th&gt;
&lt;th&gt;Relational Data Model&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Entity Type (Set)&lt;/td&gt;
&lt;td&gt;Relation (Table, Base relvar)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Heading - ordered set of attributes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Body - set of n-tuples, extension of a predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Entity	(instance, member)&lt;/td&gt;
&lt;td&gt;Tuple (ordered set of attribute values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value Set&lt;/td&gt;
&lt;td&gt;Type name (data type)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value&lt;/td&gt;
&lt;td&gt;Attribute value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relationship set&lt;/td&gt;
&lt;td&gt;View (Result set or Derived relvar)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relationship (association)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Attribute (function)&lt;/td&gt;
&lt;td&gt;Free variable of a predicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mapping of Entity Set or&lt;/td&gt;
&lt;td&gt;Attribute name of the relation (column)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Relationship Set to Value Set&lt;/td&gt;
&lt;td&gt;ordered pair of attribute name and type name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this classic paper, &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=320440&#34;&gt;&amp;ldquo;The Entity-Relationship Model - Toward a Unified View of Data&amp;rdquo;&lt;/a&gt; &lt;strong&gt;Peter Chen defines relationship as an association among entities&lt;/strong&gt;. In the same paper &lt;strong&gt;entity and relationship are illustrated as hypergraphs&lt;/strong&gt;. In particular, &lt;em&gt;&lt;a href=&#34;#fig2&#34;&gt;Fig. 2&lt;/a&gt;&lt;/em&gt; at page 13 and &lt;em&gt;&lt;a href=&#34;#fig3&#34;&gt;Fig. 3&lt;/a&gt;&lt;/em&gt; at page 14 show how an instance from an Entity/Relationship set is linked to either values or other entities. Although Peter Chen did not describe these fundamental constructs of his data model with Hypegraph terms, it can be easily seen in these captured figures that a specific entity or relationship form hyperedges with other entities or values that play the role of hypernodes.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;peter_chen_ER_model_fig2.jpg&#34; data-caption=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34;&gt;

&lt;img src=&#34;peter_chen_ER_model_fig2.jpg&#34; alt=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    (Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;peter_chen_ER_model_fig3.jpg&#34; data-caption=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34;&gt;

&lt;img src=&#34;peter_chen_ER_model_fig3.jpg&#34; alt=&#34;(Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    (Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;association-and-associative-array&#34;&gt;Association and Associative Array&lt;/h3&gt;
&lt;p&gt;We extend the definition of association in the (ER) data model to cover both Entities and Relationships. In the aforementioned paper, Chen formally defines attribute as a function which maps a given entity to a single value (or a single tuple of values). He also mentions that relationships have their own attributes whose meaning depends on the associated entities. The (key,value) pair of an &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_array&#34;&gt;Associative array&lt;/a&gt;, a.k.a. map, symbol table, or dictionary, captures this functional operation of attribute.&lt;/p&gt;
&lt;h3 id=&#34;wolfram-language---association&#34;&gt;Wolfram Language - Association&lt;/h3&gt;
&lt;p&gt;Wolfram Language is using &lt;code&gt;Association&lt;/code&gt; fundamental construct to represent an associative array. The following three &lt;a href=&#34;https://reference.wolfram.com/language/guide/Associations.html&#34;&gt;Wolfram Language associations&lt;/a&gt; represent a relationship of a Catalog instance with a Supplier instance and some Part instance from our toy dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Supplier&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;supID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;, supName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Suppliers&amp;#34;&lt;/span&gt;, supAddress&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Grub St., Potemkin Village, IL 61801&amp;#34;&lt;/span&gt;, supCity&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ILLINOIS&amp;#34;&lt;/span&gt;, supCountry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;, supStatus&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;

(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Part&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;prtID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, prtName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, prtColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, prtWeight&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, prtUnit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gr&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;

(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalogue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;supID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;, prtID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, catPrice&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, catQuantity&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, catDate&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wed 10 Sep 2014&amp;#34;&lt;/span&gt;, catCheck&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we are missing in this representation are the hyperedges, i.e. the nexuses that link together hypernodes. According to hypergraph terminology, the edge that connects a hyperedge to a hypernode is called hyperlink or connector. You may think of these hyperlinks/connectors as hash fields but we need another identifier for the hash key, i.e. an identifier for the instance. We could have used supID, prtID or a combination of these two but we prefer to define new identifiers for hyperedges. &lt;strong&gt;The main reason for this is that in principle we want to design a uniform way of addressing and identifying both hyperedge and hypernode instances at a low-dimensional, e.g. (2D,3D,4D), space&lt;/strong&gt;. If we encode this way, it is possible to avoid namespace problems. In this post we use names to compare the graph with figures from Peter Chen&amp;rsquo;s paper.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./three_associations.jpg&#34; alt=&#34;Three Associations in a Named-Row Dataset&#34;&gt;&lt;/p&gt;
&lt;p&gt;We may also connect hyperedges, e.g. we can add a &amp;ldquo;type&amp;rdquo; hyperlink that maps instances to classes, a &amp;ldquo;vendor&amp;rdquo; hyperlink that maps a Catalog instance to its Supplier instance and a &amp;ldquo;stockItem&amp;rdquo; hyperlink that connects Catalog instance to Part instance. In Wolfram Language it is relatively easy to make a graph of these Associations. We colorized the graph according to the different data types we have, i.e. hyperedges, strings, doubles, integers, dates, and booleans, &lt;a href=&#34;#fig4&#34;&gt;&lt;strong&gt;Fig.4&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;association-relation-relationship.jpg&#34; data-caption=&#34;Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black&#34;&gt;

&lt;img src=&#34;association-relation-relationship.jpg&#34; alt=&#34;Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;json-serialization&#34;&gt;JSON Serialization&lt;/h3&gt;
&lt;p&gt;Another very popular representation for Association is JSON Serialization. Those associations we described above can be serialized with the following format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$PartI&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Item&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtColor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtWeight&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7.2&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtUnit&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gr&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$SupplierJ&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Organization&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Suppliers&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Grub St., Potemkin Village, IL 61801&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supCity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ILLINOIS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supCountry&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supStatus&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$CatalogK&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Inventory&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;supID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;prtID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catPrice&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11.7&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catQuantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catDate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014-09-10&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;catCheck&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Catalogue, Parts and Suppliers tables are also available in &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/json&#34;&gt;JSON&lt;/a&gt; format.&lt;/p&gt;
&lt;h3 id=&#34;association-vs-relation&#34;&gt;Association vs Relation&lt;/h3&gt;
&lt;p&gt;Although the logical view of Chen&amp;rsquo;s (ER) data model and his popular diagrammatic technique incorporates Entities, Relationships, Attributes and Values, at the physical layer of any relational DBMS we find records, i.e. Entities or Relationships are ordered tuples. A set of these ordered tuples that have the same heading, is called body. This header is another ordered tuple with attribute names. Theoretically speaking the body and the header of a table make the Relation. In practise the header is separated from the body and located at the database catalog together with other metadata for the schema of the database. SQL standard specifies a uniform mean to access this catalog.&lt;/p&gt;
&lt;h3 id=&#34;wolfram-language---relation&#34;&gt;Wolfram Language - Relation&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;&lt;code&gt;List&lt;/code&gt; fundamental construct of Wolfram Language&lt;/a&gt; can be used to represent a Relation. An extensive analysis of various representations and transformations on the constructs of the Relational data model in Wolfram Language can be found &lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-1-hatzis-phd&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Part&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Relation&lt;/span&gt; with a header &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; three tuples (body) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
{
  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pweight&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;punit&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lb&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lb&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kg&amp;#34;&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reader will notice that in both Associative array and Relation representations, the cell of a table, i.e. the value of an attribute, is always functionally dependent on the description of Attribute and Entity/Relationship. It cannot stand on its own without these semantic references. Moreover, for the Relation representation, the exact order of values has to be maintained together with any missing (NULL) values.&lt;/p&gt;
&lt;h3 id=&#34;data-redundancy&#34;&gt;Data Redundancy&lt;/h3&gt;
&lt;p&gt;Relational databases are usually normalized to eliminate duplication of information and ensure referential integrity. This is especially recommended in one-to-many relationships. &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_normalization&#34;&gt;Normalization&lt;/a&gt; involves arranging attributes in tables, nevertheless in a relational database we cannot escape from data redundancy completely. For example if we take the unit attribute of the normalized Part table above we can see that values are still repeated. Most important the schema of a relational database is too rigid and cannot be easily modified without breaking normalization and compromising referential integrity.&lt;/p&gt;
&lt;h3 id=&#34;structured-query-language-sql&#34;&gt;Structured Query Language (SQL)&lt;/h3&gt;
&lt;p&gt;Performing queries of data in a relational database is highly dependent on these two factors we briefly mentioned above, the physical representation of data on the disk and the normalization procedure. One of the main bottlenecks with SQL is the natural join relational operator, counterpart of logical AND. An &lt;a href=&#34;https://en.wikipedia.org/wiki/Join_(SQL)&#34;&gt;SQL Join&lt;/a&gt; is a means for constructing a result set combining columns from two (or more) tables by using values common to each. The more tables you join and the bigger the size of each table the more time it takes to consolidate the data of the view. On the contrary in many graph databases, connected nodes, i.e. record instances, are directly linked to each other. Each node, contains a list of pointers of its edges, therefore avoiding look-ups. In fact you are not searching for records, you are traversing connections instead. This may dramatically reduce the speed of constructing the result set of a query.&lt;/p&gt;
&lt;p&gt;For demonstration and comparison purposes we provide such a JOIN sql query for our toy database together with an ER diagram of the database schema,&lt;a href=&#34;#fig5&#34;&gt;&lt;strong&gt;Fig.5&lt;/strong&gt;&lt;/a&gt; and the result set on a Microsoft Access table view, &lt;a href=&#34;#fig6&#34;&gt;&lt;strong&gt;Fig.6&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may also download a Microsoft Access, &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;accdb&lt;/a&gt; file format, database to experiment with.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SupplierPartCatalogue-ERModel-MSAccess.jpg&#34; data-caption=&#34;Image illustrates the ER diagram of database schema&#34;&gt;

&lt;img src=&#34;SupplierPartCatalogue-ERModel-MSAccess.jpg&#34; alt=&#34;Image illustrates the ER diagram of database schema&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Image illustrates the ER diagram of database schema
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;SupplierPartCatalogue-ERModel-MSAccess-JOINresultSet.jpg&#34; data-caption=&#34;Image illustrates the ER diagram of database schema&#34;&gt;

&lt;img src=&#34;SupplierPartCatalogue-ERModel-MSAccess-JOINresultSet.jpg&#34; alt=&#34;Image illustrates the ER diagram of database schema&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;&lt;/h4&gt;
  &lt;p&gt;
    Image illustrates the ER diagram of database schema
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catsid ,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catpid ,
        Suppliers . sname ,
        Parts . pname ,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catcost ,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catqnt ,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catdate ,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catchk
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;    Suppliers
        &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt;  ( Parts
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt;  [&lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt;]
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt;  Parts . pid  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catpid )
                &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt;  Suppliers . sid  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catsid
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt;  Suppliers . sname  &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt; ,
           &lt;span style=&#34;color:#66d9ef&#34;&gt;Catalog&lt;/span&gt; . catcost  &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt; ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One can immediately notice the complexity of SQL query language on the nested SQL Join constructs.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this article we described several limitations of the ER model that we wish to overcome, in brief these are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional dependence of values&lt;/li&gt;
&lt;li&gt;Data redundancy&lt;/li&gt;
&lt;li&gt;Join operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next article of our series we continue with an international industry standard for information management and interchange, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_Maps&#34;&gt;Topic Maps Data Model&lt;/a&gt; (TMDM). Associations in TMDM are similar to tuples but they have types. Each member of an association plays a role that is defined explicitly. In fact this is in full agreement with Chen&amp;rsquo;s Entity-Relationship diagrams (see Fig.1 and Fig.2 above). Chen discusses the role of an entity in a relationship and the role of an attribute in a relation and he considers distinct constrains on allowable values for a value set and constraints on permitted values for a certain attribute.&lt;/p&gt;
&lt;p&gt;TMDM view is edifying because it divides information space in two layers. At the conceptual level we have topics that can be associated and represent any subject that can be conceived by a human being. At the occurrence level we have addressable information resources that describe those subjects.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/associative-data-modeling-demystified-part1-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6178589225793916928&#34;&gt;LinkedIn Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datasciencecentral.com/profiles/blogs/associative-data-modeling-demystified-part1&#34;&gt;Data Science Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/associative-data-modeling-demystified-part1&#34;&gt;DZone - Database Section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Relational/ER Constructs in Wolfram Language</title>
      <link>https://healis.eu/en/post/20150317/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150317/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#relational-constructs&#34;&gt;Relational Constructs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#product-type&#34;&gt;Product Type&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#tuple-recordrow&#34;&gt;Tuple (Record/Row)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#attribute-fieldcolumn&#34;&gt;Attribute (Field/Column)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#relation-base-relval&#34;&gt;Relation (Base relval)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#view-derived-relvar--result-set&#34;&gt;View (Derived relvar / Result set)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#entity-relationship-er-constructs&#34;&gt;Entity-Relationship (ER) Constructs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#record-representations&#34;&gt;Record Representations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#table-representations&#34;&gt;Table Representations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this series we introduce progressively the art of a new innovative, exhilarating, data modeling methodology that is based on R3DM conceptual framework. We want to engage software developers, architects, data model designers and everyone interested in learning the advantages of applying this method and the main differences from the data models of the past. We start with terms and constructs that most of us are familiar with from the relational database management systems and we dive into some detail of the Atomic Information Resource unit at &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 2&lt;/a&gt;. For coding purposes, we picked &lt;a href=&#34;https://www.wolfram.com/language/&#34;&gt;Wolfram Language&lt;/a&gt;, the 25+ years of development programming language of Mathematica. Wolfram Language combines symbolic, functional and rule-based programming with a vast library of built-in functions, a computational knowledge engine (&lt;a href=&#34;http://www.wolframalpha.com/&#34;&gt;Wolfram alpha&lt;/a&gt;) and a huge database of curated data.&lt;/p&gt;
&lt;h2 id=&#34;relational-constructs&#34;&gt;Relational Constructs&lt;/h2&gt;
&lt;p&gt;The entity-relational data model (ERDM) is still the most popular data model in database management systems. You can think many reasons for this fact but from the user perspective the main reason is the simple and natural way of managing data in tables with rows (records) and columns (attributes). On top of that, SQL is a very powerful and easy to learn programming language that covers completely the relational operators on data sets. In this article various methods of representing the basic constructs of the relational model are demonstrated with Wolfram Language powerful transformations. You may download our &lt;a href=&#34;https://healis.eu/en/post/20150317/R3DM_Part1.nb&#34;&gt;Wolfram Notebook&lt;/a&gt; and try our examples in &lt;a href=&#34;https://lab.wolframcloud.com/app/&#34;&gt;Wolfram Programming Lab&lt;/a&gt; or &lt;a href=&#34;https://develop.wolframcloud.com/app/&#34;&gt;Wolfram Development Platform&lt;/a&gt;. The structured data for our example can be found at our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue&#34;&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;product-type&#34;&gt;Product Type&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In programming languages and type theory, a product of types is another, compounded, type in a structure. The &amp;ldquo;operands&amp;rdquo; of the product are types, and the structure of a product type is determined by the fixed order of the operands in the product. An instance of a product type retains the fixed order, but otherwise may contain all possible instances of its primitive data types. The expression of an instance of a product type will be a tuple, and is called a &amp;ldquo;tuple type&amp;rdquo; of expression. A product of types is a direct product of two or more types - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Product_type&#34;&gt;Product type&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example: &lt;strong&gt;Integer x String x Colour&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Wolfram Language an instance of such a type is represented with the built-in &lt;a href=&#34;http://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt; symbol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partInstanceAsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img src=&#34;https://healis.eu/en/post/20150317/notebook01.png&#34; alt=&#34;notebook-output-01&#34;&gt;&lt;/p&gt;
&lt;p&gt;And to check/verify the type for each element of the List we map the function &lt;a href=&#34;http://reference.wolfram.com/language/ref/Head.html&#34;&gt;Head&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;Head&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/@ partInstanceAsList
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out: {Integer, String, RGBColor}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tuple-recordrow&#34;&gt;Tuple (Record/Row)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A tuple is a finite ordered list of elements. In mathematics, an n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer.
In computer science, tuples are directly implemented as product types in most functional programming languages. More commonly, they are implemented as record types, where the components are labeled instead of being identified by position alone. This approach is also used in relational algebra.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In database theory, the relational model uses a tuple definition similar to tuples as functions, but each tuple element is identified by a distinct name, called an attribute, instead of a number; this leads to a more user-friendly and practical notation. A tuple in the relational model is formally defined as a finite function that maps attributes to values. In this notation, attribute-value pairs may appear in any order - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Tuple&#34;&gt;Tuple&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Wolfram Language record abstract data structure is usually represented with the &lt;a href=&#34;http://reference.wolfram.com/language/ref/Association.html&#34;&gt;Association&lt;/a&gt; function, i.e. a symbolically indexed list of &lt;a href=&#34;http://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt;s (key-value pairs).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partInstanceAsAssociation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
                    partID &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,
                    partName &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;,
                    partColor &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt; partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  partInstanceAsAssociation &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Normal&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;attribute-fieldcolumn&#34;&gt;Attribute (Field/Column)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The basic relational building block is the domain or data type, usually abbreviated nowadays to type. A tuple is an ordered set of attribute values. An attribute is an ordered pair of attribute name and type name. An attribute value is a specific valid value for the type of the attribute. This can be either a scalar value or a more complex type. A domain describes the set of possible values for a given attribute, and can be considered a constraint on the value of the attribute. Mathematically, attaching a domain to an attribute means that any value for the attribute must be an element of the specified set. Constraints make it possible to further restrict the domain of an attribute - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational_model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our example, two of our attributes &lt;code&gt;partID&lt;/code&gt; is of integer data type and &lt;code&gt;partName&lt;/code&gt; is of string data type. They both take scalar values. But the &lt;code&gt;partColor&lt;/code&gt; attribute is of complex type and is defined in Wolfram Language with the function &lt;a href=&#34;https://reference.wolfram.com/language/ref/RGBColor.html&#34;&gt;RGBColor&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Apply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rule&lt;/span&gt;,
      &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        {&lt;span style=&#34;color:#66d9ef&#34;&gt;Keys&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Head&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/@ partInstanceAsList}], {1}]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out: {partID-&amp;gt;Integer, partName-&amp;gt;String, partColor-&amp;gt;RGBColor}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attribute can be seen as a mapping function. It maps a tuple to a value. We can define a function where we pass a single argument which is the association representation of the tuple and we return the specific value of the key. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;
isIdentifierOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partID&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
isNameOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
isColorOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partColor&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

{
  isIdentifierOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
  isNameOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
  isColorOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; }

&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;relation-base-relval&#34;&gt;Relation (Base relval)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In the relational model, a relation is a (possibly empty) finite set of tuples all having the same finite set of attributes.This set of attributes is more formally called the sort of the relation, or more casually referred to as the set of column names. A tuple is usually implemented as a row in a database table. The fundamental assumption of the relational model is that all data is represented as mathematical n-ary relations, an n-ary relation being a subset of the Cartesian product of n domains. In the mathematical model, reasoning about such data is done in two-valued predicate logic, meaning there are two possible evaluations for each proposition: either true or false (and in particular no third value such as unknown, or not applicable, either of which are often associated with the concept of NULL). Data are operated upon by means of a relational calculus or relational algebra, these being equivalent in expressive power.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A relation is defined as a set of n-tuples. In both mathematics and the relational database model, a set is an unordered collection of unique, non-duplicated items. A table is an accepted visual representation of a relation; a tuple is similar to the concept of a row. It is a set of tuples sharing the same attributes; a set of columns and rows. A relvar is a named variable of some specific relation type, to which at all times some relation of that type is assigned, though the relation may contain zero tuples - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Predicates and the closed world assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A relation consists of a heading and a body. A heading is a set of attributes. A body (of an n-ary relation) is a set of n-tuples. The heading of the relation is also the heading of each of its tuples. The body of a relation is sometimes called its extension. This is because it is to be interpreted as a representation of the extension of some predicate, this being the set of true propositions that can be formed by replacing each free variable in that predicate by a name (a term that designates something). There is a one-to-one correspondence between the free variables of the predicate and the attribute names of the relation heading. Each tuple of the relation body provides attribute values to instantiate the predicate by substituting each of its free variables. The result is a proposition that is deemed, on account of the appearance of the tuple in the relation body, to be true. Contrariwise, every tuple whose heading conforms to that of the relation, but which does not appear in the body is deemed to be false. This assumption is known as the closed world assumption: it is often violated in practical databases, where the absence of a tuple might mean that the truth of the corresponding proposition is unknown - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img src=&#34;https://healis.eu/en/post/20150317/notebook02.jpg&#34; alt=&#34;notebook-output-02&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {
  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Silver&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Brake for Crop Circles Sticker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Translucent&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cyan&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magenta&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7 Segment Display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;view-derived-relvar--result-set&#34;&gt;View (Derived relvar / Result set)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In a relational database, all data are stored and accessed via relations. Relations that store data are called &amp;ldquo;base relations&amp;rdquo;, and in implementations are called &amp;ldquo;tables&amp;rdquo;. Other relations do not store data, but are computed by applying relational operations to other relations. These relations are sometimes called &amp;ldquo;derived relations&amp;rdquo;. In implementations these are called &amp;ldquo;views&amp;rdquo; or &amp;ldquo;queries&amp;rdquo; - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;queryString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT Catalog.catsid,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Suppliers.sname,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Catalog.catpid,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Parts.pname,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Parts.pcolor,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Catalog.catcost
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM Suppliers
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  INNER JOIN (Parts
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              INNER JOIN [Catalog] ON Parts.pid = Catalog.[catpid]) ON Suppliers.sid = Catalog.[catsid]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE (((Catalog.catpid)=998))
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY Catalog.catcost;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, queryString, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;&lt;img src=&#34;https://healis.eu/en/post/20150317/notebook03.jpg&#34; alt=&#34;notebook-output-03&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Each database is a collection of related tables; these are also called relations, hence the name &amp;ldquo;relational database&amp;rdquo;. Each table is a physical representation of an entity or object that is in a tabular format consisting of columns and rows - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;}

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TableType&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableTypeNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysAccessObjects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysAccessXML&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysACEs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysIMEXColumns&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysIMEXSpecs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNameMap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroupCategories&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroups&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroupToObjects&amp;#34;&lt;/span&gt;, \
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneObjectIDs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysObjects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysQueries&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysRelationships&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;View998Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ViewAll&amp;#34;&lt;/span&gt;}

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableInformation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;&lt;img src=&#34;https://healis.eu/en/post/20150317/notebook04.jpg&#34; alt=&#34;notebook-output-04&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;entity-relationship-er-constructs&#34;&gt;Entity-Relationship (ER) Constructs&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ER data model is a systematic way of describing and defining a business process. The process is modeled as components (entities) that are linked with each other by relationships that express the dependencies and requirements between them. Entities may have various properties (attributes) that characterize them. Diagrams created to represent these entities, attributes, and relationships graphically are called ER diagrams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced Entity Relationship (EER)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The EER data model includes all of the concepts introduced by the ER model. Additionally it includes the concepts of a subclass and superclass (Is-a), along with the concepts of specialization and generalization. Furthermore, it introduces the concept of a union type or category, which is used to represent a collection of objects that is the union of objects of different entity types - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entity–relationship_model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;record-representations&#34;&gt;Record Representations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You need to maintain two ordered lists, one for the data values and another one for the semantics, i.e. the attribute/column names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  partInstanceAsList
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  attributes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {pid, pname, pcolor}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can combine the two lists in one list of &lt;code&gt;Rules&lt;/code&gt; with the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;attributes, partInstanceAsList&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Rule is the equivalent of a key-value pair, but it is more powerful because in Wolfram Language it is the basic mechanism that is used in transformations. Nevertheless for lookup operations and updating Wolfram researchers added a more powerful construct that is called Association, see below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Triples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let us call a specific part instance partXYZ, if we represent this as the subject resource of a triplet, the list of attributes as the predicates and the list of values as the objects we can take the following triplets&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.org/resource/partXYZ&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
predicate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StringJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.org/attribute/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ attributes;&lt;/span&gt;
object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partInstanceAsList;

&lt;span style=&#34;color:#66d9ef&#34;&gt;Transpose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{subject, predicate, object}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img src=&#34;https://healis.eu/en/post/20150317/notebook05.jpg&#34; alt=&#34;notebook-output-05&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Directed Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://healis.eu/en/post/20150317/notebook06.jpg&#34; alt=&#34;notebook-output-06&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Tree&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wolfram Language functions are tree data structures that are created in the memory as a contiguous array of pointers, the first to the head and the rest to its successive elements. Take for example the &lt;code&gt;List&lt;/code&gt; we defined, we can present it in a tree form with the command :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TreeForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly we can represent this row of data as a function with three arguments that take values from the Integer, String, and Color domain, e.g. :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partFunction&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;RGBColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TreeForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img src=&#34;https://healis.eu/en/post/20150317/notebook07.jpg&#34; alt=&#34;notebook-output-07&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Association&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Associations in Wolfram Language are very similar to the &lt;a href=&#34;http://www.topicmapslab.de/articles/TMDM_in_a_nutshell&#34;&gt;Association Type&lt;/a&gt; construct of the Topic Map data model. Each defined association is an instance of an association type. The keys of the association, association role types according to Topic Maps terminology, describe the role type of each value in the association instance. The values of the association, association role players according to Topic Maps terminology, describe the particular instance of the association type.&lt;/p&gt;
&lt;p&gt;The command to perform the association of attributes with their values is the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;attributes&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;partInstanceAsList&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Keys&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {partID, partName, partColor}

&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Association is a relatively new fundamental construct in Wolfram Language, it acts like a symbolically indexed list. The main reason for using it is to allow highly efficient lookup and updating and also build complex hierarchical structures and other datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. List of Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can easily convert an Association to a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Rules&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Normal&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;6. Hypergraph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the following hypergraph representation we keep separate the schema from the data, i.e. the types from instances.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://healis.eu/en/post/20150317/notebook08.jpg&#34; alt=&#34;notebook-output-08&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this hypergraph the &lt;code&gt;$Part&lt;/code&gt; plays the role of the hyperedge (red color) that connects three hypernodes that represent the attributes pid, pname, and pcolor (black color). Similarly for the values we have:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://healis.eu/en/post/20150317/notebook09.jpg&#34; alt=&#34;notebook-output-09&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this hypergraph the &lt;code&gt;$Part991&lt;/code&gt; plays the role of a hyperedge (green color) that connects three hypernodes that represent the values 991, &amp;ldquo;Left Handled&amp;hellip;.&amp;rdquo;, RED (blue color).&lt;/p&gt;
&lt;p&gt;We defined two &lt;code&gt;hyperedges&lt;/code&gt;, one at a layer of concepts to represent the head of the record, and another at the data layer to represent the body of the record.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. EntityPropertyAssociation&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$Part991&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partColor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt; $Part991 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;table-representations&#34;&gt;Table Representations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. List of Lists&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {
  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Silver&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Brake for Crop Circles Sticker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Translucent&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cyan&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magenta&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7 Segment Display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. List of Associations&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ;;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ body&lt;/span&gt;

{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bacon&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stretcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cover&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Smoke&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Shifter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Black&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Silver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;I &lt;span style=&#34;color:#66d9ef&#34;&gt;Brake&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Circles&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sticker&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Translucent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Cyan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Magenta&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Fire&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Hydrant&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cap&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Segment&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Display&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Green&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3. Dataset&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ;;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ body //Dataset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://healis.eu/en/post/20150317/notebook10.jpg&#34; alt=&#34;notebook-output-10&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Constraints provide one method of implementing business rules in the database. SQL implements constraint functionality in the form of check constraints. Constraints restrict the data that can be stored in relations. These are usually defined using expressions that result in a boolean value, indicating whether or not the data satisfies the constraint - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Constraints can apply to single attributes, to a tuple (restricting combinations of attributes) or to an entire relation. Since every attribute has an associated domain, there are constraints (domain constraints). The two principal rules for the relational model are known as entity integrity and referential integrity - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-1-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://community.wolfram.com/groups/-/m/t/464147&#34;&gt;Wolfram Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
