<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python_(programming_language) on HEALIS</title>
    <link>https://healis.eu/en/tags/python_programming_language/</link>
    <description>Recent content in Python_(programming_language) on HEALIS</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; HEALIS - Athanassios I. Hatzis, {year}</copyright>
    <lastBuildDate>Sat, 22 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://healis.eu/en/tags/python_programming_language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HyperMorph</title>
      <link>https://healis.eu/en/project/hypermorph/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/hypermorph/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#why-hypermorph&#34;&gt;Why HyperMorph&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#not-just-another-etl-tool&#34;&gt;Not just another ETL tool&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#not-only-a-data-storage-and-transformations-analytics-tool&#34;&gt;Not only a data storage and transformations-analytics tool&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#more-promising-than-data-virtualization-and-cloud-analytics-services&#34;&gt;More promising than data virtualization and cloud analytics services&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#speechless-hypermorph-screencast&#34;&gt;Speechless HyperMorph Screencast&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#hypermorph-speaks-for-itself&#34;&gt;Hypermorph speaks for itself&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#now-you-know-that-you-can-&#34;&gt;Now you know that you can &amp;hellip;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#installation---demo-test---documentation&#34;&gt;Installation - Demo Test - Documentation&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#step-by-step-instructions&#34;&gt;Step by step instructions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#demo-guide-to-test-package&#34;&gt;Demo Guide to Test package&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;why-hypermorph&#34;&gt;Why HyperMorph&lt;/h2&gt;
&lt;h3 id=&#34;not-just-another-etl-tool&#34;&gt;Not just another ETL tool&lt;/h3&gt;
&lt;p&gt;There are many open-source tools written in Python for ETL or ELT process, &lt;a href=&#34;https://github.com/petl-developers/petl&#34;&gt;petl&lt;/a&gt;, &lt;a href=&#34;https://github.com/Stiivi/bubbles&#34;&gt;bubbles&lt;/a&gt;, &lt;a href=&#34;https://github.com/mara/mara-pipelines&#34;&gt;mara-pipelines&lt;/a&gt;, &lt;a href=&#34;https://github.com/mara/mara-schema&#34;&gt;mara-schema&lt;/a&gt;, &lt;a href=&#34;https://github.com/python-bonobo/bonobo&#34;&gt;bonobo&lt;/a&gt;, &lt;a href=&#34;https://github.com/spotify/luigi&#34;&gt;luigi&lt;/a&gt;, &lt;a href=&#34;https://github.com/blaze/odo&#34;&gt;odo&lt;/a&gt;, &lt;a href=&#34;https://github.com/seanharr11/etlalchemy&#34;&gt;etlalchemy&lt;/a&gt;, &lt;a href=&#34;https://github.com/ceumicrodata/mETL&#34;&gt;mETL&lt;/a&gt;, &lt;a href=&#34;https://github.com/nerevu/riko&#34;&gt;riko&lt;/a&gt;, &lt;a href=&#34;https://github.com/toaco/carry%5D&#34;&gt;carry&lt;/a&gt;, &lt;a href=&#34;https://github.com/capitalone/Data-Load-and-Copy-using-Python&#34;&gt;locopy&lt;/a&gt;, &lt;a href=&#34;https://github.com/ferventdesert/etlpy&#34;&gt;etlpy&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrthomsen/pygrametl&#34;&gt;pygrametl&lt;/a&gt;. Authors in many of these tools realized that Python developers need a uniform interface based on object oriented abstractions for commonly used operations.&lt;/p&gt;
&lt;h4 id=&#34;well-designed-powerful-oop-classes&#34;&gt;Well-designed powerful OOP classes&lt;/h4&gt;
&lt;p&gt;HyperMorph offers interactive console programming and development with high-level OOP components tailored to cover all aspects of database management and analytics. HyperMorph is very rich in that aspect and provides &lt;code&gt;DataSet&lt;/code&gt;, &lt;code&gt;Table&lt;/code&gt; and &lt;code&gt;Field&lt;/code&gt; classes for data resources, &lt;code&gt;DataModel&lt;/code&gt;, &lt;code&gt;Entity&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; classes for data models, &lt;code&gt;SchemaGraph&lt;/code&gt;, &lt;code&gt;SchemaNode&lt;/code&gt;, &lt;code&gt;SchemaLink&lt;/code&gt;, &lt;code&gt;SchemaPipe&lt;/code&gt; classes for metadata management, &lt;code&gt;DataGraph&lt;/code&gt;, &lt;code&gt;DataNode&lt;/code&gt;, &lt;code&gt;DataLink&lt;/code&gt;, &lt;code&gt;DataPipe&lt;/code&gt; for data management, &lt;code&gt;Connector&lt;/code&gt; class for python drivers/clients and at the highest level of management we have &lt;code&gt;ASET&lt;/code&gt; (Associative Entity Set is similar to Relation) and &lt;code&gt;HACOL&lt;/code&gt; (HyperAtom collection).&lt;/p&gt;
&lt;h4 id=&#34;schema-and-data-as-objects-and-nodes-on-a-hypergraph&#34;&gt;Schema and data as objects and nodes on a hypergraph&lt;/h4&gt;
&lt;p&gt;HyperMorph goes one step ahead of the OOP design principle. It creates objects with 3D numerical vector identities and links them as nodes on a hypergraph. That graph is powered by &lt;a href=&#34;https://git.skewed.de/count0/graph-tool&#34;&gt;graph-tool&lt;/a&gt; one of the best and fastest network analysis tools in Python. Hypermorph keeps separate schema information, i.e. metadata, from stuctured data (&lt;em&gt;tuples&lt;/em&gt;, &lt;em&gt;hierarchical&lt;/em&gt;, &lt;em&gt;graph&lt;/em&gt;, &lt;em&gt;table&lt;/em&gt;, etc). This unique feature offers the possibility to organize easily data resources and to build complex customised data models in order to digest data. Data integration (consolidation) requires to manage successfully the complexity of mapping data resources on a data model something that can be easily done when our objects are hypergraph enabled and have numerical key vectors to identify their exact location in the schema, data graph.&lt;/p&gt;
&lt;h4 id=&#34;hypermorph-connectors&#34;&gt;HyperMorph Connectors&lt;/h4&gt;
&lt;p&gt;Another fundamental difference of HyperMorph with ETL tools is on the Python DB Driver/Adapter side. The current release supports:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clickhouse-Driver&lt;/li&gt;
&lt;li&gt;MySQL-Connector&lt;/li&gt;
&lt;li&gt;SQLAlchemy with the following three dialects
&lt;ul&gt;
&lt;li&gt;pymysql&lt;/li&gt;
&lt;li&gt;clickhouse&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On top of these drivers HyperMorph uses a &lt;code&gt;Connector&lt;/code&gt; class to abstract and unify SQL command execution &lt;code&gt;sql()&lt;/code&gt; in a functional way and wrap commands to extract metadata &lt;code&gt;get_tables_metadata()&lt;/code&gt;, &lt;code&gt;get_columns_metadata()&lt;/code&gt;. Transformation to &lt;strong&gt;tuples&lt;/strong&gt;, &lt;strong&gt;json rows&lt;/strong&gt;, &lt;strong&gt;tuples&lt;/strong&gt;, &lt;strong&gt;columns&lt;/strong&gt;, and &lt;strong&gt;pyarrow batch/table&lt;/strong&gt; is taking place at this level. At this stage performance is a critical factor. In our design and implementation of HyperMorph connectors we are seeking to minimise the time delay and data transferring speed. Therefore the protocol of communication that is used in the python database driver/adopter is highly important.&lt;/p&gt;
&lt;h4 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h4&gt;
&lt;p&gt;This is a standard approach in ETL frameworks and a very useful one because in general &lt;code&gt;pipelines&lt;/code&gt; are flexible and intuitive in programming. Hypermorph is not an exception we tried to make a difference here by designing same pipeline operators for fetching either data or metadata. For example there is an &lt;code&gt;over()&lt;/code&gt; operator for projection and &lt;code&gt;to_dataframe()&lt;/code&gt; for transformation to Python Pandas dataframe. We have even wrapped functional commands on pipelines so that you can choose between OOP (chaining) or functional style of programming.&lt;/p&gt;
&lt;h3 id=&#34;not-only-a-data-storage-and-transformations-analytics-tool&#34;&gt;Not only a data storage and transformations-analytics tool&lt;/h3&gt;
&lt;p&gt;There is another category of tools related with data storage (in-memory, on-disk), transformations and analytics processing, such as &lt;a href=&#34;https://github.com/TileDB-Inc/TileDB&#34;&gt;TileDB&lt;/a&gt;, &lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;datatable&lt;/a&gt;, &lt;a href=&#34;https://github.com/h2oai/datatable&#34;&gt;pandas&lt;/a&gt;, &lt;a href=&#34;https://github.com/petl-developers/petl&#34;&gt;petl&lt;/a&gt;, &lt;a href=&#34;https://github.com/vaexio/vaex&#34;&gt;vaex&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyTables&#34;&gt;pytables&lt;/a&gt;, &lt;a href=&#34;https://github.com/ibis-project/ibis&#34;&gt;ibis&lt;/a&gt;, &lt;a href=&#34;https://github.com/numpy/numpy&#34;&gt;numpy&lt;/a&gt;, &lt;a href=&#34;https://github.com/dask/dask&#34;&gt;dask&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/arrow&#34;&gt;pyarrow&lt;/a&gt;, &lt;a href=&#34;https://arrow.apache.org/blog/2018/12/05/gandiva-donation/&#34;&gt;gandiva&lt;/a&gt;. Usually most of them construct a table data structure in-memory or on-disk and use either a column layout or row layout to process the data. Hence they resemble database engines. In fact previous prototypes of HyperMorph (see &lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt; project) were based on SQL database engines. This time the current, first, release of HyperMorph is powered by &lt;a href=&#34;https://arrow.apache.org/docs/python/index.html&#34;&gt;PyArrow&lt;/a&gt;. There are many reasons for that choice. Most important PyArrow is mature and provides a columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware including GPUs. But regarding HyperMorph the killer feature of PyArrow package is &lt;a href=&#34;https://arrow.apache.org/docs/python/data.html#dictionary-arrays&#34;&gt;dictionary encoding&lt;/a&gt; which is utilized to implement associative filtering, part of our &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;associative semiotic hypergraph technology&lt;/a&gt;, in the style of &lt;a href=&#34;https://www.qlik.com/us/products/associative-difference&#34;&gt;Qlik&lt;/a&gt; analytics engine.&lt;/p&gt;
&lt;h3 id=&#34;more-promising-than-data-virtualization-and-cloud-analytics-services&#34;&gt;More promising than data virtualization and cloud analytics services&lt;/h3&gt;
&lt;p&gt;In recent years there is also another approach for data management and analytics aiming to skip the weary ETL process. Usually these are SaaS products on the cloud, such as &lt;a href=&#34;https://panoply.io/&#34;&gt;panoply&lt;/a&gt;, &lt;a href=&#34;https://www.dremio.com/&#34;&gt;dremio&lt;/a&gt;, &lt;a href=&#34;https://www.knowi.com/&#34;&gt;knowi&lt;/a&gt;, &lt;a href=&#34;https://www.denodo.com/en/data-virtualization/overview&#34;&gt;denodo&lt;/a&gt;, and many others. They provide GUIs and act as &lt;a href=&#34;https://en.wikipedia.org/wiki/Middleware&#34;&gt;middleware&lt;/a&gt; between DBMS and BI platforms. Naturally these are proprietary products and details on how they work under the hood are hidden. Developers or power users have to stick with menu-widget driven interfaces than having the ultimate flexibility of programming at the level of Python language. You may consider HyperMorph as an open-source API with the same role to fetch data for graph visualisation platforms. HyperMorph has three key differentiating points here data consolidation, user defined data modeling and interactive associative filtering for analytics with the option to visualize connected data on a graph. And because HyperMorph is open-source it is more promising that potentially our technology can be used from many software vendors for BI applications.&lt;/p&gt;
&lt;h2 id=&#34;speechless-hypermorph-screencast&#34;&gt;Speechless HyperMorph Screencast&lt;/h2&gt;
&lt;h3 id=&#34;hypermorph-speaks-for-itself&#34;&gt;Hypermorph speaks for itself&lt;/h3&gt;
&lt;p&gt;Watch the demo, check youtube settings and make sure &lt;strong&gt;video quality is at 1080p&lt;/strong&gt; HD.
You may also set the &lt;strong&gt;playback speed at 0.75&lt;/strong&gt; to increase the time of executing commands.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ZMjlkw6tw3o&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;now-you-know-that-you-can-&#34;&gt;Now you know that you can &amp;hellip;&lt;/h3&gt;
&lt;p&gt;and the only limit on what you can is your imagination.&lt;/p&gt;
&lt;h2 id=&#34;installation---demo-test---documentation&#34;&gt;Installation - Demo Test - Documentation&lt;/h2&gt;
&lt;h3 id=&#34;step-by-step-instructions&#34;&gt;Step by step instructions&lt;/h3&gt;
&lt;p&gt;on how to &lt;a href=&#34;https://healis.eu/en/hmorph/#install&#34;&gt;install&lt;/a&gt; release.&lt;/p&gt;
&lt;h3 id=&#34;demo-guide-to-test-package&#34;&gt;Demo Guide to Test package&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://healis.eu/en/hmorph/#demo_test&#34;&gt;Demonstration of HyperMorph functionality&lt;/a&gt; on data resources and demo scripts that are included in the distribution.&lt;/p&gt;
&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;A draft of the &lt;a href=&#34;https://hypermorph.healis.eu/docs&#34;&gt;documentation&lt;/a&gt; from comments in source code is generated automatically with Sphinx and it is hosted at GitHub.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/hypermorph-athanassios-hatzis/&#34;&gt;LinkedIn - 26/06/2020 Pulse Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>50 Years of SQL, can you imagine a truly NoSQL approach ?</title>
      <link>https://healis.eu/en/post/20200219/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20200219/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#two-programming-paradigm-approaches-for-a-nosql-api&#34;&gt;Two programming paradigm approaches for a NoSQL API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#functional-operations&#34;&gt;Functional operations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#a-glimpse-from-the-future&#34;&gt;A glimpse from the future&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In a decade of investigating NoSQL systems, I noticed a huge effort from many vendors to create SQL compatible APIs. Yes, there is a pretty good reason behind this tendency to walk-the-line as usual. Everybody has learned to program in SQL, everybody knows how to access a DBMS using SQL.&lt;/p&gt;
&lt;p&gt;Well, I guess after 50 years of SQL based DBMS there has to be a better approach to win programmer&amp;rsquo;s acceptance but it seems nobody has managed to achieve such an ambitious goal in scale. Nobody dares to propose something different to be adopted as a better solution and even those few that tried something different, it just comes to my mind the &lt;a href=&#34;http://tinkerpop.apache.org/&#34;&gt;Apache Tinkpop-Gremlin&lt;/a&gt; language, &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; and &lt;a href=&#34;https://www.opencypher.org/&#34;&gt;Cypher&lt;/a&gt;, those brave hearts have not managed to convince the majority of IT users to switch gears to their proposed query environment. Others were more radical in their approach and even imagined a connected semantic web, but when they designed their query language, &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt;, it looked very similar to SQL, and even its acronym reminds us SQL.&lt;/p&gt;
&lt;p&gt;I can start writing many reasons for why all these approaches have not reached the consensus for the majority of IT technical users. I could also state a number of facts for why the industry and several consortium keep using SQL as their favourite DBMS query language. But with this article I would like you to focus on a very specific point, and with that perhaps I can share a bit of my imagination on how it can be possible to access a DBMS differently, with more flexibility than SQL, without losing the comfort of your programming language, without the hurdles in SQL and most important with earning the interest and respect of developers.&lt;/p&gt;
&lt;h2 id=&#34;two-programming-paradigm-approaches-for-a-nosql-api&#34;&gt;Two programming paradigm approaches for a NoSQL API&lt;/h2&gt;
&lt;p&gt;What is SQL ? It&amp;rsquo;s a domain specific language designed specifically to manage data in a relational DBMS, although many proponents of relational theory correctly argue that these DBMS do not follow Codd&amp;rsquo;s relational principles. But that is another important story to tell some other time.&lt;/p&gt;
&lt;p&gt;Recently, in the last decade, graph databases started becoming very popular but interestingly many important vendors stretched SQL language to cover graph traversal and other related operations. Columnar databases another very successful NoSQL type also followed the same tactic regarding to the query language. Therefore, although the data model and the physical layer implementation can vary a lot, SQL attempts to create an artificial unity at the database client level.&lt;/p&gt;
&lt;p&gt;But again SQL is domain specific, started as data model specific and remains a declarative query language. The main question is what happens at the API side, i.e. at the side of the programming language and that is exactly where all interesting, peculiar things happen. How exactly do you connect to the DBMS server, what is the protocol DBMS driver uses to transfer data, how well objects match with entities and attributes in your DBMS, schema vs object model changes, nullable and partial loading of fields-atrributes, persistence, state, concurrency and caching of objects. For OOP aficionados and others what I briefly described is known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&#34;&gt;object-relational impedance mismatch&lt;/a&gt; problem, the &lt;a href=&#34;http://blogs.tedneward.com/post/the-vietnam-of-computer-science/&#34;&gt;Vietnam of Computer Science&lt;/a&gt;. And do not make a mistake it is still &amp;ldquo;Vietnam&amp;rdquo; out there.&lt;/p&gt;
&lt;p&gt;Chainable operators and operands
OOP is perhaps the most popular programming paradigm and yet because of the SQL magic spell everything had to be squeezed on a tabular form using one &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; or the other. But during all these years of my personal research and development effort I noticed one specific characteristic of these ORM APIs that is related to the data retrieval approach in use. There are three major trends here, &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_by_Example&#34;&gt;Query-By-Example&lt;/a&gt; (QBE) the precursor of GraphQL, Query-By-API (QBA) the precursor of Gremlin and Query-By-Language (QBL) where all the SQL like query languages are categorised, &lt;a href=&#34;https://www.gqlstandards.org/&#34;&gt;GQL&lt;/a&gt; is not an exception. Developer&amp;rsquo;s practical experience showed that certain complex queries, particularly those with joins, were more difficult to represent in QBA and QBE and once more SQL won again this battle. But it is not a surprise that proponents of graph database technology have only partially touched the object-relational impedance mismatch. It requires a deeper architectural design and multi-perspective attitude than only comparing how well nodes of the graph match objects of a class.&lt;/p&gt;
&lt;p&gt;So, was that a fair battle between QBA and QBL, the answer is no because of the SQL existing dominance in DBMS and the mimicking of SQL join operations. That is where imagination enters the game, imagine that you could use object chainable operations using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;fluent interface design method&lt;/a&gt;, a.k.a QBA, without the mismatch between the DBMS and OOP, i.e. imagine a loose connection between the DBMS and API, think of API database client more like a bridge to fetch or transfer data. The method of chaining query operators is very promising indeed, it can won a second round of boxing with SQL. I will briefly explain why.&lt;/p&gt;
&lt;p&gt;OOP is based on the concept of objects that can exchange messages and modify their internal state. Therefore that kind of fluent interface is very natural in OOP languages, on the other hand most complex queries can be visualised and processed as a data pipeline. My question to those that design GQL, the next international query language standard, is why you keep following a dead-end declarative approach ? Wouldn&amp;rsquo;t it be more natural and appealing to the users to follow a data pipeline methodology by standardising operands and operations ? There is plenty of hard evidence to verify that this is not an assumption. Recall TinkerPop-Gremlin reference above and in Python there is &lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;, a very popular data analysis library (23621 starts at GitHub).&lt;/p&gt;
&lt;h2 id=&#34;functional-operations&#34;&gt;Functional operations&lt;/h2&gt;
&lt;p&gt;Speaking about programming languages, what is the other very competitive paradigm in software development. Arguably it is the functional one and yet the functional requirements for such an API are more obscure. But such an API exists in one of the most powerful functional programming languages of IT industry, Mathematica. See for example how carefully they designed Wolfram language functions on &lt;a href=&#34;https://reference.wolfram.com/language/guide/DatabaseLikeOperationsOnDatasets.html&#34;&gt;Database-Like Operations on Datasets&lt;/a&gt; and &lt;a href=&#34;https://reference.wolfram.com/language/guide/ComputationWithStructuredDatasets.html&#34;&gt;Computation with Structured Datasets&lt;/a&gt; and how perfectly these fit with many other functions of the same language.&lt;/p&gt;
&lt;h2 id=&#34;a-glimpse-from-the-future&#34;&gt;A glimpse from the future&lt;/h2&gt;
&lt;p&gt;Enough said, software engineering is not a theoretical thing, it is based on practice. I will give you an example. One of the drawbacks of SQL is that you don&amp;rsquo;t have a direct access to manage data dictionary information, this is handled more or less automatically by the DBMS. Gartner recently reported that data quality and data integration tools are incorporating data catalogs. This is certainly a step towards the right direction, you need a query API that is capable to manage both data and metadata using a unified approach.&lt;/p&gt;
&lt;p&gt;Consider the following code snippet in Python:&lt;/p&gt;
&lt;p&gt;The first command demonstrates fetching metadata using OOP chainable python methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;mis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;)
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fields
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over(select&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter&amp;#39;&lt;/span&gt;)
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe(index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dim4, dim3, dim2&amp;#39;&lt;/span&gt;)
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out()

Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: 
                nid                 cname alias ntype ctype  counter
dim4 dim3 dim2                                                      
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;605&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;              Duration    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;            Start date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;              End date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;  Start station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;         Start station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;    End station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;233&lt;/span&gt;           End station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;           Bike number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;           Member type    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second command demonstrates fetching metadata using a functional approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;mis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(nid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;, 
        what&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fields&amp;#39;&lt;/span&gt;, 
        select&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter&amp;#39;&lt;/span&gt;,
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dim4, dim3, dim2&amp;#39;&lt;/span&gt;, 
        out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataframe&amp;#39;&lt;/span&gt;)

Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: 
                nid                 cname alias ntype ctype  counter
dim4 dim3 dim2                                                      
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;605&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;              Duration    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;            Start date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;              End date    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;  Start station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;         Start station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;    End station number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;233&lt;/span&gt;           End station    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;           Bike number    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;           Member type    NA   FLD   CSV        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the third command demonstrates fetching data using again a functional approach&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;mis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;, what&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, 
             select&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter&amp;#39;&lt;/span&gt;, 
             out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataframe&amp;#39;&lt;/span&gt;, 
             limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, 
             offset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)

Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;534&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31113&lt;/span&gt;  Columbia Rd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Belmont St NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31201&lt;/span&gt;                                &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; P St NW  W00663  Member
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1937&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31202&lt;/span&gt;               &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; R St NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31621&lt;/span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; D St NW &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; Judiciary Square  W00692  Casual
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;470&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31104&lt;/span&gt;  Adams Mill &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Columbia Rd NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31200&lt;/span&gt;          Massachusetts Ave &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Dupont Circle NW  W00020  Member
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;727&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31103&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Harvard St NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31200&lt;/span&gt;          Massachusetts Ave &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Dupont Circle NW  W00880  Member
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1144&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31110&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;th St &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Florida Ave NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31236&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; O St NW &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; Georgetown University  W00681  Casual
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1698&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31107&lt;/span&gt;      Lamont &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Mt Pleasant NW  &lt;span style=&#34;color:#ae81ff&#34;&gt;31610&lt;/span&gt;  Eastern Market &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;th &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; North Carolina Ave SE  W01154  Member
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;I am sure it is not difficult for those few out there to imagine and even implement a better solution than SQL provided you have the motive and financial backup. In fact as I mentioned in this article that partly exists. But it is certainly far more challenging and difficult to loose the safety of your daily job and/or income for years to imagine and consequently strive to give flesh and bones to a truly NoSQL API that can be more productive, efficient and innovative to work with than what already exists. Keep an eye for the next release of TRIADB project and who knows you might be convinced that this is truly a unique and valuable tool to use.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, we need to investigate systems that combine relational algebra and linear algebra in a richer query paradigm, potentially as extensions to SQL. Two “holy grails” should continue to stay on our agenda. First, we must always explore any novel ideas to reduce the impedance mismatch between application development and writing database queries. Second, we must continue to find ways to make database systems less rigid (e.g., flexible schema evolution) without significantly sacrificing their performance &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/50-years-sql-can-you-imagine-truly-nosql-approach-athanassios-hatzis/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://sigmodrecord.org/publications/sigmodRecord/1912/pdfs/07_Reports_Abadi.pdf&#34;&gt;The Seattle Report on Database Research&lt;/a&gt; - the report summarizes the discussion and conclusions of the 9th such meeting, held during 9-10 October 2018. It appeared in the December 2019 issue of ACM SIGMOD Record &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>TRIACLICK 2nd Release</title>
      <link>https://healis.eu/en/post/20191025/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20191025/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TRIADB is discontinued, page is maintained here for the history.&lt;/strong&gt;


&lt;button class=&#34;btn  btn-danger&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;\/en\/hmorph\/&#39;&#34; &gt; Visit HyperMorph the successor of this project &lt;/button&gt;


&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;self-service-data-management--visual-interactive-analytics-framework&#34;&gt;Self-Service Data Management &amp;amp; Visual Interactive Analytics Framework&lt;/h2&gt;
&lt;p&gt;This is a public announcement of the second open-source release of TRIADB, codename TRIACLICK. Repository of the project can be found at &lt;a href=&#34;https://github.com/healiseu/triadb&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can use TRIACLICK to manage your disparate data sources, create custom data models with an integrated, whole view of your business and get a business insight by building easily dashboard web applications that work with the associative selection/filtering of Triaclick engine.&lt;/p&gt;
&lt;h3 id=&#34;tutorial-and-installation-guides&#34;&gt;Tutorial and Installation Guides&lt;/h3&gt;
&lt;p&gt;Analytic instructions on how to install TRIADB are written on the &lt;a href=&#34;https://github.com/healiseu/triadb/blob/master/INSTALLATION.rst&#34;&gt;installation guide&lt;/a&gt;. If you decide to go deeper, read the &lt;a href=&#34;https://github.com/healiseu/triadb/blob/master/TUTORIAL.rst&#34;&gt;tutorial guide&lt;/a&gt; to get into the basics of programming with TRIADB.&lt;/p&gt;
&lt;h2 id=&#34;screen-capture-demo&#34;&gt;Screen Capture Demo&lt;/h2&gt;
&lt;p&gt;Watch a screencast demonstration of the main features of TRIADB in the current release with a focus on the key aspects highlighted and illustrated in the following section.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/QSk1ldfb7ow&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;at-a-glance&#34;&gt;At A Glance&lt;/h3&gt;
&lt;p&gt;TRIADB is an innovative, multi-perspective development framework written in Python with the scope to assist power BI users and developers to build easily web applications and/or Jupyter notebooks, i.e. reports, that are based on interactive computing and exploratory, visual analysis. It’s main unique and valuable characteristics are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Interactive visual exploratory analytics&lt;/strong&gt; powered by TriaClick associative semiotic hypergraph engine. The technology is based on ClickHouse columnar DBMS and its output can be easily transformed to enable hypergraph traversal, associative selection and cross-filtering with states on coordinated visualizations.&lt;/li&gt;
&lt;/ol&gt;






&lt;figure&gt;

&lt;img src=&#34;triaclick_animated_chart.gif&#34; alt=&#34;Coordinated update of GUI components based on associative selection and filtering&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;TRIACLICK Animated Chart&lt;/h4&gt;
  &lt;p&gt;
    Coordinated update of GUI components based on associative selection and filtering
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;







&lt;figure&gt;

&lt;img src=&#34;hypergraph_paths.png&#34; alt=&#34;Visualization of hypergraph paths based on TRIACLICK associations&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;TRIACLICK Hypergraph&lt;/h4&gt;
  &lt;p&gt;
    Visualization of hypergraph paths based on TRIACLICK associations
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;User defined business models&lt;/strong&gt; in the form of a hypergraph. Data modeling plays a central role in TRIADB. Management of meta-data, loading and filtering processes are innately related, associated, with the business model you define.&lt;/li&gt;
&lt;/ol&gt;






&lt;figure&gt;

&lt;img src=&#34;business_model.png&#34; alt=&#34;Business model based on Northwind database with Associative Entities in yellow&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Business Model Graph&lt;/h4&gt;
  &lt;p&gt;
    Business model based on Northwind database with Associative Entities in yellow
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Interactive programming with high-level OOP components and methods&lt;/strong&gt; tailored to fit database management and analytics. TRIADB powerful transformations, including list items, tuples and associations enable the user to analyze data quickly and intuitively.&lt;/li&gt;
&lt;/ol&gt;






&lt;figure&gt;

&lt;img src=&#34;associative_filtering.png&#34; alt=&#34;Examine visually how the domain set values of attributes are related&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Associative Filtering&lt;/h4&gt;
  &lt;p&gt;
    Examine visually how the domain set values of attributes are related
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;







&lt;figure&gt;

&lt;img src=&#34;barchart_from_aggregations.png&#34; alt=&#34;Aggregation in a filtered state and transformation to tuples and bar chart&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Transformation of aggregation&lt;/h4&gt;
  &lt;p&gt;
    Aggregation in a filtered state and transformation to tuples and bar chart
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;what-problem-triadb-solves-and-how&#34;&gt;What problem TRIADB solves and how&lt;/h2&gt;
&lt;p&gt;The project started long time ago from a personal need to integrate an electronic medical record database used in a neurosurgery clinic with several other specialized databases for neurosurgical disorders. &lt;code&gt;Integration&lt;/code&gt;, &lt;code&gt;correlation&lt;/code&gt;, &lt;code&gt;aggregation&lt;/code&gt; and &lt;code&gt;visual exploration&lt;/code&gt; will always be the holy grail of business analytics. Associative technology in general is a specific solution that has not been opened to the public until now although it is applied by one of the most successful BI companies for two decades. The implementation of associative semiotic hypergraph engine (TRIACLICK) in TRIADB project opens a path for other competitive, cost effective (not only RAM based), efficient solutions sharing the same principles in data modeling and database management.&lt;/p&gt;
&lt;h2 id=&#34;future-plans&#34;&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;TRIADB is a middleware, one part is closely coupled with the physical layer of the data store engine and the other part is closer to the application layer. Therefore the project can be expanded in two directions, optimization and improvement of associative semiotic hypergraph engine on one hand, efficient and effective transformations and visual exploration on the other hand.&lt;/p&gt;
&lt;p&gt;In spite of the growing development of TRIADB which requires urgently funding for resources, the critical factor for the success of this project is how exactly it is going to be applied to solve particular users’ problems. This step requires that users become aware of what are the advantages in using TRIADB and what they can achieve.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triadb-v09-athanassios-hatzis/&#34;&gt;LinkedIn - 20191025 Pulse Article - TRIADB v0.9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TRIACLICK 1st Release</title>
      <link>https://healis.eu/en/post/20190211/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20190211/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TRIADB is discontinued, page is maintained here for the history.&lt;/strong&gt;


&lt;button class=&#34;btn  btn-danger&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;\/en\/hmorph\/&#39;&#34; &gt; Visit HyperMorph the successor of this project &lt;/button&gt;


&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;TriaClick is my long standing effort to revitalize Relational and Topic Maps data model. &lt;code&gt;Associative filtering&lt;/code&gt;, similar to &lt;a href=&#34;https://www.qlik.com/us/products/associative-difference&#34;&gt;Qlik associative engine&lt;/a&gt;, has been &lt;strong&gt;implemented for the first time&lt;/strong&gt; with a fast columnar DBMS on non-volatile memory and tested with a relatively large file on commodity hardware.&lt;/p&gt;
&lt;h2 id=&#34;screencast&#34;&gt;Screencast&lt;/h2&gt;
&lt;p&gt;Screen Capture Demo of TriaClick, a python library that implements &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;associative, semiotic, hypergraph technology&lt;/a&gt; on top of &lt;a href=&#34;https://clickhouse.yandex/&#34;&gt;ClickHouse columnar DBMS&lt;/a&gt; and &lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt;. We show the execution of commands from two python console applications that are built with TriaClick library. The various operations (methods) of our &lt;code&gt;Chain Query Language (CQL)&lt;/code&gt; aim to make the processing pipeline of data integration, exploratory data analysis and visualization easier, faster, intuitive, and more efficient and accurate for the database/data analyst expert. Currently the focus is on management of data resources and data models, associative filtering, hypergraph exploration and aggregations.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/WJh5o59aXOw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;
&lt;p&gt;On my 10 years old Intel i3 core machine, TriaClick takes about a minute to load a 42 x 2.8M Physician records TSV flat file (856MB) on SSD and the average elapsed time for processing user selections, i.e. filters with an exploratory QlikView style, is 3 seconds. Output can be transformed and seen as associations, tuples, and columns with distinct values, frequencies and filtering states. The result set can also be driven to a hypergraph for further exploration.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triaclick-demo-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20190211 Pulse Article - TriaClick Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TRIADB</title>
      <link>https://healis.eu/en/project/triadb/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/triadb/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#at-a-glance&#34;&gt;At A Glance&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architectural-design&#34;&gt;Architectural Design&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#architectural-overview-white-paper&#34;&gt;Architectural Overview (White Paper)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementations&#34;&gt;Implementations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conference-presentations&#34;&gt;Conference Presentations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#key-differentiating-factors&#34;&gt;Key Differentiating Factors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#business-strategy&#34;&gt;Business Strategy&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TRIADB is discontinued, page is maintained here for the history.&lt;/strong&gt;


&lt;button class=&#34;btn  btn-danger&#34; type=&#34;button&#34;  onclick=&#34;location.href=&#39;\/en\/hmorph\/&#39;&#34; &gt; Visit HyperMorph the successor of this project &lt;/button&gt;


&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;at-a-glance&#34;&gt;At A Glance&lt;/h2&gt;
&lt;p&gt;TRIADB is an innovative, multi-perspective database framework. It is a Python library that sits on top of suitable NoSQL/SQL data store engines and enables the users to perform easily &lt;strong&gt;integration, correlation, aggregation and hypergraph exploration of multiple data resources&lt;/strong&gt;. TRIADB is founded on the principles of &lt;a href=&#34;https://healis.eu/en/project/r3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;architectural-design&#34;&gt;Architectural Design&lt;/h2&gt;
&lt;p&gt;In terms of the architectural design TRIADB is based on &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000107/&#34;&gt;&lt;strong&gt;associative&lt;/strong&gt;, &lt;strong&gt;semiotic&lt;/strong&gt;, &lt;strong&gt;hypergraph&lt;/strong&gt; technology&lt;/a&gt; pioneered by &lt;a href=&#34;https://healis.eu/en/about/#athanassios&#34;&gt;Dr. Athanassios I. Hatzis&lt;/a&gt;. Foundational principles, theoretical formalization and ontological dimensions of the framework and the data model are &lt;a href=&#34;https://healis.eu/en/project/r3dm/#cross-references&#34;&gt;dating back to the year 2012&lt;/a&gt;. Our technology shares certain similarities with &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000104/&#34;&gt;Qlik&lt;/a&gt; associative technology, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000002/&#34;&gt;AtomicDB and X10SYS&lt;/a&gt; associative technology, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000103/#associative-model&#34;&gt;Sentences&lt;/a&gt; associative data model, &lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000101/&#34;&gt;Topic Maps&lt;/a&gt; data model and &lt;a href=&#34;https://en.wikipedia.org/wiki/Correlation_database&#34;&gt;correlation database model&lt;/a&gt;. The &lt;span class=&#34;markup-quote&#34;&gt;main difference of our technology from other similar associative technologies&lt;/span&gt; is that it has a solid theoretical background, a unified data modeling architecture and at the same time it is distinct in its design and implementation.&lt;/p&gt;
&lt;h2 id=&#34;architectural-overview-white-paper&#34;&gt;Architectural Overview (White Paper)&lt;/h2&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;/documents/WP-TriaClick-Architectural-Overview-Final.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;https://healis.eu/documents/WP-TriaClick-Architectural-Overview-Final.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;https://healis.eu/documents/WP-TriaClick-Architectural-Overview-Final.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;h2 id=&#34;implementations&#34;&gt;Implementations&lt;/h2&gt;
&lt;p&gt;There are four TRIADB prototypes implemented:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TRIADB on &lt;a href=&#34;https://healis.eu/en/talk/triadb_wolfram/&#34;&gt;OrientDB with Mathematica&lt;/a&gt; - 2016&lt;/li&gt;
&lt;li&gt;TRIADB on &lt;a href=&#34;https://healis.eu/en/talk/triadb_connected_data/&#34;&gt;Intersystems Cache with Python&lt;/a&gt; - 2017&lt;/li&gt;
&lt;li&gt;TRIADB on Redis with Python - 2018&lt;/li&gt;
&lt;li&gt;TRIADB on &lt;a href=&#34;https://healis.eu/en/post/20191025/&#34;&gt;MariaDB and ClickHouse with Python&lt;/a&gt; - 2019&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the last open-source release of TRIADB, MariaDB stores data dictionary information and ClickHouse data storage engines are used for processing and querying data. The associative, semiotic, hypergraph engine has a proprietary licence, although the sources are included in the release, and it is given the codename TriaClick.&lt;/p&gt;
&lt;h2 id=&#34;conference-presentations&#34;&gt;Conference Presentations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;16/11/2017&lt;/strong&gt; - &lt;a href=&#34;https://healis.eu/en/talk/triadb_connected_data/&#34;&gt;Connected Data London Conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19/06/2017&lt;/strong&gt; - &lt;a href=&#34;https://healis.eu/en/talk/triadb_wolfram/&#34;&gt;European Wolfram Technology Conference in Amsterdam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;key-differentiating-factors&#34;&gt;Key Differentiating Factors&lt;/h2&gt;
&lt;p&gt;The following is a list of technical specifications and features in the design and implementation of TRIADB. This same list is what makes &lt;span class=&#34;markup-quote&#34;&gt;TRIADB a unique and valuable product&lt;/span&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Multi-Perspective Database Framework: tuples, domain sets, objects, hypergraph, hierarchical&lt;/li&gt;
&lt;li&gt;Act both as an operational and data warehouse database with a 360 degree view&lt;/li&gt;
&lt;li&gt;Automatic fixed, primary indexing schema instead of user-defined secondary indexing&lt;/li&gt;
&lt;li&gt;Manage the references instead of data: relying on reference-based associations and logical identifiers&lt;/li&gt;
&lt;li&gt;No duplicates: single value instance based on system defined primitive data types&lt;/li&gt;
&lt;li&gt;Consolidation of multiple data resources and mapping on user-defined data models&lt;/li&gt;
&lt;li&gt;Management of data resources, data models and metadata&lt;/li&gt;
&lt;li&gt;Python Chain Query Language (CQL) that avoids namespace and impedance mismatch problem&lt;/li&gt;
&lt;li&gt;Interactive, free-form, contextual queries&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;business-strategy&#34;&gt;Business Strategy&lt;/h2&gt;
&lt;p&gt;We create strong partnerships with database vendors to implement and fine-tune TRIADB on top of their technology stack and we offer consulting services on how to apply Associative, Semiotic, Hypergraph technology. We are not selling licenses or software, we provide full stack solutions and add-on value for our own clients, or for the clients of the vendor, thus the system we build inherits the scaling, performance, availability and TCO of the vendor.&lt;/p&gt;
&lt;p&gt;Our associative, semiotic, hypergraph technology is open-source. We are seeking for developer&amp;rsquo;s community consensus on the use of it and we strongly believe that our technology will be eventually adapted by major semantic and database technology players in the IT industry.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triaclick-demo-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20190211 Pulse Article - TriaClick Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triaclick-architectural-overview-white-paper-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20190319 TriaClick Architectural Overview White Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/triadb-v09-athanassios-hatzis/&#34;&gt;LinkedIn - 20191025 Pulse Article - TRIADB v0.9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Cache Python ORM</title>
      <link>https://healis.eu/en/project/cache_python/</link>
      <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/cache_python/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#source-code&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#about-the-project&#34;&gt;About the project&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#tests-and-demos&#34;&gt;Tests and Demos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;The project&amp;rsquo;s &lt;a href=&#34;https://github.com/healiseu/IntersystemsCacheORM&#34;&gt;source code at GitHub&lt;/a&gt;, was originally written and used as a module of &lt;a href=&#34;https://healis.eu/en/talk/triadb_connected_data/&#34;&gt;TRIADB&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id=&#34;about-the-project&#34;&gt;About the project&lt;/h2&gt;
&lt;p&gt;CacheORM module is an enhanced OOP porting of &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_using&#34;&gt;Intersystems Cache-Python binding&lt;/a&gt;. There are three classes implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CacheClient This is the super class of CachePython module. It wraps two functions from intersys.pythonbind module &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_using#GBPY_using_basics&#34;&gt;pythonbind3.connection()&lt;/a&gt; and &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_database&#34;&gt;pythonbind3.database()&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CacheQuery A subclass of CacheClient that wraps methods and adds extra functionality in &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_database&#34;&gt;intersys.pythonbind.database&lt;/a&gt; and &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_queries&#34;&gt;intersys.pythonbind.query classes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CacheClass A subclass of CacheClient, that wraps methods and adds extra functionality in &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_database&#34;&gt;intersys.pythonbind.database&lt;/a&gt; and &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY_classes#GBPY_classes_objects&#34;&gt;intersys.pythonbind.object&lt;/a&gt; classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GBPY&#34;&gt;intersys.pythonbind&lt;/a&gt; package is a Python C extension that provides Python application with transparent connectivity to the objects stored in the Caché database.&lt;/p&gt;
&lt;h2 id=&#34;tests-and-demos&#34;&gt;Tests and Demos&lt;/h2&gt;
&lt;p&gt;There are two folders in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/healiseu/IntersystemsCacheORM/tree/master/testCacheORM&#34;&gt;testCacheORM&lt;/a&gt; contains python jupyter notebook files that demonstrate CacheQuery and CacheClass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/healiseu/IntersystemsCacheORM/tree/master/testCacheBinding&#34;&gt;testCacheBinding&lt;/a&gt; are tests written for Intersystems Cache python binding&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can simply compare tests with demos to appreciate the work in this project to leverage intersystems cache python binding.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/intersystems-cache-python-orm-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20180305 Pulse Article - HEALIS: Build valuable relations; establish effective communications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
