<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Information on HEALIS</title>
    <link>https://healis.eu/en/tags/information/</link>
    <description>Recent content in Information on HEALIS</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; HEALIS - Athanassios I. Hatzis, {year}</copyright>
    <lastBuildDate>Wed, 30 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://healis.eu/en/tags/information/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Helicopter view of Graph Networks in DBMS</title>
      <link>https://healis.eu/en/post/20191030/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20191030/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-new-brave-age-of-hyperlinked-data&#34;&gt;The new brave age of hyperlinked data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#technical-questions-for-hyperlinking-data&#34;&gt;Technical questions for hyperlinking data&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#physical-layer&#34;&gt;Physical Layer&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logical-layer&#34;&gt;Logical Layer&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#conceptual-layer&#34;&gt;Conceptual layer&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#by-reference-vs-by-value&#34;&gt;By reference vs. by value&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Normally IT people including architects, engineers, scientists and developers are forced to think a particular implementation of an application or a business solution in terms of the query language. Generally speaking most often it is the specific technology and infrastructure behind the scene that dictates how things should be done. Recently the first workshop on web standardization for graph data was held in Berlin, Germany. The title of the workshop &amp;ldquo;&lt;a href=&#34;https://www.w3.org/Data/events/data-ws-2019/cfp.html&#34;&gt;Creating Bridges: RDF, Property Graph and SQL&lt;/a&gt;&amp;rdquo; indicates that it is technology again, and its vendors, that force a narrow view of how to apply graph networks in data management. Hope they do not seek a solution that temporarily makes everyone happy in business, instead of taking a firm decision to move ahead on a new path that will be proven the right choice over time. That said, I do recognize that there are always compatibility issues with older technology in place but the bridges should serve the scope of a smooth transition from the old age to the new age.&lt;/p&gt;
&lt;h2 id=&#34;the-new-brave-age-of-hyperlinked-data&#34;&gt;The new brave age of hyperlinked data&lt;/h2&gt;
&lt;p&gt;But there is another factor more important than technology, the need to provide a business insight, understanding and/or solution to real world problems with increasing complexity. After all many recognize that this was the driving force behind the NoSQL movement that started ten years ago. Out of the three main technological categories of database products, key-value, document-hierarchical and graph networks, the last one emerged with significant importance for the future of IT business for many reasons that will not be analysed here. Suffice to say that WWW, the most advanced and popular information system, is the biggest graph network of documents and other resources in the history of human mankind. Today we reached the point in time that the maturity of NoSQL movement met the evolution of WWW but the question remains on how exactly these two will be married to serve human needs. A quick and sort answer is by &lt;strong&gt;hyperlinking data in the context of information&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;technical-questions-for-hyperlinking-data&#34;&gt;Technical questions for hyperlinking data&lt;/h2&gt;
&lt;p&gt;Therefore the aim has been set but the competitive database, semantic and web technologies out there makes it too difficult for many to rise above the specifics. That is where a &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;multi-layer perspective&lt;/a&gt; is needed to embrace the problem of hyperlinking data.&lt;/p&gt;
&lt;p&gt;Does this mean users are going to abandon their favorite popular SQL row-based, column-based, document based or existing triple store and property graph databases ? No, not at all but this new technology should integrate them in the large picture which takes on account the following questions as it concerns the hyperlinked graph data network :&lt;/p&gt;
&lt;h3 id=&#34;physical-layer&#34;&gt;Physical Layer&lt;/h3&gt;
&lt;p&gt;Although many vendors consider a native graph network storage layer as an advancement in graph databases, this approach has the following drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it results in poor data locality and you may consider this issue independent of horizontal scaling.&lt;/li&gt;
&lt;li&gt;you are forced to apply too early a graph layout on data especially on record-based data.&lt;/li&gt;
&lt;li&gt;it is not easy to implement quick and easy data transformations, i.e. the result from a data query in a tabular, columnar, hierarchical or graph network format. All four are needed for different purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;So what is the best type of storage engine that serves these specifications ?&lt;/strong&gt; Would it be better to think in terms of a hybrid architecture ?&lt;/p&gt;
&lt;h3 id=&#34;logical-layer&#34;&gt;Logical Layer&lt;/h3&gt;
&lt;p&gt;This is where the basic constructs of the technology must be thoroughly specified. Since we are talking about a graph network:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What type of nodes and edges we have ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you allow key-value properties in nodes and edges ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does the edge connect only two nodes ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What type of cardinality and linkage, i.e. unidirectional, bidirectional, they have ?&lt;/p&gt;
&lt;p&gt;Speaking about linkage, both &lt;strong&gt;RDF and property graph databases are anchored on appropriate semantic labelling of edges&lt;/strong&gt; and then storage and retrieval of information at the implementation level are dependent on this labelling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, have you considered that this extra piece of information, i.e. the label, in most cases can be a meta-data property of the node, e.g. type, category, role, characteristic, etc ?&lt;/p&gt;
&lt;p&gt;For that reason labelling of edges should be left to the data modeller, business person, purely for conceptualising the business model. Here is perhaps the most critical question.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you use these constructs to build business data models and what are their semantics ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This leads us inadvertently to the conceptual level.&lt;/p&gt;
&lt;h3 id=&#34;conceptual-layer&#34;&gt;Conceptual layer&lt;/h3&gt;
&lt;p&gt;I think RDF graphs and labeled property graphs and Topic Map graphs (hardly anyone talks anymore about this standard) and even entity-relationship graph in relational theory have varying types of constructs with big differences in meaning and use. Entities, attributes, properties, data resources, relationships, relations, associations, items, instances and many other concepts make the IT babel at the business, end-user level.&lt;/p&gt;
&lt;p&gt;Here lies a major source of confusion for the newcomer, I used to be one of them, which is the &lt;strong&gt;distinction between classes and instances, metadata and data, terminological and assertion components&lt;/strong&gt;. This distinction as many others in IT semantic world is artificial, nevertheless it plays an extremely important role in programming, in data retrieval and even in inferencing mechanisms.&lt;/p&gt;
&lt;p&gt;If you think you can handle this distinction easily, I urge you to think again, because in my opinion these two concepts must be clearly separable and at the same time they have to be related like the &lt;a href=&#34;https://healis.eu/en/post/20190624/&#34;&gt;hand mold and the letter types in typography&lt;/a&gt;. On the contrary I do not see this happening in our modern graph technologies, time does not permit to expand this argument but it is entangled with the following important observation.&lt;/p&gt;
&lt;h3 id=&#34;by-reference-vs-by-value&#34;&gt;By reference vs. by value&lt;/h3&gt;
&lt;p&gt;Those of us familiar with programming and the internals of computing know that there is another critical, fundamental distinction in data processing. &lt;strong&gt;How do you access the datum by reference or by value ?&lt;/strong&gt;_ This was the moment in time that RDF/OWL framework presented the first signs of derailment. First they came up with the idea of universal resource locator (URL), then the concept was elevated to the universal resource identifier (URI) and the result was the web identity crisis for those old enough to remember &lt;a href=&#34;https://ontopia.net/topicmaps/materials/identitycrisis.html&#34;&gt;the clash with the proponents of Topic Maps data modeling framework&lt;/a&gt;. If you ask me, &lt;a href=&#34;http://www.semantic-web-journal.net/content/semantic-web-identity-crisis-search-trivialities-never-were&#34;&gt;that crisis has not been resolved yet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main reason behind web identity crisis is the use of namespace addressing, to connect, identify and locate data. The notion of web address has been semantically overloaded because of its textual form. On the contrary internet protocol for addressing and usually primary key mechanism of databases are numerical. Perhaps they thought that this way it would have been easier for developers and machines to do the linkage in the same way they use HTML anchoring. But I guess this is more or less a fallacy of TimBL&amp;rsquo;s linked data network where it was designed primarily for documents (html pages) not record-base (relational) data. The origin of this misconception is &lt;a href=&#34;https://en.wikipedia.org/wiki/Memex&#34;&gt;Memex&lt;/a&gt; and it is continued in our days with the invention of many different encodings, including RDFa, Microdata and JSON-LD with the intention of generating manual or semi-automated linked data in semi-structured, hierarchical forms and html documents.&lt;/p&gt;
&lt;p&gt;Global Giant Graph (GGG) or WWW 3.0 will become a reality only if W3C consortium admit that they have to build likewise IP numerical addressing schema for concepts in data models and for hyperlinked data. It is this new protocol that will permit networking at semantic level, it is going to be the same protocol that we are going to use for identification purposes, the same protocol that will make each data element traceable and connectable, the same protocol that will be used in number-crunching computers. Moreover the whole process of constructing hyperlinked data, especially from structured data resources (databases), will be fully automated and hidden in the same way TCP/IP is hidden from internet users.&lt;/p&gt;
&lt;p&gt;Epilogue
The reader may realize that I have only touched various parts of the &amp;ldquo;elephant in the room&amp;rdquo;. But those key points that I tried to make digestible rose from my experience with semantic and database technologies and eventually from my long standing personal effort to develop &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt; computational semiotics framework. This way I hope that I managed to enlighten a different path not in theory but in practice. And if there is one thing to remind you something from this article and assist you in following this path then let it be &lt;strong&gt;&lt;a href=&#34;https://healis.eu/en/post/20190624/&#34;&gt;granular computing&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/helicopter-view-graph-networks-dbms-athanassios-hatzis/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>About data granularity</title>
      <link>https://healis.eu/en/post/20190624/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20190624/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#information&#34;&gt;Information&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conceptual-computational-semiotics-framework&#34;&gt;Conceptual, computational semiotics framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#push-forward&#34;&gt;Push forward&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In computer science there are many things we take for granted like the fundamental digital representation of anything with 1s and 0s. It&amp;rsquo;s often too easy to forget that when you have dived deep into the virtual realm of a computer the only thing you get is a mere representation of abstract concepts. This is our data and because they live in a machine and its peripherals they always have structure no matter how you interpret them.&lt;/p&gt;
&lt;h2 id=&#34;information&#34;&gt;Information&lt;/h2&gt;
&lt;p&gt;And that kind of human interpretation I will call it information, i.e. you put data in a form, in some perspective, so you can get meaning out of them. In that sense data in a computer does not differ much from printed letters in a book, or paint in a canvas, or stone in a sculpture. From that point of view computer is simply an advanced form of a medium, a sophisticated printing press where 0&amp;rsquo;s and 1&amp;rsquo;s take the place of the movable individual metal letters, i.e. a computerized movable type printing.&lt;/p&gt;
&lt;h2 id=&#34;conceptual-computational-semiotics-framework&#34;&gt;Conceptual, computational semiotics framework&lt;/h2&gt;
&lt;p&gt;Once again, it&amp;rsquo;s only structured data you have, our mind is doing all the rest because of the power of &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiosis&#34;&gt;semiosis&lt;/a&gt;. One can also ask, is there anything in our universe that is unstructured ? Yes there is, concept is unstructured because it is an abstract thing. When you represent the concept, or you realize, materialize it in our realm then you have structure again. A computational model of representation which is semiotic in its nature is &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;. And here is a memorable type of formula that describes fully the semiotic nature of this data model.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(R3DM): Representation ↦ Resource + Reference + Referent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(S3DM): Semantics ↦ Signifier + Sign + Signified&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;push-forward&#34;&gt;Push forward&lt;/h2&gt;
&lt;p&gt;Nowadays there is already a sufficient and effective solution for data volume and velocity. It&amp;rsquo;s variety and consequently integration that is at stake. In my opinion the key to an efficient and effective solution is to think about the exact form of what &lt;strong&gt;atomic fundamental constructs you use and how you build connected higher structures&lt;/strong&gt;. I think &lt;a href=&#34;https://en.wikipedia.org/wiki/Granular_computing&#34;&gt;granular computing&lt;/a&gt; is an excellent term we can use here. That said, I have experienced for more than a decade a denial of thinking a better data model standard than those we already have (Relational, RDF and Topic Maps) simply because many believe that the wheel is going to be reinvented. But progress is made only when one defies the established nomenclature and challenges them with a better alternative that can be proven in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Computational_engineering&#34;&gt;computational scientific and engineering&lt;/a&gt; way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s to the crazy ones. The misfits. The rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They’re not fond of rules. And they have no respect for the status quo. You can quote them, disagree with them, glorify or vilify them. About the only thing you can’t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the people who are crazy enough to think they can change the world, are the ones who do &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/mtftHaK9tYY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/data-granularity-athanassios-hatzis/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Steve Jobs, Apple advertisement (Aired 1997)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Where is the gap in data modeling ?</title>
      <link>https://healis.eu/en/post/20190615/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20190615/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#business-vs-technological-factors&#34;&gt;Business vs Technological Factors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was motivated to write this post from an article of Christian Kaul &amp;ldquo;&lt;a href=&#34;https://www.linkedin.com/pulse/bridging-knowledge-gap-christian-kaul/&#34;&gt;Bridging the Knowledge Gap&lt;/a&gt;&amp;rdquo;. He is making questions about how, what is the best way to bridge the knowledge gap between data modeling experts and people from other fields ? But I think an important role that data modeling experts play is exactly that &lt;strong&gt;to bridge the gap between pure IT technical people like developers, database administrators, data engineers and people from other fields e.g. domain experts, scientists, business people, etc&lt;/strong&gt;. A more interesting question in my opinion is how this gap is created. Get prepared because I will answer with more questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do we all agree that the best way to model data-information is to create a graph ?&lt;/li&gt;
&lt;li&gt;If yes the next question is how exactly you represent that graph ? As you probably know there are four major competing data models, (&lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;relational model&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;ER&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_database#Labeled-property_graph&#34;&gt;labeled property graph&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;RDF&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Topic_map&#34;&gt;Topic Maps&lt;/a&gt;), Are you convinced that there can be no other better alternative ?&lt;/li&gt;
&lt;li&gt;What about the building blocks, for example in RDF you have triples, in relational you have relations (tables) and tuples. Is that all ? Can we make better building blocks to connect data or information ?&lt;/li&gt;
&lt;li&gt;And last but not least, at a physical layer, and I believe that is exactly &lt;strong&gt;where the gap lies between pure data modelers/architects and database engineers/developers&lt;/strong&gt;, you have row, column, document, native graph structures. Are you totally convinced that the best way to physically implement a graph data-information model is with a native graph structure on permanent storage ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you ask me to answer these questions I suggest you read more information about &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt; conceptual, computational semiotics framework and the related projects &lt;a href=&#34;https://healis.eu/en/hmorph/&#34;&gt;HyperMorph&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt;. This is what I have been involved with for the last ten years.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The nice thing with social media is that if you deserve to get some good feedback from professionals and experts of the field in a post like this one you might decide to extend it. That&amp;rsquo;s exactly what I did in the following few paragraphs to respond in a better way to comments in my post.&lt;/em&gt;_&lt;/p&gt;
&lt;h2 id=&#34;business-vs-technological-factors&#34;&gt;Business vs Technological Factors&lt;/h2&gt;
&lt;p&gt;I believe the resurgence of no-SQL movement (2009), which is highly related to data modeling, started out of the emergent need of companies-users to deal with the velocity, volume, variety and other properties of distributed data resources. That same movement pushed forward our technological boundaries to create better DBMS and BI, web/desktop applications.&lt;/p&gt;
&lt;p&gt;Personally speaking I joined that movement because of my business need to manage complex medical databases. Another reason was to enrich and manage collectively and efficiently my own data resources, i.e. personal information management. Believe it or not I am still not satisfied from what exists out there and that is why I ended up &lt;strong&gt;researching and developing&lt;/strong&gt; my own solution.&lt;/p&gt;
&lt;p&gt;Apparently another critical factor has to do purely with the cost of a solution you apply to a complex data/information management problem. That is also why open-source based systems are becoming more and more popular nowadays. We need bulletproof, open-source tools with strong communities behind to support, develop and test them. Do consider also that in many cases open-source is an escape from the high cost cloud solutions and corresponding vendor-locking mechanisms.&lt;/p&gt;
&lt;p&gt;Eventually, somehow, sometime something similar to a Linux OS, will be created for information management at a higher level. Something that will earn the consensus of developers, end users and companies emerging out of practical need for a new data modeling standard, for effective physical layer implementation, highly responsive graphical user interfaces and efficient augmented artificial intelligence tools.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/where-gap-data-modeling-athanassios-hatzis-phd/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Yet another query language, really ?</title>
      <link>https://healis.eu/en/post/20180403/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20180403/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I have been reading an article for yet another query language, &lt;a href=&#34;https://www.hypergraphql.org/&#34;&gt;HypergraphQL&lt;/a&gt;. But do we really need another query language ? I do agree that it is always good to offer the developer a variety of choices for querying a database, especially if the new query language makes it easier or perhaps better in some sense to fetch or input data. But that&amp;rsquo;s not really a big deal, I will try to explain why in brief here.&lt;/p&gt;
&lt;p&gt;Whether it is a standard based &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/SQL&#34;&gt;SQL&lt;/a&gt;, &lt;a href=&#34;http://www.isotopicmaps.org/tmql/&#34;&gt;TMQL&lt;/a&gt;, &lt;a href=&#34;https://www.w3.org/XML/Query/&#34;&gt;XQuery&lt;/a&gt; language, or a more graph oriented query language like &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; (former Facebook Query language), &lt;a href=&#34;http://tinkerpop.apache.org/gremlin.html&#34;&gt;Gremlin&lt;/a&gt; and &lt;a href=&#34;https://www.opencypher.org/&#34;&gt;Cypher&lt;/a&gt;, the end user (developer) has to write down the query in some form according to the formal system of the language. That also implies that you do know your data model in some detail, i.e. structural form of data, instances vs object types, and kind of connections/links. This is essential to describe your query in the language.&lt;/p&gt;
&lt;p&gt;Therefore &lt;strong&gt;all Query Languages are dependent on their data model and naturally they also carry the deficiencies of their data model and several quirks of their vendor&lt;/strong&gt;. So in my opinion that is where all bets are off. Better show me a new data model, describe how it deviates from other established data models, in what terms it is better and most important the functional operations, the basic mechanisms behind the implementation of a query language that is based on this data model.&lt;/p&gt;
&lt;p&gt;Speaking about HypergraphQL, and former Facebook GraphQL that is not something new. They originate from &lt;a href=&#34;https://en.wikipedia.org/wiki/Freebase&#34;&gt;Freebase MQL&lt;/a&gt; language, which &lt;a href=&#34;https://discourse.cayley.io/t/query-languages-tour/191&#34;&gt;according to Barak Michener&lt;/a&gt;, a former employer of Metaweb Technologies and later on of Google, it was mainly developed in the period between 2006-2008 to elevate GQL a query language for a kind of triple store database (graphd). And if we decide to search further back MQL approach looks like the Query by Example (&lt;a href=&#34;https://en.wikipedia.org/wiki/Query_by_Example&#34;&gt;QBE&lt;/a&gt;) language for relational databases that was devised during the mid-1970s, I still remember Ashton-Tate &lt;a href=&#34;https://en.wikipedia.org/wiki/DBase&#34;&gt;dBase&lt;/a&gt; product that I was playing with as a BSc student.&lt;/p&gt;
&lt;p&gt;But what really puzzles me is that I hardly see a strong mathematical foundation, e.g. like Codd&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_algebra&#34;&gt;relational algebra&lt;/a&gt;, that covers important features of all these query languages I mentioned above. I am specifically referring to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;closed vs open world assumption&lt;/li&gt;
&lt;li&gt;closure under operations&lt;/li&gt;
&lt;li&gt;constrains&lt;/li&gt;
&lt;li&gt;updates&lt;/li&gt;
&lt;li&gt;joins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is why in a &lt;a href=&#34;https://healis.eu/en/post/20180310/&#34;&gt;previous article&lt;/a&gt; of mine I have proposed to return back to the roots and investigate better the Relational Algebra and these reasons that made both SQL and NoSQL DBMS to deviate from the original relational model path.&lt;/p&gt;
&lt;p&gt;For those that follow my posts, they are aware that I am not speaking purely from a theoretical point of view. There is an alternative data model (&lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;R3DM/S3DM&lt;/a&gt;) that I propose, a particular software technology based on this (&lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Associative Semiotic Hypergraph&lt;/a&gt;) and two prototypes (&lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt;, &lt;a href=&#34;https://healis.eu/en/project/hypermorph/&#34;&gt;HyperMorph&lt;/a&gt;) implemented and demonstrated with an intuitive functional declarative way to query things. Nevertheless performance is a top priority, and that is what I am currently investigating.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/yet-another-query-language-really-athanassios-hatzis-phd/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Back to the roots, Relational Data Model</title>
      <link>https://healis.eu/en/post/20180310/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20180310/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#back-to-the-roots&#34;&gt;Back to the roots&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#relational-model-vs-other-data-models&#34;&gt;Relational model vs Other data models&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#our-perspective&#34;&gt;Our perspective&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;back-to-the-roots&#34;&gt;Back to the roots&lt;/h2&gt;
&lt;p&gt;Recently, I realized that the &lt;strong&gt;associative, semiotic, hypergraph&lt;/strong&gt;, or in short the &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;R3DM/S3DM&lt;/a&gt;, technology framework we propose to be adopted in database management systems can be considered in many ways an extension to &lt;a href=&#34;https://en.wikipedia.org/wiki/Edgar_F._Codd&#34;&gt;Codd&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational Model&lt;/a&gt;. I am aware that this is a big claim and certainly this is not the place or the time to lay down my arguments, suffice it to say how this occurred to me.&lt;/p&gt;
&lt;p&gt;I have partially implemented &lt;a href=&#34;https://healis.eu/en/project/triadb/&#34;&gt;TRIADB&lt;/a&gt; technology twice on top of two different &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_store&#34;&gt;data stores&lt;/a&gt; and I noticed that those &lt;strong&gt;add and get operations&lt;/strong&gt; we defined are closely related to Codd&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_algebra&#34;&gt;relational algebra operations&lt;/a&gt;, while data sets, i.e. domains, and a user defined type system match the &lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics)&#34;&gt;sets defined in mathematics&lt;/a&gt; and relational theory. Coincidentally Codd&amp;rsquo;s Relational logic goes back to Aristotle and the corner stone of our technology, which is the &lt;a href=&#34;https://healis.eu/en/project/r3dm/#computational-semiotic-triangle&#34;&gt;computational semiotic triangle&lt;/a&gt;, goes back to Aristotle too. I will briefly mention that one basic difference is that both the heading set and the body tuples of the Relation, in fact everything, are transformed and uniformly represented with numerical key references. Therefore it can also be called &lt;strong&gt;Reference Database Management System (RDBMS)&lt;/strong&gt;. All these are simply good indications. I believe we are on the right track.&lt;/p&gt;
&lt;p&gt;The truth is, and I will quote &lt;a href=&#34;https://en.wikipedia.org/wiki/Christopher_J._Date&#34;&gt;Chris Date&lt;/a&gt; here, that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;if you are proposing to replace technology A by technology B first is counted on you to understand technology A and then it is counted on you that there is some problem that technology A does not solve and technology B does solve&lt;/em&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the best person I have found to teach me Relational database technology, so that I can acquire an in-depth understanding, is Chris Date himself. The following video is a clip from an excellent, &lt;a href=&#34;http://shop.oreilly.com/product/0636920030553.do&#34;&gt;illuminating workshop that explains Codd&amp;rsquo;s Relational Theory&lt;/a&gt; to computer professionals, but most importantly, he shows what a real relational product would be like, and how and why it would be so much better than what’s currently available.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/qx0F7TfA8CI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;relational-model-vs-other-data-models&#34;&gt;Relational model vs Other data models&lt;/h2&gt;
&lt;p&gt;That said, allow me to have my doubts about whether many of the proponents of other database technologies, including those in SQL databases and those in NoSQL databases, have understood what are really the differences with respect to Relational model and at what abstraction level they occur. Again this is not the place or time to elaborate on this. Instead, I am inviting you to ponder on the architectural design of modern database management systems.&lt;/p&gt;
&lt;p&gt;You see in practice, it is too difficult to make a very clean separation between the physical, logical and conceptual levels of information. From an engineer&amp;rsquo;s point of view it is hard to separate theoretical from practical purposes. Moreover, many of these NoSQL DBMS, that are in fashion nowadays, are suited to solve a particular type of problem and this is why you often hear that big corporations and large companies have many different kinds of DBMS at the back-end. Not to mention that nowadays there is the trend to market many DBMS as multi-model database systems. And that made me also to realize that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;there has to be a distinction between those problems that one solves at the physical level e.g. physical layout, partition and availability and those that apply more at the logical-conceptual level e.g. integrity and data modeling. Therefore, I foresee that in the future systems will have to use a combination of these two levels that somehow will have to be tuned and made to work harmonically independent of each other&lt;/em&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;our-perspective&#34;&gt;Our perspective&lt;/h2&gt;
&lt;p&gt;This is our perspective towards the architectural design of modern database management systems that fully justifies our choice of &lt;strong&gt;marketing TRIADB as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Middleware&#34;&gt;middleware&lt;/a&gt;&lt;/strong&gt;. We are focusing to provide an &lt;strong&gt;efficient and effective solution at the logical and conceptual level&lt;/strong&gt; using an existing implementation of the database physical layer. Relational modeling theory applies here too, from what I understand it was the implementation details at the physical level and perhaps other naive simplifications that made many to depart from the original Relational model. So it&amp;rsquo;s time to return back to the roots and make some real progress.&lt;/p&gt;
&lt;p&gt;In case you, as a reader, have the same feelings and see some truth on my writing, I would be more than happy to discuss with you about the progress we are making with TRIADB and associative, semiotic, hypergraph technology and definitely exchange ideas and share some common thoughts on these database topics. Stay tuned.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/relational-database-vs-others-athanassios-hatzis-phd/&#34;&gt;LinkedIn - 20180305 Pulse Article - Relational Data Model : Back to the roots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Chris Date - SQL and Relational Theory Master Class - O&amp;rsquo;Reilly Workshop&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Athanassios I. Hatzis, LinkedIn post, March 2018&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The wizards of stored computer program and the next generation of programmers</title>
      <link>https://healis.eu/en/post/20170910/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170910/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#transparent-operations&#34;&gt;Transparent operations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#a-programming-language-with-a-built-in-database&#34;&gt;A programming language with a built-in database&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Have you noticed that what ever the model and data structure in databases we cannot escape from the fundamental principle of managing data allocation space with references, i.e. &lt;a href=&#34;https://en.wikipedia.org/wiki/Pointer_(computer_programming)&#34;&gt;pointer&lt;/a&gt; based logic, memory addressing ? Isn&amp;rsquo;t this the fundamental mechanism of programming languages too ? The problem I see with all these modern NoSQL databases, especially graph databases is that they provide a higher level abstraction for the end developer but they hide and lock completely the access to the low level storage and retrieval mechanism including indexes. Even in key-value stores you cannot see or understand the sorting of indexes, you cannot easily reference data values in permanent storage locations.&lt;/p&gt;
&lt;h2 id=&#34;transparent-operations&#34;&gt;Transparent operations&lt;/h2&gt;
&lt;p&gt;Transparency in computer science is a huge issue. The wizards and pioneers of computer hardware and software, have created multiple abstraction layers. They have hidden a lot of detail but at the same time they prevented access to low level mechanisms. And here comes the next generation that is asked to program the machine without understanding what is going on underneath. And even if there is such a desire, from the developer&amp;rsquo;s point of view, the operating system environment, the language and the debugging tools, not to mention the market, do not help us towards this direction. There have been few exceptions and one of them has been MUMPS (&lt;a href=&#34;https://en.wikipedia.org/wiki/MUMPS&#34;&gt;Massachusetts General Hospital Utility Multi-Programming System&lt;/a&gt;). I found astonishing the fact that M was developed by Neil Pappalardo, Robert Greenes, and Curt Marble &lt;strong&gt;during 1966 and 1967&lt;/strong&gt;. A reputable and established company in operational database market, Intersystems Cache, has taken over, expanded, and continued their effort on our days.&lt;/p&gt;
&lt;h2 id=&#34;a-programming-language-with-a-built-in-database&#34;&gt;A programming language with a built-in database&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GCOS_intro&#34;&gt;Cache ObjectScript&lt;/a&gt; does make the difference from many aspects. Here I would like to emphasize its strong characteristic of a built-in database with sub-scripted arrays and multi-dimensional keys similar to the variables used by most programming languages to access main memory. Let me repeat this, you get a programming language with a built-in &lt;a href=&#34;https://en.wikipedia.org/wiki/Multi-model_database&#34;&gt;multi-model database&lt;/a&gt;. I think this is a fundamental aspect that software pioneers have been missing when they invented new programming languages or new sql databases. They are missing the innate common characteristic that both databases and programming languages share, which is the pointer, reference based logic. What do you think ?&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;So I believe it&amp;rsquo;s time to return back and fix this for new generation multi-model databases AND post-modern programming languages too. We have already made a good start and we believe &lt;strong&gt;M&lt;/strong&gt; will make history again in database management and modeling with our &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Associative Semiotic Hypergraph Engine&lt;/a&gt; that will be built on top of Intersystems Cache powerful &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GGBL_structure&#34;&gt;global data structure&lt;/a&gt; and accompanied with a popular and easy to program client API in Python for data analytics.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/wizards-stored-computer-program-next-generation-hatzis-phd&#34;&gt;LinkedIn - 20170910 Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6313331795513479172&#34;&gt;LinkedIn - 20170912 Semantic Web Research Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/73235/73235-6313334609023238144&#34;&gt;LinkedIn - 20170912 Database Developers and Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6313333971115737091&#34;&gt;LinkedIn - 20170912 Database &amp;amp; Data Store Professionals ★ NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6313333228287721476&#34;&gt;LinkedIn - 20170912 Database Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6313334471701729282&#34;&gt;LinkedIn - 20170912 Graph Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/1969109/1969109-6313334298783154178&#34;&gt;LinkedIn - 20170912 MUMPS and Cache Development Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.intersystems.com/post/wizards-stored-computer-program-and-next-generation-programmers&#34;&gt;LinkedIn - 20170912 InterSystem Developer Community Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Are our old data model standards out of shape ?</title>
      <link>https://healis.eu/en/post/20170709/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170709/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#comparison-with-other-data-model-standards&#34;&gt;Comparison with other data model standards&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#namespace-problem&#34;&gt;Namespace problem&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#separate-abstraction-layers&#34;&gt;Separate abstraction layers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#granularity-with-air-units&#34;&gt;Granularity with AIR units&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#filtering-instead-of-querying&#34;&gt;Filtering instead of querying&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#a-solid-theoretical-background&#34;&gt;A solid theoretical background&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summarize&#34;&gt;Summarize&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Both Topic Maps and RDF/OWL exhibit signs of aging. In my opinion these signs do not indicate maturity levels but on the contrary they signal a re-examination of the data modeling, information representation problem. There is an emergent need to unify and exchange transformations between serialization formats (XML, JSON, etc), (graph) DBMS data model standards and semantic web data models.&lt;/p&gt;
&lt;p&gt;Hence this is my speech at European Wolfram Technology Conference 2017 about a new data modeling framework &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;R3DM/S3DM&lt;/a&gt; that is implemented on top of OrientDB graph database and coded in Wolfram Mathematica.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BZleqH7iMng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;comparison-with-other-data-model-standards&#34;&gt;Comparison with other data model standards&lt;/h2&gt;
&lt;p&gt;These are a few critical points to consider when you compare this data model with Topic Maps and RDF/OWL:&lt;/p&gt;
&lt;h3 id=&#34;namespace-problem&#34;&gt;Namespace problem&lt;/h3&gt;
&lt;p&gt;Both RDF/OWL and Topic Maps are suffering from namespace problems and complexity. In topic maps for example, when you want to define associations, i.e. n-ary relations, relationships you must specify at least type and roles. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Part(08:pid, &amp;quot;Acme Widget Washer&amp;quot;:pname, white:pcolor )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But in this representation you do not have a handle for the association instance and the context of roles has always to be present to assign meaning on values. Things become even more complicate with RDF association (type or instance) where everything has to be broken down in triples with labeled uni-directional edges.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Prt1 --pid--&amp;gt; 08, Prt1 --pname--&amp;gt; &amp;quot;Acme Widget Washer&amp;quot;, Prt1 --pcolor--&amp;gt; white}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The predicate of RDF triplet is causing more harm than good. Any SPARQL traversal algorithm is heavily dependent on these predicates, and in practice for large collaborative knowledge bases, e.g. Freebase, they used to label both directions to make traversal easier. You may also consider that owl:sameAs adds more complexity in the graph and traversal.&lt;/p&gt;
&lt;p&gt;Now compare these with the simplicity of Entity-Relationship model. The database vocabulary has the header of the association (relation) and the body contains tuples.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tuple type      : (pid, pname, pcolor)&lt;/code&gt;
&lt;code&gt;tuple instance  : (08, &amp;quot;Acme Widget Washer&amp;quot;, white)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Is there an alternative representation to combine these ? Yes there is, you make a &lt;strong&gt;uniform numerical representation&lt;/strong&gt; of types and instances, of entities and attributes, of data values and data types and you bind everything in a hypergraph space.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tuple type     : 233:0{85:0, 91:0, 34:0}&lt;/code&gt;
&lt;code&gt;tuple instance : 233:1[85:6, 91:2, 34:9]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The vocabulary of relational model (header) permits to have &lt;strong&gt;ordered tuples&lt;/strong&gt; of values (body), the numerical reference vectors of R3DM/S3DM model permits to have &lt;strong&gt;unordered tuples&lt;/strong&gt; and there is a handle that represents each tuple instance. In RDF to represent a tuple you have to break it down into triples where you repeat the &lt;code&gt;subject&lt;/code&gt;. And values (&lt;code&gt;objects&lt;/code&gt;) &lt;strong&gt;must be semantically accompanied by the predicate&lt;/strong&gt;. Thus R3DM/S3DM associative representation with numerical references is simpler and it proves to be more efficient with indexing too !&lt;/p&gt;
&lt;h3 id=&#34;separate-abstraction-layers&#34;&gt;Separate abstraction layers&lt;/h3&gt;
&lt;p&gt;It is important to separate digital information resources, e.g. web pages, files, folders, audio/video recordings, images, text documents etc from real things e.g. humans, organizations, objects, etc. It is also important to distinguish between a flexible model and its instances. But it is equally or more important to separate any abstract concept from data values (numerical, string, bits, etc). Because the first is the vehicle for human thinking and the second is the way computers are processing data. Therefore this gap has to be bridged somehow. R3DM/S3DM achieves this with an extra abstraction layer where everything is connected with &lt;a href=&#34;https://healis.eu/en/post/20150320/&#34;&gt;Atomic Information Resource&lt;/a&gt; (AIR) units. This AIR unit defines also the level of granularity. Instead of building everything with Topics, you use AIR units.&lt;/p&gt;
&lt;h3 id=&#34;granularity-with-air-units&#34;&gt;Granularity with AIR units&lt;/h3&gt;
&lt;p&gt;But the AIR unit has the advantage that can be indexed easily, it is represented with a numerical vector, an address that can pinpoint the exact location of an Entity-Attribute-Value item. It is similar to an IPv4 address of a machine (e.g. domain, network, server, node/device/machine). My question is the following. &lt;span class=&#34;markup-quote&#34;&gt;If we use such addresses for connecting machines on the internet, why don&amp;rsquo;t we establish a similar standard for connecting data ?&lt;/span&gt; An AIR unit is the fundamental powerful construction unit for smart data. It knows its siblings, its parent, its type, its nexus, its associated AIR units (nodes). A tuple of such units can stand on its own, without a header and its completely meaningful because the context has already been defined.&lt;/p&gt;
&lt;h3 id=&#34;filtering-instead-of-querying&#34;&gt;Filtering instead of querying&lt;/h3&gt;
&lt;p&gt;Thanks to the uniform representation of everything with AIR units that are connected with bidirectional edges there is no need to define a query language but instead you define powerful functional operations that filter and add data in an associative manner in a fully typed environment. R3DM/S3DM supports types for database metadata, data sources, models, entity types, attribute types, items (instances), link types and value types. Again everything is constructed with AIR units. Both bidirectional edges and a full type system that is based on primitives were key features of Metadata Freebase project and then Google&amp;rsquo;s knowledge graph.&lt;/p&gt;
&lt;h3 id=&#34;a-solid-theoretical-background&#34;&gt;A solid theoretical background&lt;/h3&gt;
&lt;p&gt;R3DM/S3DM data model is founded on the theory of semiosis. There have been attempts to connect RDF/OWL with Aristotle&amp;rsquo;s triangle of reference/meaning but in my opinion they fail to capture the essence of the abstraction mechanism in semiosis which is played by the sign as the vehicle of communication between the signifier and the signified.&lt;/p&gt;
&lt;h2 id=&#34;summarize&#34;&gt;Summarize&lt;/h2&gt;
&lt;p&gt;To summarize the power of R3DM/S3DM is hidden on its Atomic Information Resource units that are fully typed, addressable and can be dereferenced and the formation of n-ary bidirectional associations.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-6289775148434366465&#34;&gt;LinkedIn - 20170709 Topic Maps Group Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6289922338628734979&#34;&gt;LinkedIn - 20170709 Semantic Web Research Group Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/our-old-data-model-standards-out-shape-athanassios-i-hatzis-phd&#34;&gt;LinkedIn - 20170709 Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6262704855635365889&#34;&gt;LinkedIn - 20170409 Update about namespace problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The three dimensions of AI and a fourth one as the key to unlock them</title>
      <link>https://healis.eu/en/post/20170623/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170623/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#abstract&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In an awesome &lt;a href=&#34;http://www.darpa.mil/about-us/darpa-perspective-on-ai&#34;&gt;review of AI&lt;/a&gt; John Launchbury, special assistant to DIRO, DARPA, defined four dimensions of processing information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;perceiving&lt;/li&gt;
&lt;li&gt;learning&lt;/li&gt;
&lt;li&gt;abstracting&lt;/li&gt;
&lt;li&gt;reasoning&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-O01G3tSYpU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This is not any perspective on AI, it is a perspective from the founders and pioneers of internet. Although there has been significant progress with first and second generation AI systems in reasoning, learning and perceiving, abstraction has not been part of the game. In fact Launchbury could not say much about this in his talk.&lt;/p&gt;
&lt;p&gt;Nevertheless he explained clearly where we are heading in the &lt;strong&gt;third generation of AI systems&lt;/strong&gt;. Models and contextual information will play a critical role. But this is a pretty close match with &lt;a href=&#34;https://en.wikipedia.org/wiki/Semiosis&#34;&gt;Aristotle’s theory of semiosis&lt;/a&gt;. The mechanism of abstraction is related to the ideal world of models and the world of real objects. Those two worlds are bridged by symbols, signs and these create meaning in contextual information. So this is the objective of third generation AI.&lt;/p&gt;
&lt;p&gt;It is not a coincidence that I have been investigating since 2012 how this &lt;a href=&#34;https://en.wikipedia.org/wiki/Triangle_of_reference&#34;&gt;triangle of meaning&lt;/a&gt; can be applied to the problem of information representation. Recently I have presented officially to the public &lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;R3DM/S3DM&lt;/a&gt; data modeling framework in &lt;a href=&#34;https://healis.eu/en/talk/triadb_wolfram/&#34;&gt;European Wolfram Technology Conference&lt;/a&gt;. In one of his talks Conrad Wolfram emphasized how important is abstraction to education and learning. But so far this mechanism of abstraction has not been computable. This is what we anticipate to see in the near future.&lt;/p&gt;
&lt;p&gt;The mechanism of abstraction can unify these other three processes of perception-interpretation, learning, and reasoning. And it can also &lt;strong&gt;interconnect every thing on the internet, every bit of information, in the very same way our computers are interconnected with IP addresses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We are here to &lt;strong&gt;build powerful, meaningful relationships easily&lt;/strong&gt;. This is our mantra after all.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/three-dimensions-ai-fourth-one-key-unlock-them-hatzis-phd&#34;&gt;LinkedIn - 23/06/2017 Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Data Modelling Topologies of a Graph Database</title>
      <link>https://healis.eu/en/post/20170228/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170228/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#definition&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#graph-databases-per-data-model&#34;&gt;Graph Databases Per Data Model&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;p&gt;There is a lot of confusion with the definition of graph databases. In my opinion, any definition that avoids any reference to the semantics of nodes and edges or their internal structure is preferable. Failing to follow this guideline, it is unavoidable to favor specific implementations, e.g. &lt;a href=&#34;http://neo4j.com/developer/graph-database/&#34;&gt;Property Graph Databases&lt;/a&gt; or &lt;a href=&#34;http://en.wikipedia.org/wiki/Triplestore&#34;&gt;Triple Stores&lt;/a&gt;, and you may easily become myopic to other types that are based on different models, e.g. &lt;a href=&#34;http://hypergraphdb.org/&#34;&gt;hypergraph databases&lt;/a&gt;, or different data storage paradigms, e.g. &lt;a href=&#34;http://en.wikipedia.org/wiki/Key-value_database&#34;&gt;key-value stores&lt;/a&gt;. Therefore, I propose we adopt a vendor neutral definition, such as the following one, which cannot exclude any future type of graph database.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Graph Database is a database that uses a graph topology, i.e. vertices and edges, to manage information at the conceptual level independent of the logical and physical implementation of the graph data structure - &lt;a href=&#34;https://www.linkedin.com/pulse/data-modelling-topologies-graph-database-athanassios-i-hatzis-phd&#34;&gt;Athanassios I. Hatzis&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;graph-databases-per-data-model&#34;&gt;Graph Databases Per Data Model&lt;/h2&gt;
&lt;p&gt;That said, there are many differences regarding to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_abstraction_layer&#34;&gt;abstraction layer&lt;/a&gt; of databases. These affect everything — visualization, query language, indexing, scaling, and transactions. Now, let me focus on the conceptual/logical layer, where my work is based. Depending on the structure of nodes and edges, one can describe the following three different data models.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Property Graph Data Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Directed Labeled Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entity-centric with embedded properties and edges with bidirectional linking to nodes&lt;/li&gt;
&lt;li&gt;Neo4J, OrientDB, ArrangoDB, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Triple/Quadruple Data Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Directed Labeled Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Edge-centric with unidirectional linking on vertices&lt;/li&gt;
&lt;li&gt;GraphDB, AllegroGraph, OpenLink Virtuoso, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Associative Data Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hypergraph/Bipartite Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Hypernodes, Hyperedges with bidirectional linking&lt;/li&gt;
&lt;li&gt;Topic Map Data Model, R3DM/S3DM, X10SYS (AtomicDB), HypergraphDB, Qlik Technology&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two main differences between &lt;strong&gt;(1)&lt;/strong&gt; and &lt;strong&gt;(2)&lt;/strong&gt;. First, the type of edges in a property graph, by definition, is bidirectional. You can traverse any edge both ways, despite the fact there is a direction on the edge. On the contrary, with RDF, you have to define two labeled edges with opposite directions to achieve bidirectional linking. And secondly, in literal triples, object parts are properties of a subject part, but they are not first-class citizens and they are not embedded inside the structure of Entity nodes of a property graph.&lt;/p&gt;
&lt;p&gt;I left the associative data model as the last thing to mention. &lt;strong&gt;R3DM/S3DM is the reincarnation of Topic Maps&lt;/strong&gt;, the de facto standard for the representation of associations. The following series of posts on associative data modeling is written with a hands-on practice style. It is an attempt to clear the information glut of many-to-many relationships (a.k.a associations) with a thorough examination of well-known data models and at the same time introduce R3DM/S3DM to the public.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160825/&#34;&gt;Part 1/6&lt;/a&gt; - Relation, Relationship, and Association&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160902/&#34;&gt;Part 2/6&lt;/a&gt; - Association in Topic Map Data Model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20160913/&#34;&gt;Part 3/6&lt;/a&gt; - Association in Property Graph Data Model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20161220/&#34;&gt;Part 4/6&lt;/a&gt; - Association in RDF Data Model and Sentences associative data model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170211/&#34;&gt;Part 5/6&lt;/a&gt; - Qlik Associative Mode&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://healis.eu/en/post/20170412/&#34;&gt;Part 6/6&lt;/a&gt; - R3DM/S3DM Associative Semiotic Hypergraph Data Model&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;The verdict from this quick review on graph databases is that I have reasons to believe that associative data modeling is far more powerful and expressive than the other two. I foresee that DBMS vendors that will incorporate in their products R3DM/S3DM technology will eventually have a significant competitive advantage.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/data-modelling-topologies-graph-database-athanassios-i-hatzis-phd&#34;&gt;LinkedIn - 27/02/2017 Pulse Article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6263485831336599552&#34;&gt;LinkedIn - 28/04/2017 Post about Robin Bloor on driving BI in real-time&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6263495928863432704&#34;&gt;LinkedIn - 28/04/2017 Post about Thomas Frisendal on atomic data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217&#34;&gt;LinkedIn - 04/05/2017 Featured on Semantic Web Research Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034&#34;&gt;LinkedIn - 04/05/2017 Featured on Computational Semiotics Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3732032/3732032-6265904280549629955&#34;&gt;LinkedIn - 04/05/2017 IT Professionals Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62438/62438-6265907308967137283&#34;&gt;LinkedIn - 04/05/2017 Business Analytics Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/1814785/1814785-6265911933967433731&#34;&gt;LinkedIn - 04/05/2017 Big Data Analytics Strategy Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/groups/23006/23006-6265914043991752705&#34;&gt;LinkedIn - 04/05/2017 Big Data Analytics BI &amp;amp; Visualization Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6273393604094492672/&#34;&gt;LinkedIn - 25/05/2017 Post Comment SQL to NoSQL translator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/data-modelling-topologies-of-a-graph-database&#34;&gt;DZone    - 17/03/2017 Article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/permalink.php?story_fbid=1260208257411844&amp;id=811804875585520&#34;&gt;Facebook - 04/05/2017 HEALIS Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.datasciencecentral.com/profiles/blogs/data-modelling-topologies-of-a-graph-database&#34;&gt;Data Science Central - 17/06/2017 Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Quick Guide on How to Prevail in the Graph Database Arena</title>
      <link>https://healis.eu/en/post/20170213/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20170213/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#definition-of-graph-databases&#34;&gt;Definition of Graph Databases&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#many-to-many-relationships&#34;&gt;Many-to-many Relationships&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#multi-model-database-engine&#34;&gt;Multi-model Database Engine&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#physical-versus-logical-perspective&#34;&gt;Physical versus Logical Perspective&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conceptual-framework&#34;&gt;Conceptual Framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#query-language&#34;&gt;Query Language&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#business-analytics&#34;&gt;Business Analytics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are endless discussions in the databases arena about which DBMS is best suited for operational or data warehousing analytics, which one is the most efficient for online transaction processing, or which one is suitable for semantic integration. Recently graph databases are growing in popularity, especially in the enterprise space, and perhaps that adds more headache on those vendors that try to differentiate from competition and on those clients that are completely uncertain how to embrace this database technology.&lt;/p&gt;
&lt;h2 id=&#34;definition-of-graph-databases&#34;&gt;Definition of Graph Databases&lt;/h2&gt;
&lt;p&gt;Recently &lt;a href=&#34;http://www.bloor.eu/&#34;&gt;Bloor&lt;/a&gt; published a report about &lt;a href=&#34;http://www.bloorresearch.com/research/market-report/graph-and-rdf-databases-2016/&#34;&gt;Graph and RDF Databases&lt;/a&gt;. The author, &lt;a href=&#34;http://www.bloorresearch.com/profiles/philip-howard/https://en.wikipedia.org/wiki/ACID&#34;&gt;Philip Howard&lt;/a&gt;, claims that &amp;ldquo;&lt;em&gt;the difference between a true graph product and a triple store is that the former supports index free adjacency (which means you can traverse a graph without needing an index) and the latter doesn&amp;rsquo;t&lt;/em&gt;&amp;rdquo;. On the contrary Weinberger, CEO of ArrangoDB, argues that this is not a fundamental criterion on what is a graph database. In a post titled &amp;ldquo;&lt;a href=&#34;https://www.arangodb.com/2016/04/index-free-adjacency-hybrid-indexes-graph-databases/&#34;&gt;Index Free Adjacency or Hybrid Indexes for Graph Databases&lt;/a&gt;&amp;rdquo; he proposes that the definition of graph database remains&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;a database that uses graph structures for semantic queries with nodes, edges and properties to represent and store data independent of the way the data is stored internally - Claudius Weinberger&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed, in the same Bloor report a distinction between native and non-native graph databases is made based on their engine. In my opinion, any definition that avoids any reference to the semantics of nodes and edges or their internal structure is preferable. Failing to follow this guideline, it is unavoidable to favor specific implementations, e.g. Property Graph Databases or Triple Stores, and you may easily become myopic to other types that are based on different models, e.g. hypergraph databases, or different data storage paradigms, e.g. key-value stores. Therefore, I propose we adopt a vendor neutral definition, such as the following one, which cannot exclude any future type of graph database.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Graph Database is a database that uses a graph topology, i.e. vertices and edges, to manage information at the conceptual level independent of the logical and physical implementation of the graph data structure - Athanassios I. Hatzis, 28th February 2017&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;many-to-many-relationships&#34;&gt;Many-to-many Relationships&lt;/h2&gt;
&lt;p&gt;In another recently published Spotlight paper by Bloor, &lt;a href=&#34;http://www.bloorresearch.com/research/spotlight/all-about-graphs-a-primer/&#34;&gt;&amp;ldquo;All about graphs: a primer&amp;rdquo;&lt;/a&gt;, the author discusses the Graph data model and highlights the representational differences of a many-to-many relationship including those of bipartite, hypergraph and associative graphs. He observes that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;unlike other new database approaches, graphs cannot easily be subsumed by the leading relational database vendors because the architectural constraints of graphs do not fit easily within the relational paradigm - Philip Howard&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He mentions that the two main variants on entity relationships are labeled property graphs and &lt;code&gt;subject-predicate-object&lt;/code&gt; triples. In practice, although the idea of relationships (associations) between entities is at the heart of Peter Chen&amp;rsquo;s Entity-Relationship model, &lt;a href=&#34;https://healis.eu/en/post/20160825#fig2&#34;&gt;&lt;strong&gt;Fig.2&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20160825#fig3&#34;&gt;&lt;strong&gt;Fig.3&lt;/strong&gt;&lt;/a&gt;, there are subtle dissimilarities in its implementation on various graph databases. &lt;a href=&#34;https://healis.eu/en/about#athanassios&#34;&gt;A. Hatzis&lt;/a&gt;, in a &lt;a href=&#34;https://healis.eu/en/post/20170420/&#34;&gt;series of posts on associative data modeling&lt;/a&gt;, that is written with a hands-on practice style, attempts to clear the information glut of this topic with a thorough examination of graph data models.&lt;/p&gt;
&lt;h2 id=&#34;multi-model-database-engine&#34;&gt;Multi-model Database Engine&lt;/h2&gt;
&lt;p&gt;The graph engine and the type of data model are critical factors for any graph database. Therefore it is not strange that many vendors have started marketing their DBMS as a multi-model. We have extensive and long experience with two such products, &lt;a href=&#34;http://orientdb.com/orientdb/&#34;&gt;OrientDB&lt;/a&gt; and &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GIC_intro&#34;&gt;Intersystems Cache&lt;/a&gt;. The former supports Graph, Document, Key/Value, and Object models, the latter is an object database with relational access, integrated support for JSON documents and a multidimensional key-value storage mechanism that can be easily extended to cover Graph data model. Generally speaking, we have reasons to believe that &lt;strong&gt;multi-model DBMS will dominate the database market&lt;/strong&gt;. Currently OrientDB has become a leading player in the graph databases and Intersystems Cache is one of the best operational DBMS according to &lt;a href=&#34;https://www.gartner.com/doc/3467318/magic-quadrant-operational-database-management&#34;&gt;Magic Quadrant report&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;physical-versus-logical-perspective&#34;&gt;Physical versus Logical Perspective&lt;/h2&gt;
&lt;p&gt;Not only has a multi-model database been flexible with its logical schema, but it also has a unified storage data architecture. Although the developer should hardly need access to the physical implementation details of the storage engine, an API for direct use of the engine is desirable and beneficial for many reasons. Most important, this kind of architecture allows someone to build a customized database management system. In theory, ANSI/SPARC three level architecture (external, conceptual/logical and physical) is an effort to allow these three perspectives to be relatively independent of each other, but &lt;strong&gt;in practice the front-end of a DBMS is most often strongly dependent on the back-end storage data model&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;loose coupling&lt;/a&gt; can be achieved with associative/multidimensional arrays. No matter what is their physical implementation, i.e. hash tables or trees, based on this abstract data type you can &lt;a href=&#34;http://mgateway.com/docs/universalNoSQL.pdf&#34;&gt;model all four NoSQL database types&lt;/a&gt;, (Key/Value, Tabular/Columnar, Document, Graph). For one reason or another, we are of the opinion that &lt;strong&gt;associative/multidimensional arrays will eventually prevail in the world of databases&lt;/strong&gt;. There is already strong competition for their best physical implementation and sparse, column-family store, databases have proven to be very popular (&lt;a href=&#34;http://hbase.apache.org/book.html#architecture&#34;&gt;HBase&lt;/a&gt;, &lt;a href=&#34;http://www.hypertable.com/documentation/architecture/&#34;&gt;Hypertable&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/bigtable/&#34;&gt;BigTable&lt;/a&gt;, &lt;a href=&#34;http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GIC_intro&#34;&gt;Intersystems Cache&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are other properties that are crucial for &lt;a href=&#34;https://en.wikipedia.org/wiki/Operational_database&#34;&gt;operational database management systems&lt;/a&gt; such as &lt;a href=&#34;https://en.wikipedia.org/wiki/ACID&#34;&gt;ACID transactions&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_database&#34;&gt;distributed data architecture&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Scalability&#34;&gt;scalability&lt;/a&gt;. Whether we are talking for a multi-model or single model graph databases, there is a tendency to use them for on-line transaction processing therefore these properties are worth having. And again in terms of architectural design there is always the problem of how to achieve a loose coupling between the physical structures of a database and the application logic.&lt;/p&gt;
&lt;h2 id=&#34;conceptual-framework&#34;&gt;Conceptual Framework&lt;/h2&gt;
&lt;p&gt;With that said it brings us to the question on what kind of logical/conceptual data model architecture to use. Our R3DM/S3DM framework is based on the powerful theory of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Triangle_of_reference&#34;&gt;semiotic triangle&lt;/a&gt;. We use numerical vectors (signs), to encode abstract things in our mind (signified) to which the sign refers, e.g. Person, name, Car, model. We associate these with  data containers-forms that the sign takes for the storage of data values (signifier), i.e. primitive data types (see also &lt;a href=&#34;https://en.wikipedia.org/wiki/Signified_and_signifier&#34;&gt;Signified and Signifier&lt;/a&gt;). This trilateral principle of our framework permits a uniform treatment of semantics, syntax and storage of information based on a symbolic representation. This way we define a fundamental, atomic information resource unit, &lt;a href=&#34;https://healis.eu/en/post/20150320/&#34;&gt;(AIR)&lt;/a&gt;. Those units, in turn, can be easily shaped to form any tabular, hierarchical, or graph data structure in a unified way. For example, study this &lt;a href=&#34;https://healis.eu/en/post/20170211#r3dm-hypergraph-representation&#34;&gt;R3DM hypergraph representation&lt;/a&gt; of Qlikview associative model. &lt;a href=&#34;https://en.wikipedia.org/wiki/Granularity&#34;&gt;Data granularity&lt;/a&gt; can be also deeply connected and related to the definition of a fundamental unit of processing.&lt;/p&gt;
&lt;p&gt;Based on this single primitive construct as a building block, (AIR), we have implemented seven type systems for an upper level management of any DBMS. These are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;SYSTEM&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;SHORTNAME&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. SYS_Dataset&lt;/td&gt;
&lt;td&gt;DSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. SYS_DomainModel&lt;/td&gt;
&lt;td&gt;DMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. SYS_EntityType&lt;/td&gt;
&lt;td&gt;ETS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4. SYS_AttributeType&lt;/td&gt;
&lt;td&gt;ATS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. SYS_ValueType&lt;/td&gt;
&lt;td&gt;VTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6. SYS_LinkType&lt;/td&gt;
&lt;td&gt;LTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7. SYS_Database&lt;/td&gt;
&lt;td&gt;DBS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We characterize Datasets, Domain Models (schemas), Entities, Attributes, etc, as information resources, values are information realization and our AIR units that represent everything are called information representations or simply references. Our current implementation phase has been completed on top of OrientDB and a forthcoming article will present R3DM/S3DM architecture in detail. In the past, &lt;a href=&#34;https://www.linkedin.com/pulse/why-google-shuts-down-freebase-30th-june-2015-hatzis-phd&#34;&gt;Freebase collaborative knowledge graph&lt;/a&gt; had a type system that was built on primitive constructs.&lt;/p&gt;
&lt;h2 id=&#34;query-language&#34;&gt;Query Language&lt;/h2&gt;
&lt;p&gt;Yet another decisive norm in databases is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_language&#34;&gt;query language&lt;/a&gt;. With RDF directed, labeled graph data format and with &lt;a href=&#34;https://en.wikipedia.org/wiki/Triplestore&#34;&gt;RDF store&lt;/a&gt; databases respectively, e.g. &lt;a href=&#34;https://virtuoso.openlinksw.com/&#34;&gt;OpenLink Virtuoso&lt;/a&gt;, &lt;a href=&#34;http://allegrograph.com/allegrograph/&#34;&gt;AllegroGraph&lt;/a&gt; and &lt;a href=&#34;http://ontotext.com/products/graphdb/&#34;&gt;Ontotext GraphDB&lt;/a&gt;, &lt;a href=&#34;https://www.w3.org/TR/rdf-sparql-query/&#34;&gt;SPARQL&lt;/a&gt; query language is a standard way to retrieve data. On the contrary the query language of property graph databases varies a lot. There are similar to SQL APIs such as those of &lt;a href=&#34;http://orientdb.com/orientdb/&#34;&gt;OrientDB&lt;/a&gt; and &lt;a href=&#34;https://www.arangodb.com/&#34;&gt;ArrangoDB&lt;/a&gt;, &lt;a href=&#34;https://neo4j.com/&#34;&gt;Neo4J&lt;/a&gt; is using its own Cypher declarative graph query language and there is also the Gremlin open-source graph programming language.&lt;/p&gt;
&lt;p&gt;Another approach is that of &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; which is similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Freebase#Overview&#34;&gt;Freebase MQL query language&lt;/a&gt;. Queries are shaped in JSON hierarchical format with patterns that follow the schema of the graph database.&lt;/p&gt;
&lt;p&gt;We have developed a &lt;a href=&#34;https://healis.eu/en/post/20160210/&#34;&gt;functional RESTful API&lt;/a&gt; that can be served as a prototype for a uniform, universal treatment of data language. Commands and their parameters can become more efficient and they can be simplified if we take on account the hierarchical relationship of Server, Database, Class, Property and Record containers. There are five sets of commands for getting, updating, deleting, adding and linking information. Current implementation is built with Wolfram Language and we will expose more details in a forthcoming article where we analyze R3DM/S3DM architecture.&lt;/p&gt;
&lt;h2 id=&#34;business-analytics&#34;&gt;Business Analytics&lt;/h2&gt;
&lt;p&gt;Last but not least, there is an emerging need for databases that can function as both analytic and operational. In particular, the modern data warehouse should unify all client&amp;rsquo;s transactional databases as well as integrate other external data sources that enable data cleansing, validation and enhancement. Not only that, but for quick and smart business analytics the interface should be both user friendly and functionally powerful. We are aware of such a player in this market segment with a technology that possess similar features to our R3DM/S3DM framework. This is the reason that we devoted &lt;a href=&#34;https://healis.eu/en/post/20170211/&#34;&gt;one of our articles&lt;/a&gt; to describe &lt;a href=&#34;http://www.qlik.com/us/products/qlikview&#34;&gt;QlikView&amp;rsquo;s&lt;/a&gt; unique, award-winning, in-memory associative technology.&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Make no mistake, relational databases are the past of computer database technology. Graph databases are the present and the future. This quick review on what we considered important criteria for graph database related technology products might leave the reader in more perplexity than satisfaction. This is our perspective, we wanted to share some of our knowledge with experts and chief technology persons on this field so that we could discuss the matter in more detail with them. The future will show in how many of these discussion topics we were right.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/quick-guide-how-prevail-graph-database-arena-hatzis-phd&#34;&gt;LinkedIn - Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-6236916644548091906&#34;&gt;LinkedIn - Semantic Web Research Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-6236916721563901952&#34;&gt;LinkedIn - Graph Databases Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/108904/108904-6236916684649828353&#34;&gt;LinkedIn - Data Warehouse &amp;amp; Business Intelligence Architects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-6236916721589059584&#34;&gt;LinkedIn - Computational Semiotics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-6236916585051881475&#34;&gt;LinkedIn - Database &amp;amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/73235/73235-6236915823848628225&#34;&gt;LinkedIn - Database Developers and Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2357895/2357895-6273464481200902148&#34;&gt;LinkedIn - Data Modeling Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/hp/update/6236886400814452736&#34;&gt;LinkedIn - Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-6236916721589059585&#34;&gt;LinkedIn - Database Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/4344857/4344857-6236916644548091907&#34;&gt;LinkedIn - OrientDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/1969109/1969109-6236915855192657924&#34;&gt;LinkedIn - MUMPS and Cache Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-criteria-to-differentiate-graph-databases/answer/Athanassios-Hatzis-PhD&#34;&gt;Quora - Question and Answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/a-quick-guide-to-prevail-in-the-graph-database-arena&#34;&gt;DZone - Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencecentral.com/profiles/blogs/a-quick-guide-on-how-to-prevail-in-the-graph-database-arena&#34;&gt;Data Science Central - Blog Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.intersystems.com/post/how-intersystems-cach%C3%A9-fits-graph-database-arena&#34;&gt;Intersystems Developer Community - 21/2/2017 Post about how Intersystems Cache fits in the Graph Database Arena&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Know-How is How you Know</title>
      <link>https://healis.eu/en/post/20160729/</link>
      <pubDate>Fri, 29 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20160729/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-problem&#34;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#about-knowledge&#34;&gt;About Knowledge&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-know-how-is-how-you-know&#34;&gt;The Know-How is how you know&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-i-know-something-or-someone-phrase&#34;&gt;The &amp;ldquo;I know something or someone&amp;rdquo; phrase&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-i-know-this-is-true-phrase&#34;&gt;The &amp;ldquo;I know this is true&amp;rdquo; phrase&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#epilogue&#34;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Perhaps there is not a better phrase to start this post than the Socratic paradox,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/I_know_that_I_know_nothing&#34;&gt;All I know is that I know nothing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is typical of the great gap that exists between &lt;a href=&#34;https://healis.eu/en/post/20150523/&#34;&gt;Eastern and Western way of thinking&lt;/a&gt; about fundamental concepts such as information, knowledge and wisdom. In my opinion we have become too ignorant and arrogant boasting about our knowledge that we cannot even understand the basics of it. This is all too evident in Information/Computer Science fields. The well-known &lt;strong&gt;Data-Information-Knowledge-Wisdom&lt;/strong&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/DIKW_pyramid&#34;&gt;DIKW&lt;/a&gt;) pyramid has become a popular shorthand representation for the data to information to knowledge to wisdom transformation. As a result of this we, the information/computer scientists, often hear about knowledge representation and inference, knowledge extraction, knowledge management and knowledge organization.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;dikw.jpeg&#34; &gt;

&lt;img src=&#34;dikw.jpeg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Data-Information-Knowledge-Wisdom&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;This mechanized perception and realization of knowledge can easily lead people to believe that machines can become wise and they can become wise too by following this transformation process. The main appeal to this common belief is that we are completely ignorant on how these words, i.e. information, knowledge and wisdom were defined and used in the past by our ancestors. Most important is the fact that we have replaced their meaning and definition with other words that are inferior and subservient as symbols. An example of this phenomenon is the definition of the word information. Inform comes from the Latin verb informare, which literally means to give form, or to form an idea of. Where the &lt;strong&gt;ancient and modern Greek word for information is πληροφορία, which transliterates (plērophoria) from πλήρης (plērēs) “fully” and φέρω (phorein) frequentative of (pherein) to carry through&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. You may realize how different becomes your thinking by using one or the other definition of the word and perhaps how narrow is your thinking if you are missing completely the older ancient Greek definition of the word information. But this was the subject of a &lt;a href=&#34;https://healis.eu/en/post/20150523/&#34;&gt;previous post&lt;/a&gt; of mine.&lt;/p&gt;
&lt;h2 id=&#34;about-knowledge&#34;&gt;About Knowledge&lt;/h2&gt;
&lt;p&gt;In this post we focus on knowledge. How do we define knowledge ? According to &lt;a href=&#34;http://plato.stanford.edu/entries/knowledge-how/&#34;&gt;Stanford Encyclopedia of Philosophy&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;it is common in epistemology to distinguish among three kinds of knowledge. There&amp;rsquo;s the kind of knowledge you have when it is truly said of you that you know how to do something—say, ride a bicycle. There&amp;rsquo;s the kind of knowledge you have when it is truly said of you that you know a person—say, your best friend. And there&amp;rsquo;s the kind of knowledge you have when it is truly said of you that you know that some fact is true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-know-how-is-how-you-know&#34;&gt;The Know-How is how you know&lt;/h2&gt;
&lt;p&gt;The first definition of knowledge, i.e. the know-how, is most evident in our learning process. It is about acquiring knowledge through practicing and experiencing the difficulties and different situations that may arise. If you want to become, let&amp;rsquo;s say a neurosurgeon, reading books, watching videos and attending classes in a medical school is not going to make you a neurosurgeon. If you do not have hands-on practical training on a operating room with your colleagues, under the supervision of an experienced neurosurgeon, it is most probable that you are going to kill your first patient. Learning to perform a surgery simply means you know how to do it. Wikipedia definition on knowledge is very enlightening:  &lt;em&gt;&amp;ldquo;knowledge is a familiarity, awareness or understanding of someone or something, such as facts, information, descriptions, or skills, which is acquired through experience or education by perceiving, discovering, or learning&amp;rdquo;&lt;/em&gt;. Therefore, it seems we are are paying too much attention and we emphasize the awareness and understanding of facts and information part instead of focusing on the experience, education and learning part. Thus &lt;strong&gt;we are only informed about things&lt;/strong&gt;, such as processes, events, organizations, people, but deeply inside we do not know anything about them, i.e. &lt;strong&gt;know how is how you know&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-i-know-something-or-someone-phrase&#34;&gt;The &amp;ldquo;I know something or someone&amp;rdquo; phrase&lt;/h2&gt;
&lt;p&gt;How you know him or this or that ? Most often we mean that it just happens, by coincidence, to meet him once in person, or we heard about something, or we read about this or that. And especially for people, I am sure that many of you think that they know someone well, until it comes the day you understand how wrong you are. &lt;strong&gt;This &amp;ldquo;know&amp;rdquo; perception of ours is what I was referring to as the inferior subservient purpose&lt;/strong&gt;.  This is also the case when information and computer scientists claim that &lt;strong&gt;they know how to extract or manage or organize knowledge&lt;/strong&gt;.  It just means they are capable of modeling, composing, structuring, storing, analyzing information in a clever way and they are simply aware of this fact. By analogy of our aforementioned statements information becomes degraded too. &lt;strong&gt;There is endless effort in our field on how to structure and model the data&lt;/strong&gt;, i.e. what form to give the data, this is the core idea of information technology.&lt;/p&gt;
&lt;h2 id=&#34;the-i-know-this-is-true-phrase&#34;&gt;The &amp;ldquo;I know this is true&amp;rdquo; phrase&lt;/h2&gt;
&lt;p&gt;Information technology is about Database Management Systems and digital libraries of information (data), and about building clever tools to do statistics and predictions. Let me take another example. Today we are able to browse a huge &amp;ldquo;Knowledge Base&amp;rdquo; such as Wolfram Alpha and &lt;a href=&#34;https://www.wolframalpha.com/input/?i=moon+distance+from+earth&#34;&gt;ask what is the distance of Moon from Earth&lt;/a&gt;, to receive the current result of 399383 kilometers. But do I know anything about that distance except this number figure ? Have I traveled that distance ? Have I measured that distance ? What is the source of information ? Is it authoritative ? Why is there such a distance and is it constant ? What purpose it serves ? These are typical question just to make you think that stating a fact is only the tip of the iceberg. Take another example, financial instability, let us assume we can predict such a phenomenon, does this mean we know anything about it ?&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;We think we know, we know nothing, and even those that are in the process of knowing something, eventually they admit that they are still learning about it. The more you know something, the more you understand how deep your knowledge about this thing can become. Famous soloists are aware of this process. They are rediscovering day by day more about the quality of sound they can produce with their instrument. But it is not any more about the technical know-how, it is about &lt;strong&gt;knowing how to express themselves&lt;/strong&gt; through the instrument and feel more the music they play. In my opinion knowledge is a very deep process that takes place inside of us. It can assist you to your search for the path to wisdom, but it will not make you wiser. I believe wisdom is part of the spiritual endeavor. We are fools if we believe our knowledge, not to say our technology, makes us wiser than our ancestors. Wisdom is about how you lead your life, how you live your life and depends on the utmost goal you strive to achieve in this life. For such a reason Socrates was a wise man and he really meant that &amp;ldquo;All I know is that I know nothing&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/know-how-how-you-know/&#34;&gt;LinkedIn - Published Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The ancient Greek origin of the word &lt;code&gt;information&lt;/code&gt; - Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;Etymology section&lt;/a&gt; of the term Information was updated by HEALIS with the quoted text above on the 13th of June 2014&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Why Google shuts down Freebase ?</title>
      <link>https://healis.eu/en/post/20150609/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150609/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#quick-history-review&#34;&gt;Quick History Review&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#summary-of-technology-achievements&#34;&gt;Summary of technology achievements&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#database-management-system-and-data-architecture&#34;&gt;Database management system and data architecture&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-identity-crisis-solution&#34;&gt;The identity crisis solution&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#schema-type-system-ontology&#34;&gt;Schema, Type System, Ontology&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#type-checking&#34;&gt;Type Checking&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#included-types&#34;&gt;Included Types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#disambiguation-mechanism&#34;&gt;Disambiguation Mechanism&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#complexcompound-value-types-cvts-and-relationships&#34;&gt;Complex/Compound Value Types (CVTs) and Relationships&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#blobs-mechanism&#34;&gt;Blobs Mechanism&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#full-access-control-and-auditing-mechanism&#34;&gt;Full Access Control and Auditing mechanism&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#fully-web-based-user-interfaces-and-applications&#34;&gt;Fully web-based user interfaces and applications&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mql---the-metaweb-query-language&#34;&gt;MQL - The Metaweb Query Language&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have spent a lot of time studying in detail and experimenting with Freebase, and I am truly disappointed to see such a great collective effort to suddenly disappear from the software development scene without a good reason. I will justify this, but first let me discuss a bit about what is freebase for those that are not aware of the project.&lt;/p&gt;
&lt;p&gt;Freebase, in my opinion, is currently the best collaborative information management system ever built. According to &lt;a href=&#34;http://en.wikipedia.org/wiki/Freebase&#34;&gt;Wikipedia&lt;/a&gt;, &amp;ldquo;It is an online collection of structured data harvested from many sources, including individual, user-submitted contributions. Freebase aims to create a global resource which allows people (and machines) to access common information more effectively&amp;rdquo;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/1513562&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quick-history-review&#34;&gt;Quick History Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In 2000 Danny Hillis first described his idea for creating a &amp;ldquo;knowledge web&amp;rdquo; which he called Aristotle !&lt;/li&gt;
&lt;li&gt;In 2003 the project known as &amp;ldquo;The Metaweb&amp;rdquo; begins, inside Applied Minds&lt;/li&gt;
&lt;li&gt;On October 2006 the One True Graph is born&lt;/li&gt;
&lt;li&gt;On July 16th 2010 Metaweb is acquired by Google&lt;/li&gt;
&lt;li&gt;On 30th of June 2015 Google plans to shut down completely the service. It is already in read-only mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary-of-technology-achievements&#34;&gt;Summary of technology achievements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Freebase counts twelve years of focused development effort by a strong dedicated team of experts.&lt;/li&gt;
&lt;li&gt;Freebase counts nine years of online editing with superb web-based client APIs and GUIs&lt;/li&gt;
&lt;li&gt;Freebase, Google, have defined and implemented  state of the art technology in collaborative information management. Do consider the following topics just for a start :&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;database-management-system-and-data-architecture&#34;&gt;Database management system and data architecture&lt;/h3&gt;
&lt;p&gt;The most important IT asset is their proprietary &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1807283&#34;&gt;Graphd&lt;/a&gt; database.  Some information have been disclosed to the public in the past, but of course the database itself is not going to be released or opened for inspection.&lt;/p&gt;
&lt;p&gt;Graphd encodes everything  as a tuple. Every structure and construct such as entity type, entity instance, property, data types, domain, namespace, ontology you name it, are constructed from tuples. The very first layer of abstraction that is created on top of this is the object-link that implements RDF kind of statements in Freebase. Every item in freebase is either a link or an object. And you can get ALL the links to or from any object. Defining a single primitive construct as a building block is one of my R3DM semiotic principles in data modelling abstraction. Topic Maps data model (&lt;a href=&#34;http://www.isotopicmaps.org/sam/sam-model/#sect-metamodel&#34;&gt;TMDM&lt;/a&gt;) follow the same kind of logic, where everything is a topic and every other construct is built with topics. In RDF/OWL fundamental construct is the triplet, in Graph databases you have the node, in key-value stores you have the key-value primitive.&lt;/p&gt;
&lt;h3 id=&#34;the-identity-crisis-solution&#34;&gt;The identity crisis solution&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://healis.eu/en/post/20131105/#vvp-and-the-identity-crisis-on-the-web&#34;&gt;identity crisis&lt;/a&gt;, that is still a problem in the linked-data world, has a fair solution in Freebase with not a single URL-based namespace identifier but with three kinds of identifiers that each plays a different role :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Under the hood GUIDs that are written internally in Graphd database&lt;/li&gt;
&lt;li&gt;Long user friendly, human-readable, IDs&lt;/li&gt;
&lt;li&gt;Short Machine IDs that cover the whole lifecycle of anything recorded in the database, i.e. track changes, solve merging/splitting issues, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;schema-type-system-ontology&#34;&gt;Schema, Type System, Ontology&lt;/h3&gt;
&lt;p&gt;A flexible generic schema, that covers any other ontology based on top of it with only four hierarchical containers.&lt;/p&gt;
&lt;span class=&#34;markup-quote&#34;&gt;Namespace &amp;mdash;&amp;gt; Domain &amp;mdash;&amp;gt; Types &amp;mdash;&amp;gt; Properties&lt;/span&gt;
&lt;p&gt;This is the most generic, plain, T-Box you can define,  with just four levels. Pause for a moment here and take a very careful read on the following.  Are you familiar with the following fundamental hierarchies in Computer science ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespace - Package -Class -Object (OOP)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database - Schema -Table -Row (RDBMS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain - Type -Property -Instance (Ontologies and XML)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a coincidence, and there is a very good reason that we naturally create abstractions based on this hierarchy. The very first person that came up with this astonishing observation is inventor &lt;a href=&#34;https://www.linkedin.com/in/ron-everett-5134a68a/&#34;&gt;Ron Everett&lt;/a&gt; and &lt;a href=&#34;https://healis.eu/en/post/20150320/#signified-sign-signifier-alternative-paradigm&#34;&gt;AtomicDB&amp;rsquo;s under the hood encoding structure (Environment, System, Context, Item)&lt;/a&gt; is the heart of their system. This is not the space or the time to cover that in more detail, it suffices that &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt; semiotic conceptual model can offer an adequate explanation on the abstraction/reference mechanism behind the scenes.&lt;/p&gt;
&lt;h3 id=&#34;type-checking&#34;&gt;Type Checking&lt;/h3&gt;
&lt;p&gt;In freebase every property, i.e. bidirectional link between two items, by the way this is also a fundamental technology novelty of AtomicDB, stay tuned…., knows exactly what entity types to expect.&lt;/p&gt;
&lt;h3 id=&#34;included-types&#34;&gt;Included Types&lt;/h3&gt;
&lt;p&gt;They have implemented a kind of multiple inheritance mechanism, such that one type with its properties can automatically included within another type. Included types makes it possible to create any kind of hierarchical structure where it can be referenced. Most important you can easily create custom types based on previously defined types.&lt;/p&gt;
&lt;h3 id=&#34;disambiguation-mechanism&#34;&gt;Disambiguation Mechanism&lt;/h3&gt;
&lt;p&gt;That is based on both the namespace and disambiguating properties in identifying similarly-named topics. A score is also calculated to rank the items in conflict&lt;/p&gt;
&lt;h3 id=&#34;complexcompound-value-types-cvts-and-relationships&#34;&gt;Complex/Compound Value Types (CVTs) and Relationships&lt;/h3&gt;
&lt;p&gt;You can define new data types, e.g. use a dated integer for measurements. You can also define mediator type of nodes between the source and target of the original simple relationship. No black nodes and other such RDF/OWL crap in freebase.&lt;/p&gt;
&lt;h3 id=&#34;blobs-mechanism&#34;&gt;Blobs Mechanism&lt;/h3&gt;
&lt;p&gt;In freebase you can also store large objects, i.e. text/binary stream.&lt;/p&gt;
&lt;h3 id=&#34;full-access-control-and-auditing-mechanism&#34;&gt;Full Access Control and Auditing mechanism&lt;/h3&gt;
&lt;p&gt;Every user action is recorded inside freebase. They have defined Unix like access control on anything, i.e. user, user group, permissions. It is possible to request a full history on any item that is inside the database&lt;/p&gt;
&lt;h3 id=&#34;fully-web-based-user-interfaces-and-applications&#34;&gt;Fully web-based user interfaces and applications&lt;/h3&gt;
&lt;p&gt;If you want to attract easily new, inexperienced, users, then you must have the best ever built user interface suited for your purpose and Freebase-Google have managed to do that. You can access everything with a few clicks of a button. You can view everything in a well-presented hierarchical or table like format. You can build your queries online and save them as objects in the database, then you can simply access them with a permanent, tiny URL. Likewise, you can program your applications and save them like objects in the database.&lt;/p&gt;
&lt;h3 id=&#34;mql---the-metaweb-query-language&#34;&gt;MQL - The Metaweb Query Language&lt;/h3&gt;
&lt;p&gt;Last but not least, get your hands dirty with a truly magnificent piece of programming art in Freebase, their MQL query/update mechanism. It is based on pattern matching. Programmers and even advanced, non-expert users can define easily a query pattern and take back result in popular JSON formatted string. You can limit or sort results, you can ask for ordered collection items, you can specify optional directives and constrains and pattern matching with operators. Finally results have a numerical relevancy score, this is another Google&amp;rsquo;s secret technology similar to the full implementation of page ranking technology. For example you can get a ranked list of the most notable topics with a given name.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is certainly not an exhausted list of best of breed Freebase features but I  hope you have read enough about the technology to make your own judgement on why Google shuts down completely their freebase service. Their one page announcement does not say much about it. It is not signed by any Google-Freebase authority persons. In my opinion, the reason explained there to all of us that embraced that project is a sham and is asking for reproach. Most of us knows that Google&amp;rsquo;s knowledge graph, 2012, that enhances Google search engine with semantic information is based on Freebase.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/mmQl6VGvX-c&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Let met state clearly that I welcome Google&amp;rsquo;s decision to make contributions to &lt;a href=&#34;https://www.wikidata.org/wiki/Wikidata:Main_Page&#34;&gt;Wikidata&lt;/a&gt; project but I do not understand why they have to shut down completely Freebase in doing that. It is going to take a  long time to reach the level of experience that users already have with Freebase. And what about the curated data of many people and the projects they have built on top of it ? What about all these technological advances I described in this post, how one will be able to see how they operate and make a comparison with other projects ?&lt;/p&gt;
&lt;p&gt;For a start, I think &lt;a href=&#34;https://www.wikidata.org/wiki/Wikidata:Main_Page&#34;&gt;Wikidata&lt;/a&gt; is a new project, that is built on a far worse fundamental data architecture than Freebase. Nevertheless I acknowledge that there are many good ideas and efforts to share. But, it makes no sense to eradicate such a historical project as Freebase in order to continue development on a newcomer.&lt;/p&gt;
&lt;p&gt;So, what other alternatives exist in this area ? One is the &lt;a href=&#34;https://wiki.dbpedia.org/&#34;&gt;DBpedia&lt;/a&gt; project, purely RDF based linked-data project, that started in 2007. More recent proprietary systems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.poolparty.biz/&#34;&gt;Pool-Party&lt;/a&gt; semantic suite, also RDF linked-data based,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kamala.mssm.nl&#34;&gt;Kamala&lt;/a&gt; a Topic-Map based web application,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://siren.io/&#34;&gt;Siren&lt;/a&gt; Investigative Intelligent Platform&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neverthless I anticipate that sooner or later you should expect a unicorn in semantic based information management that will simply shutter and unify all the rest. The reason I believe this is going to happen is because none of these companies have an efficient underlying fundamental data architecture. In this other dimension, in the twilight zone, there is not any player in the market.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/NzlG28B-R8Y&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Plerophoria vs Information</title>
      <link>https://healis.eu/en/post/20150523/</link>
      <pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150523/</guid>
      <description>&lt;h2 id=&#34;information&#34;&gt;Information&lt;/h2&gt;
&lt;p&gt;The origin of the word information reveals its use. Inform comes from the Latin verb informare, which literally means to give form, or to form an idea. Form is the mold, the container, that is used to give shape, to molten the content. When computer scientists were designing and constructing the first digital computer, at the same time digital information was given birth and shape. Modern computers operate with memory chips and those are mere containers of storing sequences of 0s and 1s.&lt;/p&gt;
&lt;h2 id=&#34;plērophoria&#34;&gt;Plērophoria&lt;/h2&gt;
&lt;p&gt;The above interpretation and use of the word information is typical of western culture way of thinking. Although it is convenvient to keep things in boxes, Eastern philosophers used to think differently. The ancient and modern Greek word for information is &lt;code&gt;πληροφορία&lt;/code&gt;, which transliterates (plērophoria) from πλήρης (plērēs) “fully” and φέρω (phorein) frequentative of (pherein) to carry through.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It literally means &amp;ldquo;bears fully&amp;rdquo; or &amp;ldquo;conveys fully&amp;rdquo;. In modern Greek the word Πληροφορία is still in daily use and has the same meaning as the word information in English&lt;/strong&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This contrasting use and interpretation of the word plerophoria traces its roots back to Socrates, Plato, and Aristotle’s theory of semiosis. In this regard every word plays the role of a symbol, i.e. sign that can be interpreted to communicate information to the one decoding that specific type of sign. There is an intimate and inseperable connection of the signified, i.e. the concept whose meaning the interpretant attempts to decode, with the signifier, i.e. sign’s physical form such as the sound of a word.&lt;/p&gt;
&lt;p&gt;Every bit of digital information, i.e. 0 or 1 assimilates this triadic relationship. Bits are symbols signified as true or false taking the form of input voltage (signifier). The infinite combination of sequences of such symbols gives us the power to represent anything digitally. Their meaning depends on how we interpret these sequences, as numbers, letters, sounds, color, or anything else that can be encoded. The form of the signifier is not limited to that of a mere container that stores a sequence of 0s and 1s. It is a fully functional level of abstraction connected to higher and lower levels by applying recursively the theory of semiosis until we reach CPU’s binary level.&lt;/p&gt;
&lt;h2 id=&#34;the-turing-machine&#34;&gt;The Turing Machine&lt;/h2&gt;
&lt;p&gt;One-tape Turing machine according to Hopcroft and Ullman can be formally defined as a 7-tuple. Elements of this tuple are members of three distinct sets. A non-empty set of tape alphabet symbols, e.g. {0, 1}, a non-empty set of states, e.g. {A, B, C, HALT} and a set of state transitions e.g. {L, R}. Turing machine reads the tape symbols and executes a sequence of instructions according to a state table. Although this is not the space and time to adapt the theory of semiosis on the Turing machine we can clearly see an analogy. The tape symbol plays the role of a sign, the signified instruction is executed according to the interpretation given by the state table, and there is the physical form it takes as a printed text symbol on a white square of a paper tape. You can apply the same logic to the set of states and the set of transitions because these are symbols (signs) too; they can be interpreted and realized in some other physical or non-physical form.&lt;/p&gt;
&lt;h2 id=&#34;r3dms3dm-abstraction-mechanism&#34;&gt;R3DM/S3DM Abstraction Mechanism&lt;/h2&gt;
&lt;p&gt;In digital representation of information we can define a chain of interpretations, representations and realizations that are built in a consecutive order. This chain of semiosis reveals the mechanism that we can use to build higher levels of abstraction. At each step the symbol that is used to link together the signifier with the signified can become a fundamental unit, i.e. signifier to build the next level of abstraction. Thus we can move in two directions, we can generalize or we can specialize.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5883270314305028098&#34;&gt;LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/plerophoria-vs-information-athanassios-i-hatzis-phd/&#34;&gt;LinkedIn - 20150523 Article - Plerophoria vs Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Wikipedia, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;Etymology section&lt;/a&gt; of the term Information was updated by user Healis with the quoted text above on the 13th of June 2014&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The number &#39;3&#39; and The Three-Faceted Abstraction Mechanism in R3DM</title>
      <link>https://healis.eu/en/post/20150523_part3/</link>
      <pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150523_part3/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#1-functional-representation-of-number-3---the-sign-representation&#34;&gt;1. Functional Representation of Number 3 - The Sign (Representation)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#2-interpretation-of-three-or-3---the-signified-resource&#34;&gt;2. Interpretation of &amp;ldquo;three&amp;rdquo; or 3 - The Signified (Resource)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#3-storage-of-3---the-signifier-realization&#34;&gt;3. Storage of &amp;lsquo;3&amp;rsquo; - The Signifier (Realization)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#mathematica-notebook&#34;&gt;Mathematica Notebook&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://healis.eu/en/post/20150320/&#34;&gt;Part 2&lt;/a&gt; of this series we introduced the Atomic Information Resource (AIR) data model of the AtomicDB database management system. In this part we present a simple but extensive example on various representations of number three using the poweful Mathematica functions and the unique features of Mathematica notebooks. We relate these with the three-faceted abstraction mechanism in &lt;a href=&#34;https://healis.eu/en/s3dm/&#34;&gt;S3DM/R3DM&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;1-functional-representation-of-number-3---the-sign-representation&#34;&gt;1. Functional Representation of Number 3 - The Sign (Representation)&lt;/h2&gt;
&lt;p&gt;Functional representation is the core operation of R3DM. Everything is represented as a function that is mapping values from one domain to another. You may view functions, as transformations. This is also how they operate in Wolfram Language. They transform expressions from one symbolic form to another.&lt;/p&gt;
&lt;p&gt;In this section we investigate the various forms that a symbol related to number &amp;lsquo;3&amp;rsquo; can take. In R3DM this is the sign that is used to signify something at a higher level and at the same time it is used to symbolize an internal representation, a realization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display Format&lt;/li&gt;
&lt;li&gt;Internal Representation&lt;/li&gt;
&lt;li&gt;String vs Symbol Representation&lt;/li&gt;
&lt;li&gt;String vs Numeric Representation&lt;/li&gt;
&lt;li&gt;Entity Representation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-interpretation-of-three-or-3---the-signified-resource&#34;&gt;2. Interpretation of &amp;ldquo;three&amp;rdquo; or 3 - The Signified (Resource)&lt;/h2&gt;
&lt;p&gt;The Wolfram Language provides a uniform mechanism, the Interpreter function, for specifying how input of different types should be interpreted. Interpretations can involve either structural or semantic conversions. The strings that appear in $InterpreterTypes are the possible first arguments to Interpreter.&lt;/p&gt;
&lt;p&gt;Generally speaking interpretation is closely related with the assignment of meaning to any expression or concept. But in computer science an interpreter is a computer program that executes instructions. In Wolfram Language the interpreter is involved in the evaluation of an expression. In R3DM any interpretation is directly linked to the signified, the semantics of any information resource. In this section we define our own interpretations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpretation of a unicode string e.g. &amp;ldquo;τρια&amp;rdquo; as 3&lt;/li&gt;
&lt;li&gt;Interpretation of a numeral e.g. &amp;ldquo;III&amp;rdquo; as 3&lt;/li&gt;
&lt;li&gt;String vs Interpretation&lt;/li&gt;
&lt;li&gt;Evaluation of an expression with user-defined interpretations&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-storage-of-3---the-signifier-realization&#34;&gt;3. Storage of &amp;lsquo;3&amp;rsquo; - The Signifier (Realization)&lt;/h2&gt;
&lt;p&gt;Finally in this section we elaborate on the analysis of data types and the encoding, decoding mechanisms to store various representations of &amp;lsquo;3&amp;rsquo;. First we will compare atomic and complex data types. We can view data types as containers of a specific type of content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Container (Form) - Content (Value) Duality&lt;/li&gt;
&lt;li&gt;Encoding and Decoding of Container - Content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We present an Image container (symbol) realized in Mathematica as a raw array of bytes (visual representation), and a Sound container (symbol) realized in Mathematica as a list of sound amplitude levels samples (aural representation).&lt;/p&gt;
&lt;h2 id=&#34;mathematica-notebook&#34;&gt;Mathematica Notebook&lt;/h2&gt;
&lt;p&gt;Here is the full article printed from this &lt;a href=&#34;https://healis.eu/documents/number_3.nb&#34;&gt;Mathematica Notebook&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;responsive-wrap&#34;&gt;
	&lt;object data=&#34;/documents/Towards%20a%20New%20Data%20Modelling%20Architecture%20-%20Part%203.pdf&#34; type=&#34;application/pdf&#34; style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
		&lt;embed src=&#34;https://healis.eu/documents/Towards%20a%20New%20Data%20Modelling%20Architecture%20-%20Part%203.pdf&#34; type=&#34;application/pdf &#34;style=&#34;margin: 0 auto;height: 100vh;width: 100%;&#34;&gt;
			&lt;em&gt;It seems that your browser cannot display the PDF file; Please use this &lt;a href=&#34;https://healis.eu/documents/Towards%20a%20New%20Data%20Modelling%20Architecture%20-%20Part%203.pdf&#34;&gt;&lt;strong&gt;link&lt;/strong&gt; &lt;/a&gt;
			instead. Thanks!&lt;/em&gt;
	&lt;/object&gt;
&lt;/div&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-3-hatzis-phd/&#34;&gt;LinkedIn - Published Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Atomic Information Resource (AIR)</title>
      <link>https://healis.eu/en/post/20150320/</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150320/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#preface&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#background-information&#34;&gt;Background Information&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#atomicdb-evaluation&#34;&gt;AtomicDB Evaluation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#entity-attribute-value-silo-structure&#34;&gt;Entity-Attribute-Value &amp;lsquo;Silo&amp;rsquo; Structure&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#table-form&#34;&gt;Table form&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#xml-form&#34;&gt;XML Form&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#json-form&#34;&gt;JSON Form&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#signified-sign-signifier-alternative-paradigm&#34;&gt;Signified-Sign-Signifier Alternative Paradigm&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#atomicdb-computational-semiotic-analysis-in-r3dm&#34;&gt;AtomicDB Computational Semiotic Analysis in R3DM&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#an-atomicdb-working-example&#34;&gt;An AtomicDB Working Example&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#terminology&#34;&gt;Terminology&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#draw-model&#34;&gt;Draw Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-model&#34;&gt;Add Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-model&#34;&gt;Get Model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-concepts&#34;&gt;Add Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-concepts&#34;&gt;Get Concepts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-collections&#34;&gt;Add Collections&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-collections&#34;&gt;Get Collections&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#add-data-values&#34;&gt;Add Data Values&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#get-data-values&#34;&gt;Get Data Values&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#assimilation-of-a-table&#34;&gt;Assimilation of a Table&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#review-and-discussion&#34;&gt;Review and Discussion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;
&lt;p&gt;The content of this article is a mixture of these three LinkedIn posts, &lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-2-hatzis-phd&#34;&gt;Towards a New Data Modelling Architecture - Part 2&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/pulse/air-atomic-information-resource-athanassios-i-hatzis-phd&#34;&gt;Atomic Information Resource&lt;/a&gt;, and &lt;a href=&#34;https://www.linkedin.com/pulse/atomicdb-architecture-r3dm-athanassios-i-hatzis-phd&#34;&gt;AtomicDB Architecture in R3DM&lt;/a&gt;. We also used the full content of the original source from this Mathematica &lt;a href=&#34;https://healis.eu/en/post/20150320/R3DM_Part2.nb&#34;&gt;notebook&lt;/a&gt;. It is worth mentioning that the term AtomicDB, at that time, was used to signify both the brand-name and the database engine of a company that is now re-branded as X10SYS. &lt;strong&gt;R3DM&lt;/strong&gt;, a vendor-neutral conceptual framework for data modeling, is sharing several fundamental architectural design principles with AtomicDB.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 1&lt;/a&gt; of this series we talked about the main constructs of the Relational and Entity-Relationship data model. In this article we present a computational semiotic analysis of AtomicDB that is based on &lt;strong&gt;R3DM&lt;/strong&gt; and we focus on explaining with an example the universal &lt;strong&gt;AIR&lt;/strong&gt; unit that we will meet again on forthcoming posts of this series.&lt;/p&gt;
&lt;h2 id=&#34;background-information&#34;&gt;Background Information&lt;/h2&gt;
&lt;p&gt;The AtomicDB data model we describe has a long history behind it. Searching at Google for patents with the title &amp;ldquo;Data base and knowledge operating system&amp;rdquo; or with the title &amp;ldquo;Data management architecture associating generic data items using reference&amp;rdquo; we find several documents that are &lt;a href=&#34;https://www.google.com/patents/US8051102&#34;&gt;filed in the year 2003&lt;/a&gt; from the inventor Ron Everett. The same year a &amp;ldquo;proof of concept&amp;rdquo; for this invention was successfully demonstrated with a &lt;a href=&#34;https://www.linkedin.com/pulse/case-study-us-navy-jean-michel-letennier-1&#34;&gt;use case of managing a 50+ milion records of spare/repair part requirements for US Navy ships&lt;/a&gt;. Today AtomicDB is a fully fledged database management system that is based on Ron Everett&amp;rsquo;s patented associative data items architecture. According to the vendor several pilots are currently running under big corporations and University research establishments.&lt;/p&gt;
&lt;h3 id=&#34;atomicdb-evaluation&#34;&gt;AtomicDB Evaluation&lt;/h3&gt;
&lt;p&gt;The author of this article has been an evaluator of AtomicDB with full access to test GUIs, APIs and web services of their system. In particular he explored their C# API functionality for developers. In order to make tests interactive and efficient most functions of their API have been ported to Wolfram Language using the &lt;a href=&#34;https://reference.wolfram.com/language/NETLink/tutorial/CallingNETFromTheWolframLanguage.html&#34;&gt;NETLink C#&lt;/a&gt; interconnectivity package. Function calls and other expressions that you see here are based on &lt;a href=&#34;https://healis.eu/en/post/20151009/&#34;&gt;AtomicDB Mathematica API&lt;/a&gt; that is not included with the publication of this article. The Wolfram Language &lt;a href=&#34;https://healis.eu/en/post/20150320/R3DM_Part2.nb&#34;&gt;notebook&lt;/a&gt; is included for reference purposes.&lt;/p&gt;
&lt;h2 id=&#34;entity-attribute-value-silo-structure&#34;&gt;Entity-Attribute-Value &amp;lsquo;Silo&amp;rsquo; Structure&lt;/h2&gt;
&lt;p&gt;The Entity-Relationship model is universally accepted as the means to extend the relational model in order to give meaning to relationships. For our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;database example&lt;/a&gt; in &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 1&lt;/a&gt; we can draw the following ER diagram.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://healis.eu/en/post/20150320/erdiagram.jpg&#34; data-caption=&#34;depicts an association among the three entities of our database, Parts, Suppliers and Catalog, and shows the datatypes of their attributes. This is the classic many to many relationship between Parts and Suppliers where the Catalog is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role&#34;&gt;

&lt;img src=&#34;https://healis.eu/en/post/20150320/erdiagram.jpg&#34; alt=&#34;depicts an association among the three entities of our database, `Parts`, `Suppliers` and `Catalog`, and shows the datatypes of their attributes. This is the classic many to many relationship between `Parts` and `Suppliers` where the `Catalog` is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Many-to-Many Relationship&lt;/h4&gt;
  &lt;p&gt;
    depicts an association among the three entities of our database, &lt;code&gt;Parts&lt;/code&gt;, &lt;code&gt;Suppliers&lt;/code&gt; and &lt;code&gt;Catalog&lt;/code&gt;, and shows the datatypes of their attributes. This is the classic many to many relationship between &lt;code&gt;Parts&lt;/code&gt; and &lt;code&gt;Suppliers&lt;/code&gt; where the &lt;code&gt;Catalog&lt;/code&gt; is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;From a semantic point of view, similar diagrams are in need from users that want to express business processes. But when we reach the implementation stage software engineers have to marry business requirements with the technical constrains of the database system hence the ER diagram you see. This is known as &amp;ldquo;The Model&amp;rdquo;, a conceptual view of the user on data. The ER version of the model has several limitations, due to the architecture of RDBMS. One important consideration is that each attribute remains enclosed in the table structure; and in the case the same attribute appears in another table, it has to be repeated. In our example above, the primary key &lt;code&gt;pid&lt;/code&gt; of &lt;code&gt;Parts&lt;/code&gt;  is repeated as a foreign key &lt;code&gt;catpid&lt;/code&gt; in &lt;code&gt;Catalog&lt;/code&gt;. The difficulties that arise in data aggregation due to this limitation are substantial.&lt;/p&gt;
&lt;p&gt;The relational and the entity-relationship model made a huge impact in the IT world for nearly half a century. But during this long period of standardization it meant also one thing, everyone had to comply with the rules and requirements of the model. Everyone had to think in terms of Entity-Attribute-Value or Subject-Predicate-Object as it is known in the RDF semantic model. Programming languages have been affected too from this monolithic way of thinking. Although it proved to be advantageous to program with classes and objects, it created an artificial problem of how to map these onto persistent data structures on the disk, also known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&#34;&gt;object-relational impedance mismatch&lt;/a&gt; problem.&lt;/p&gt;
&lt;p&gt;Knowledge representation frameworks did not escape from this path. Ontologies expressed in OWL followed the same paradigm with classes, attributes, and values. Serialization methods such as JSON (object-name-value) and XML (element-attribute-value) also came after the same rationale. We consider that this is one of the main reasons that noSQL databases appeared on the scene recently. Key-value store, hierarchical semi-structured documents, column based and graph-property data structures are all attempts to provide a solution to this problem. We include a few examples of characteristic forms with comments by Ron Everett in order to contrast them with the alternative data model of AtomicDB.&lt;/p&gt;
&lt;h3 id=&#34;table-form&#34;&gt;Table form&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;When we attempt to use Tables as a storage paradigm for Information we discover that Tables are a namespace bound, non-dynamic, 2-D, structured storage paradigm that has a different structure for every Table in every Database. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Each application is developed with unique and special queries written to each specific database design, table layout and named tables, columns and keys.&lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rows of &lt;code&gt;Parts&lt;/code&gt; table from a Microsoft Access &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue/accdb&#34;&gt;relational database&lt;/a&gt; that we have used in &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(partsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select pid,pname from Parts where pid&amp;lt;994&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-01&#34; src=&#34;https://healis.eu/en/post/20150320/notebook01.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;xml-form&#34;&gt;XML Form&lt;/h3&gt;
&lt;p&gt;Rows of the table above serialized in XML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dataroot&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pid&amp;gt;&lt;/span&gt;991&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pname&amp;gt;&lt;/span&gt;Left Handed Bacon Stretcher Cover&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pcolor&amp;gt;&lt;/span&gt;Red&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pcolor&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pid&amp;gt;&lt;/span&gt;992&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pname&amp;gt;&lt;/span&gt;Smoke Shifter End&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pcolor&amp;gt;&lt;/span&gt;Black&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pcolor&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pid&amp;gt;&lt;/span&gt;993&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pname&amp;gt;&lt;/span&gt;Acme Widget Washer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pname&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pcolor&amp;gt;&lt;/span&gt;Red&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pcolor&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Parts&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dataroot&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Some have hailed XML (RDF and triple stores) as the means to solve the n-dimensional relationship problem, because with it, meta-information can be captured, but XML is plagued with other problems, not the least of which are namespace binding requiring semantic accord, massively replicated tags and data, the heavy overhead of text based processing, the necessity of searching and indexing all the text in every possible XML document for each and every key/ value-tag/data match sought and the distribution of the tagged datasets across innumerable XML documents, stored in 2-D table-referenced 2-D file structures. Add to that list the overhead imposed by using Semantic Web languages and ontologies and the PhD level specialists required to develop and maintain these &amp;lsquo;knowledge&amp;rsquo; oriented systems and you get even more namespace entrenchment and hence specialization of the applications developed with it all &lt;sup id=&#34;fnref2:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;json-form&#34;&gt;JSON Form&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dataroot&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;991&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;992&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;993&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;signified-sign-signifier-alternative-paradigm&#34;&gt;Signified-Sign-Signifier Alternative Paradigm&lt;/h2&gt;
&lt;p&gt;Entity-Attribute-Value bondage highlights the fact that three perspectives, semantics at the conceptual layer, representation at the symbol layer and encoding at the physical layer are mixed in such a way that it is very hard to separate and work with them at distinct levels of abstraction. The &lt;strong&gt;R3DM&lt;/strong&gt;/&lt;strong&gt;S3DM&lt;/strong&gt; conceptual framework is based on the natural process of semiosis where the signified, i.e. concept, entity, attribute and the signifier, i.e. value are referenced through symbols, i.e. signs, at discrete layers. The same philosophy is shared in the &lt;a href=&#34;https://www.linkedin.com/pulse/atomicdb-architecture-r3dm-athanassios-i-hatzis-phd&#34;&gt;architecture&lt;/a&gt; of AtomicDB system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From Data Items in Table to Information Atoms with NO Table&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every table is a silo. Every cell is an atom of data with no awareness of its contexts, or how it fits in to anything beyond its cell. It can be located by external intelligence but on its own it&amp;rsquo; s a &amp;ldquo;dumb&amp;rdquo; participant in the system - the ultimate disconnected micro - fragment accessible only by knowing the column and the record it exists in. &lt;sup id=&#34;fnref3:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The alternative is to replace the data elements with information at the atomic level of the system. Instead of a data atom in a table, we have an information atom with no table. Information atoms exist in a multi-D vector space unbounded by data structures and know their context, such as a &amp;ldquo;customer&amp;rdquo; or a &amp;ldquo;product&amp;rdquo;, just like atoms in the physical world &amp;ldquo;know&amp;rdquo; they are nitrogen or hydrogen items and behave accordingly. Information atoms also know when they were created, when they were last modified, and what other information atoms of other types are associated with them. They know their parents, their siblings, and their workplace associates. They are powerful little entities and most certainly NOT fragments. Nor are they triple statements requiring endless extraneous indexing &lt;sup id=&#34;fnref4:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;AtomicDB  is datatype and namespace agnostic, always fully contextualized, and structure free.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;atomicdb-computational-semiotic-analysis-in-r3dm&#34;&gt;AtomicDB Computational Semiotic Analysis in R3DM&lt;/h3&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;atomicdb-r3dm-references-1650x900.jpg&#34; data-caption=&#34;illustrates the architecture of AtomicDB system according to R3DM framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (S3), the sign (S2) and the storage (S1). An alternative notation and terminology is information resources (IRes-R3), representations (IRep-R2) and realizations (IRea-R1)&#34;&gt;

&lt;img src=&#34;atomicdb-r3dm-references-1650x900.jpg&#34; alt=&#34;illustrates the architecture of AtomicDB system according to **R3DM** framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (**S3**), the sign (**S2**) and the storage (**S1**). An alternative notation and terminology is information resources (**IRes-R3**), representations (**IRep-R2**) and realizations (**IRea-R1**)&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;AtomicDB Architecture in R3DM&lt;/h4&gt;
  &lt;p&gt;
    illustrates the architecture of AtomicDB system according to &lt;strong&gt;R3DM&lt;/strong&gt; framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (&lt;strong&gt;S3&lt;/strong&gt;), the sign (&lt;strong&gt;S2&lt;/strong&gt;) and the storage (&lt;strong&gt;S1&lt;/strong&gt;). An alternative notation and terminology is information resources (&lt;strong&gt;IRes-R3&lt;/strong&gt;), representations (&lt;strong&gt;IRep-R2&lt;/strong&gt;) and realizations (&lt;strong&gt;IRea-R1&lt;/strong&gt;)
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Each layer plays a distinct role and it is clearly separable from the other two. This serves fully the trilateral principle in &lt;strong&gt;R3DM&lt;/strong&gt;. Storage-Realization layer, depicted with green boxes, portrays how AtomicDB system is implemented with .NET framework at the API level. The AtomicDB &lt;strong&gt;Core Key-Value&lt;/strong&gt; primitive data structure is used to build successive nested &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx&#34;&gt;List Class&lt;/a&gt; containers and association types, see [&lt;strong&gt;Fig. 3&lt;/strong&gt;]. This is how the &lt;strong&gt;AIR&lt;/strong&gt; of AtomicDB is realized at (&lt;strong&gt;S1&lt;/strong&gt;).&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;atomicdb-r3dm-relations-800x900.jpg&#34; data-caption=&#34;different kinds of linking (AIR) units&#34;&gt;

&lt;img src=&#34;atomicdb-r3dm-relations-800x900.jpg&#34; alt=&#34;different kinds of linking (AIR) units&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;AtomicDB Association Types&lt;/h4&gt;
  &lt;p&gt;
    different kinds of linking (AIR) units
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;At the Sign layer (&lt;strong&gt;S2&lt;/strong&gt;), [&lt;strong&gt;Fig. 2&lt;/strong&gt;], the &lt;strong&gt;AIR&lt;/strong&gt; receives its symbolic representation. A mere list of four integer numbers is adequate to represent efficiently any piece of information. It is the golden ratio in postmodern era data modeling. It can represent types, instances, and properties, and associate these in a hypergraph network. It is truly a web of information resources based on the power of semiosis, with a reference mechanism not built with character strings (&lt;a href=&#34;https://en.wikipedia.org/wiki/Uniform_Resource_Locator&#34;&gt;URL&lt;/a&gt;) but similar to Internet Protocol address (&lt;a href=&#34;https://en.wikipedia.org/wiki/IP_address&#34;&gt;IP&lt;/a&gt;). This &lt;strong&gt;AIR&lt;/strong&gt; information representation serves two principal functions; information resource identification and location addressing, i.e. dereferencing and retrieval, but it does not suffer from the identity problem crisis of the RDFised web. The various forms of &lt;strong&gt;KeyVector&lt;/strong&gt; that correspond to the nested data structures at layer (&lt;strong&gt;S1&lt;/strong&gt;) are depicted with purple boxes.&lt;/p&gt;
&lt;p&gt;Finally (&lt;strong&gt;S3&lt;/strong&gt;) layer, [&lt;strong&gt;Fig. 2&lt;/strong&gt;], depicted with blue boxes, put information resources in their semantic perspective and order with a four level hierarchical structure of containers. It is the kind of logic that developers use to manage classes, properties and objects (&lt;strong&gt;OOP&lt;/strong&gt;), or tables, records and fields (&lt;strong&gt;RDBMS&lt;/strong&gt;), or objects, keys and values (&lt;strong&gt;XML-JSON&lt;/strong&gt;) and subject, predicate, objects (&lt;strong&gt;RDF&lt;/strong&gt;). But Ron Everett&amp;rsquo;s approach differs substantially from previous data models.  Information resources are not handled by name, they are always represented and function as meaningful 4D number vectors. We escape from the namespace entanglement and alleviate the complexity of linked information by smart (&lt;strong&gt;AIR&lt;/strong&gt;) information resource units that are represented in a uniform way and their digital form can be processed, retrieved and stored efficiently and/or combined to create composite information structures.&lt;/p&gt;
&lt;h2 id=&#34;an-atomicdb-working-example&#34;&gt;An AtomicDB Working Example&lt;/h2&gt;
&lt;p&gt;In order to understand better the difference between a &lt;a href=&#34;https://en.wikipedia.org/wiki/Namespace&#34;&gt;&lt;strong&gt;Namespace&lt;/strong&gt;&lt;/a&gt; bounded DBMS vs an &lt;strong&gt;AIR&lt;/strong&gt; based DBMS we exemplify key points of AtomicDB architecture in R3DM. But before we start unfolding our example we present AtomicDB terminology.&lt;/p&gt;
&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Data Item&lt;/code&gt; is a particular type of item that holds an atomic piece of data (an atomic value).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt; (data set) is a generic container for data items with no duplicates. A collection is similar to the notion of attribute (column) data set in the relational model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nexus item&lt;/code&gt; is a special type of data item whose role is to keep associations with the other data items in a record. Nexus item plays a similar role to that of a record in the relational model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nexus Collection&lt;/code&gt; is a special type of collection which holds nexus items only. Nexus collection act similarly to the primary key column in the relational data model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Record&lt;/code&gt; is a set of data items from different collections each associated to the same nexus item (exactly one per record)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; refers to several collections and associates them. The group is not a container for collections. Each group has one and only one nexus collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Bridge Collection&lt;/code&gt; is a certain type of collection that can be associated with more than one group. Bridge collection act similarly to the foreign key column in the relational data model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Concept&lt;/code&gt; is a special type of item that represents uniquely one collection of items. A collection can have one or more representative concepts. A concept can be thought as a reference to collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; is a generic container for unique concepts that are associated to form higher constructs and relations. Model is similar to a database schema, or view.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;draw-model&#34;&gt;Draw Model&lt;/h3&gt;
&lt;p&gt;We start by designing a simple concept map using the &lt;a href=&#34;http://cmap.ihmc.us/&#34;&gt;CMAP Tools&lt;/a&gt; that corresponds to the ER diagram of [&lt;strong&gt;Fig 1.&lt;/strong&gt;] above.&lt;/p&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;spcdiagram.jpg&#34; &gt;

&lt;img src=&#34;spcdiagram.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Schema with CMAP Tools&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt; in this diagram, (&lt;code&gt;Groups&lt;/code&gt; - cyan square boxes), are formed by grouping &lt;strong&gt;Attributes&lt;/strong&gt;, i.e. &lt;code&gt;Collections&lt;/code&gt;. One or more &lt;strong&gt;Attributes&lt;/strong&gt; (&lt;code&gt;Concepts&lt;/code&gt; - oval shape) are shared between two or more &lt;strong&gt;Entities&lt;/strong&gt; and form &lt;code&gt;bridge collections&lt;/code&gt;. This is the equivalent notion of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Associative_entity&#34;&gt;bridge table&lt;/a&gt; in relational and entity-relationship theory. A closer examination of the links reveals that they all have the same type, i.e. &lt;code&gt;isRelatedTo&lt;/code&gt;, and &lt;strong&gt;Attributes&lt;/strong&gt; are always connected to &lt;strong&gt;Entities&lt;/strong&gt; with that operator. According to R3DM we are examining information resources at (&lt;strong&gt;S3&lt;/strong&gt;) layer.&lt;/p&gt;
&lt;h3 id=&#34;add-model&#34;&gt;Add Model&lt;/h3&gt;
&lt;p&gt;We can import this concept map or alternatively we can create a new &lt;code&gt;Model&lt;/code&gt; programmatically by passing its name as a parameter to the &lt;code&gt;addModel&lt;/code&gt; function. Then we can use &lt;code&gt;getModelByName&lt;/code&gt; function to get back a Key-Value &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt; representation of the &lt;code&gt;Model&lt;/code&gt; we added to the system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modelName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts-Suppliers Catalog Model&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addModel&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;«&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NETObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Generic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List&lt;span style=&#34;color:#e6db74&#34;&gt;`1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   [System.Collections.Generic.List`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;IAMCore_SharpClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Core_KeyValuePair&lt;span style=&#34;color:#f92672&#34;&gt;]]]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;»&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;get-model&#34;&gt;Get Model&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getModelByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts-Suppliers Catalog Model&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key &lt;code&gt;{0, 3, 13, 256}&lt;/code&gt;, i.e. &lt;strong&gt;Sign&lt;/strong&gt; (&lt;strong&gt;S2&lt;/strong&gt;/&lt;strong&gt;R2&lt;/strong&gt; - &lt;strong&gt;IRep&lt;/strong&gt;), is a reference 4D vector that we use to access the &lt;code&gt;Model&lt;/code&gt; item  and the value is the string we assigned as the name of the &lt;code&gt;Model&lt;/code&gt;. Everything that is stored in AtomicDB has a key with four dimensions (&lt;strong&gt;Environment&lt;/strong&gt;, &lt;strong&gt;System&lt;/strong&gt;, &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Item&lt;/strong&gt;) and a value. Each dimension can be semantically interpreted in a different way, but they are always connected hierarchically. This makes AtomicDB fully symmetrical in terms of values, structures and relationships.&lt;/p&gt;
&lt;h3 id=&#34;add-concepts&#34;&gt;Add Concepts&lt;/h3&gt;
&lt;p&gt;We continue by adding the &lt;code&gt;Concepts&lt;/code&gt; of the &lt;code&gt;Model&lt;/code&gt; programmatically. The two arguments of function &lt;code&gt;addConceptsByName&lt;/code&gt; are the name of the &lt;code&gt;Model&lt;/code&gt; and a list of &lt;code&gt;Concept&lt;/code&gt; names. The first name in the list signifies a &lt;code&gt;Nexus&lt;/code&gt; concept that is used to associate the rest of the concepts in the list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;catalogConceptNames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartCost&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partConceptNames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Part&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PartColor&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;supplierConceptNames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Supplier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierIdentifier&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SupplierAddress&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(catalogConcepts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addConceptsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(partConcepts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addConceptsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(supplierConcepts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addConceptsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, supplierConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing you should notice is that the numbering of dimensions for &lt;code&gt;Concepts&lt;/code&gt; does not follow the previous pattern with the &lt;code&gt;Model&lt;/code&gt; 4D vector. Semantically this means we have a different system that can be interpreted in the following way:&lt;/p&gt;
&lt;p&gt;There are three &lt;code&gt;Groups&lt;/code&gt; with four &lt;code&gt;Concepts&lt;/code&gt; each added to our &lt;code&gt;Model&lt;/code&gt;.  Notice that the first three dimensions of the keys remain constant but the last dimension varies to denote instances of &lt;code&gt;Concepts&lt;/code&gt; that belong to the same &lt;code&gt;Model&lt;/code&gt;. In this case, the &lt;code&gt;Item&lt;/code&gt; dimension of the reference key plays the role of the &lt;code&gt;Concept&lt;/code&gt; and the &lt;code&gt;Context&lt;/code&gt; dimension plays the role of the &lt;code&gt;Model&lt;/code&gt;. The other two dimensions are related possibly to the kind of repository, i.e. we are storing information about models, and our localhost database development environment. Contrast this representation with the previous vector &lt;code&gt;{0, 3, 13, 256}&lt;/code&gt; where the &lt;code&gt;Item&lt;/code&gt; dimension plays the role of the &lt;code&gt;Model&lt;/code&gt;. This indicates that reference vectors in AtomicDB are cleverly inter-related; notice the position of number &lt;code&gt;256&lt;/code&gt; that signifies always the &lt;code&gt;Model&lt;/code&gt; in these 4D vectors.&lt;/p&gt;
&lt;p&gt;Another critical observation is that &lt;code&gt;PartIdentifier&lt;/code&gt; and &lt;code&gt;SupplierIdentifier&lt;/code&gt; &lt;code&gt;Concepts&lt;/code&gt; are members of more than one &lt;code&gt;Group&lt;/code&gt;. These are the &lt;code&gt;Bridge Concepts&lt;/code&gt; and play the same role as the primary and foreign keys in relational data sets. But one of the main differences and a great advantage of this approach is that this time data sets are not duplicated. The same &lt;code&gt;Collection&lt;/code&gt; of items, i.e. data set of an attribute, can be referenced by many &lt;code&gt;Concepts&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-concepts&#34;&gt;Get Concepts&lt;/h3&gt;
&lt;p&gt;Verify that all the concepts have been added to our &lt;code&gt;Model&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getConceptsFromModelName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-collections&#34;&gt;Add Collections&lt;/h3&gt;
&lt;p&gt;With the following &lt;code&gt;addCollectionsAutoMapGroupByName&lt;/code&gt; function &lt;code&gt;Collections&lt;/code&gt; are automatically associated with the &lt;code&gt;Concepts&lt;/code&gt; and a &lt;code&gt;Group&lt;/code&gt; is added. Notice that both &lt;code&gt;Collections&lt;/code&gt; and &lt;code&gt;Models&lt;/code&gt; have been created with the same &lt;code&gt;Environment&lt;/code&gt; and &lt;code&gt;System&lt;/code&gt; dimensions, it is the third dimension &lt;code&gt;Context&lt;/code&gt; that differentiates the type of instances, i.e. items.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(catalogCollections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   addCollectionsAutoMapGroupByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(partCollections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   addCollectionsAutoMapGroupByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(supplierCollections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   addCollectionsAutoMapGroupByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, supplierConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;266&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;267&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And bridging is achieved by having &lt;code&gt;Bridge Collections&lt;/code&gt;, &lt;code&gt;{0,3,15,259}&lt;/code&gt; and &lt;code&gt;{0,3,15,258}&lt;/code&gt; that are equivalent to &lt;code&gt;Bridge Concepts&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;get-collections&#34;&gt;Get Collections&lt;/h3&gt;
&lt;p&gt;Verify that we have added all the collections to the system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getCollectionsFromModelName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Catalog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartCost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Supplier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;266&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;267&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SupplierAddress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-data-values&#34;&gt;Add Data Values&lt;/h3&gt;
&lt;p&gt;Our next step is to add values into a separate system, at the same &lt;code&gt;Environment&lt;/code&gt; with that of &lt;code&gt;Concepts&lt;/code&gt; using the &lt;code&gt;Item&lt;/code&gt; numbers from the &lt;code&gt;Collections&lt;/code&gt; above. First we read relational datasets with &lt;a href=&#34;http://reference.wolfram.com/language/DatabaseLink/ref/SQLSelect.html&#34;&gt;&lt;code&gt;SQLSelect&lt;/code&gt;&lt;/a&gt; function and we form &lt;strong&gt;Records&lt;/strong&gt; that are represented with the &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;&lt;code&gt;List&lt;/code&gt; built-in symbol&lt;/a&gt; of Wolfram Language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;catalogDataSet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partDataSet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;supplierDataSet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we add records with the &lt;code&gt;addRecordsByName&lt;/code&gt; command of our AtomicDB API passing three arguments; the name of the &lt;code&gt;Model&lt;/code&gt;, &lt;code&gt;Concept&lt;/code&gt; names, and the body of relational dataset that we read in the previous step.&lt;/p&gt;
&lt;p&gt;These are the items added to the NX_Catalog nexus collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addRecordsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames, catalogDataSet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are the items added to the NX_Part nexus collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addRecordsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames, partDataSet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are the items added to the NX_Supplier nexus collection&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addRecordsByName&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, supplierConceptNames, supplierDataSet&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;265&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;get-data-values&#34;&gt;Get Data Values&lt;/h3&gt;
&lt;p&gt;In order to read back the data values, we use &lt;code&gt;Concepts&lt;/code&gt; and the &lt;code&gt;getItemsFromConceptNames&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;For example to get data &lt;code&gt;Items&lt;/code&gt; from the &lt;strong&gt;Part&lt;/strong&gt; &lt;code&gt;Concepts&lt;/code&gt; we pass the name of the &lt;code&gt;Model&lt;/code&gt; and the &lt;code&gt;Concept&lt;/code&gt; names for the &lt;strong&gt;Part&lt;/strong&gt; &lt;code&gt;Group&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getItemsFromConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, partConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bacon&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stretcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cover&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Smoke&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Shifter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;I &lt;span style=&#34;color:#66d9ef&#34;&gt;Brake&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Circles&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sticker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Fire&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Hydrant&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;263&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Segment&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Display&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Black&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Silver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Translucent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Cyan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Magenta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Green&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check that although we have nine records, i.e. nine identifiers for &lt;code&gt;Parts&lt;/code&gt; and nine &lt;code&gt;Nexuses&lt;/code&gt; respectively, we have only seven color values or seven &lt;code&gt;Part&lt;/code&gt; names. This is because in relational data model certain values of a column/attribute are repeated but in &lt;code&gt;Associative Data Model&lt;/code&gt; are single instances&lt;/p&gt;
&lt;p&gt;In a similar way, to get data &lt;code&gt;Items&lt;/code&gt; from the &lt;strong&gt;Catalog&lt;/strong&gt; &lt;code&gt;Concepts&lt;/code&gt; we pass the name of the &lt;code&gt;Model&lt;/code&gt; and the &lt;code&gt;Concept&lt;/code&gt; names for the &lt;strong&gt;Catalog&lt;/strong&gt; &lt;code&gt;Group&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getItemsFromConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, catalogConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;257&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1082&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1083&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1084&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;259&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that values for the &lt;code&gt;PartIdentifier&lt;/code&gt; &lt;code&gt;Bridging Concept&lt;/code&gt; are not duplicated but they are referenced instead by the same 4D key vectors whether we are in Catalog &lt;code&gt;Group&lt;/code&gt; or Part &lt;code&gt;Group&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;assimilation-of-a-table&#34;&gt;Assimilation of a Table&lt;/h2&gt;
&lt;p&gt;So far so good, but in practice everyone is accustomed to the use of tables. Table is the favorite manageable structure and convenient medium of exchanging-exporting/importing datasets. Therefore the challenge is that any alternative solution on data architecture should provide the means to view and handle data in tables with the minimum effort no matter what is the underlying structure. For this reason we continue our example with a comparison of how we retrieve records from a relational table and assimilate this operation to a &lt;code&gt;Group&lt;/code&gt; of items that are represented with a nested &lt;a href=&#34;https://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt; of &lt;a href=&#34;https://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A. Relational&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;
&lt;img alt=&#34;notebook-output-parts table&#34; src=&#34;https://healis.eu/en/post/20150320/parts-table-500x200.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B. Associative&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(nexusMemberItems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getItemsFromConceptNames&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;modelName, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NX_Part&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partConcepts&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; printKVPL2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NX_Part&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1025&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PartColor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;records &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAnything&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  partConcepts&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nexusMemberItems,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setType&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enGridType&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;«&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NETObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Generic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List&lt;span style=&#34;color:#e6db74&#34;&gt;`1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  [System.Collections.Generic.List`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;IAMCore_SharpClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Core_KeyValuePair&lt;span style=&#34;color:#f92672&#34;&gt;]]]&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;»&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; coreKVPL1ToRules &lt;span style=&#34;color:#e6db74&#34;&gt;/@ records@ToArray[];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;res /&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;parts-items-1130x170.jpg&#34; &gt;

&lt;img src=&#34;parts-items-1130x170.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Key/Value records of Part Items&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;review-and-discussion&#34;&gt;Review and Discussion&lt;/h2&gt;
&lt;p&gt;How do we design a data model, how do we connect data, how do we represent information, how do we store or retrieve them ? These are all fundamental questions in data modeling but there is a common key to unlock them. You have to start by defining a primitive information resource, and then understand how one can build complex information structures on top it. And this is because everything in nature or systems follow this kind of abstraction from the simple to the most sophisticated. There are patterns that recur at progressively smaller scales. There are fundamental building blocks that can build higher-order structures.&lt;/p&gt;
&lt;p&gt;For more than thirty years, the data modeling world is dominated by records. Records in the form of a row in a table, or in a form of hierarchically structured XML/JSON documents, or in the form of property-graph nodes. Many consider the fundamental structure of RDF triplet, Subject-Predicate-Object, but this can be seen too as a form of a record that confines you to think in terms of a function-functor that maps information resources from a domain set to information resources of a range set. Neither the nature or reference mechanism of these resources, nor their linkage type are defined in a sufficient or efficient manner.&lt;/p&gt;
&lt;p&gt;An alternative view on data modeling that can extend and enrich RDF is introduced in this article. It is based on &lt;strong&gt;AIR&lt;/strong&gt;, analyzed with R3DM framework, and exemplified with AtomicDB. &lt;strong&gt;AIR&lt;/strong&gt; is the oxygen that makes this database technology breath. It makes it alive and kicking.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/B8A0xiD2gxE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;AIR&lt;/strong&gt; fits perfectly to the duality principle of R3DM conceptual model and the &lt;a href=&#34;https://healis.eu/en/project/r3dm/#symbols-duality-principle&#34;&gt;&lt;strong&gt;Everything is Represented with a Symbol&lt;/strong&gt;&lt;/a&gt; corollary. There is no better example to think about this than digital representations as sequences of binary digits in the internal memory state of our machines. In a digital computer, everything is represented and addressed at the machine level with sequences of 0s and 1s. In order to represent information, Ron Everett managed to conceive in a similar way at a higher abstracted level an identification and addressing schema of information units. He wrapped atomic data types, such as a string or number, and made them the core of these units and he used a four-dimensional space to uniformly address, identify, bind and encode &lt;strong&gt;AIRs&lt;/strong&gt;. Thus in AtomicDB each &lt;strong&gt;AIR&lt;/strong&gt; unit is a self-referenced and uniquely identified item in a 4D space with sets of 4D references to other &lt;strong&gt;AIRs&lt;/strong&gt; for classification purpose, and embedded data values for querying purpose.&lt;/p&gt;
&lt;p&gt;According to R3DM we have three layers of abstraction, the semantic, the sign, and the storage-data layer. The 4D reference type of &lt;strong&gt;AIR&lt;/strong&gt; is the implementation of sign layer and it is bridging the semantic with the storage layer in the most semiotic way. This is a fully apprehensive act of responding to the fact that &lt;strong&gt;atomic data types and data structures cannot play sufficiently both the role of encoding and that of representing information&lt;/strong&gt;. You have to make these two roles distinct. This is exactly what we manage in a beautiful way with these references. The symbolic layer is created in this 4D space and instead of having dissimilar atomic data types and abstract complex data types, you have uniform &lt;strong&gt;AIR&lt;/strong&gt; units and aggregates of them e.g. collections, records, sets and multi-sets that are referenced in exactly the same way .&lt;/p&gt;
&lt;p&gt;This is a completely, new, radical perspective on data modeling. It is a turning point and there has to be ample evidence to support claims that DBMS based on this are superior than their counterparts. We are determined to investigate, enhance, and apply that kind of database technology and connect it to the overall semiotic perspective of R3DM conceptual framework. It is possible that R3DM based on &lt;strong&gt;AIR&lt;/strong&gt; can assimilate all other SQL and noSQL and SPARQL queries and data models in a simpler, more intuitive, faster, more secure, highly consistent, and in a large scale. This uniform structural symmetry based on &lt;strong&gt;AIR&lt;/strong&gt;, both in terms of value representation and bi-directional relationships is perhaps the most innovative feature and what will hopefully make &lt;strong&gt;AIR&lt;/strong&gt; the universal atomic information unit in the whole information science field. If not, I am sure that many other similar paradigms in data modeling will be based on this model, because a whole new unexplored path is now open and unimaginable applications of this technology can be turned into a reality.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-2-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/air-atomic-information-resource-athanassios-i-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/atomicdb-architecture-r3dm-athanassios-i-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Ron Everett in &amp;ldquo;&lt;a href=&#34;https://www.linkedin.com/pulse/introduction-associative-information-systems-n-normal-letennier&#34;&gt;Introduction to Associative Information Systems&lt;/a&gt; - (N) Normal Form&amp;rdquo; post by Jean-Michelle Letennier&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref4:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relational/ER Constructs in Wolfram Language</title>
      <link>https://healis.eu/en/post/20150317/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20150317/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#relational-constructs&#34;&gt;Relational Constructs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#product-type&#34;&gt;Product Type&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#tuple-recordrow&#34;&gt;Tuple (Record/Row)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#attribute-fieldcolumn&#34;&gt;Attribute (Field/Column)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#relation-base-relval&#34;&gt;Relation (Base relval)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#view-derived-relvar--result-set&#34;&gt;View (Derived relvar / Result set)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#entity-relationship-er-constructs&#34;&gt;Entity-Relationship (ER) Constructs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#record-representations&#34;&gt;Record Representations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#table-representations&#34;&gt;Table Representations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this series we introduce progressively the art of a new innovative, exhilarating, data modeling methodology that is based on R3DM conceptual framework. We want to engage software developers, architects, data model designers and everyone interested in learning the advantages of applying this method and the main differences from the data models of the past. We start with terms and constructs that most of us are familiar with from the relational database management systems and we dive into some detail of the Atomic Information Resource unit at &lt;a href=&#34;https://healis.eu/en/post/20150317/&#34;&gt;Part 2&lt;/a&gt;. For coding purposes, we picked &lt;a href=&#34;https://www.wolfram.com/language/&#34;&gt;Wolfram Language&lt;/a&gt;, the 25+ years of development programming language of Mathematica. Wolfram Language combines symbolic, functional and rule-based programming with a vast library of built-in functions, a computational knowledge engine (&lt;a href=&#34;http://www.wolframalpha.com/&#34;&gt;Wolfram alpha&lt;/a&gt;) and a huge database of curated data.&lt;/p&gt;
&lt;h2 id=&#34;relational-constructs&#34;&gt;Relational Constructs&lt;/h2&gt;
&lt;p&gt;The entity-relational data model (ERDM) is still the most popular data model in database management systems. You can think many reasons for this fact but from the user perspective the main reason is the simple and natural way of managing data in tables with rows (records) and columns (attributes). On top of that, SQL is a very powerful and easy to learn programming language that covers completely the relational operators on data sets. In this article various methods of representing the basic constructs of the relational model are demonstrated with Wolfram Language powerful transformations. You may download our &lt;a href=&#34;https://healis.eu/en/post/20150317/R3DM_Part1.nb&#34;&gt;Wolfram Notebook&lt;/a&gt; and try our examples in &lt;a href=&#34;https://lab.wolframcloud.com/app/&#34;&gt;Wolfram Programming Lab&lt;/a&gt; or &lt;a href=&#34;https://develop.wolframcloud.com/app/&#34;&gt;Wolfram Development Platform&lt;/a&gt;. The structured data for our example can be found at our &lt;a href=&#34;https://github.com/healiseu/healiseu.github.io/tree/master/SupplierPartCatalogue&#34;&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;product-type&#34;&gt;Product Type&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In programming languages and type theory, a product of types is another, compounded, type in a structure. The &amp;ldquo;operands&amp;rdquo; of the product are types, and the structure of a product type is determined by the fixed order of the operands in the product. An instance of a product type retains the fixed order, but otherwise may contain all possible instances of its primitive data types. The expression of an instance of a product type will be a tuple, and is called a &amp;ldquo;tuple type&amp;rdquo; of expression. A product of types is a direct product of two or more types - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Product_type&#34;&gt;Product type&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example: &lt;strong&gt;Integer x String x Colour&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Wolfram Language an instance of such a type is represented with the built-in &lt;a href=&#34;http://reference.wolfram.com/language/ref/List.html&#34;&gt;List&lt;/a&gt; symbol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partInstanceAsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-01&#34; src=&#34;https://healis.eu/en/post/20150317/notebook01.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;And to check/verify the type for each element of the List we map the function &lt;a href=&#34;http://reference.wolfram.com/language/ref/Head.html&#34;&gt;Head&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;Head&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/@ partInstanceAsList
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out: {Integer, String, RGBColor}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tuple-recordrow&#34;&gt;Tuple (Record/Row)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A tuple is a finite ordered list of elements. In mathematics, an n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer.
In computer science, tuples are directly implemented as product types in most functional programming languages. More commonly, they are implemented as record types, where the components are labeled instead of being identified by position alone. This approach is also used in relational algebra.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In database theory, the relational model uses a tuple definition similar to tuples as functions, but each tuple element is identified by a distinct name, called an attribute, instead of a number; this leads to a more user-friendly and practical notation. A tuple in the relational model is formally defined as a finite function that maps attributes to values. In this notation, attribute-value pairs may appear in any order - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Tuple&#34;&gt;Tuple&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Wolfram Language record abstract data structure is usually represented with the &lt;a href=&#34;http://reference.wolfram.com/language/ref/Association.html&#34;&gt;Association&lt;/a&gt; function, i.e. a symbolically indexed list of &lt;a href=&#34;http://reference.wolfram.com/language/ref/Rule.html&#34;&gt;Rule&lt;/a&gt;s (key-value pairs).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partInstanceAsAssociation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    partID &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    partName &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    partColor &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt; partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  partInstanceAsAssociation &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Normal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;attribute-fieldcolumn&#34;&gt;Attribute (Field/Column)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The basic relational building block is the domain or data type, usually abbreviated nowadays to type. A tuple is an ordered set of attribute values. An attribute is an ordered pair of attribute name and type name. An attribute value is a specific valid value for the type of the attribute. This can be either a scalar value or a more complex type. A domain describes the set of possible values for a given attribute, and can be considered a constraint on the value of the attribute. Mathematically, attaching a domain to an attribute means that any value for the attribute must be an element of the specified set. Constraints make it possible to further restrict the domain of an attribute - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;&gt;Relational_model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our example, two of our attributes &lt;code&gt;partID&lt;/code&gt; is of integer data type and &lt;code&gt;partName&lt;/code&gt; is of string data type. They both take scalar values. But the &lt;code&gt;partColor&lt;/code&gt; attribute is of complex type and is defined in Wolfram Language with the function &lt;a href=&#34;https://reference.wolfram.com/language/ref/RGBColor.html&#34;&gt;RGBColor&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Apply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rule&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#66d9ef&#34;&gt;Keys&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Head&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/@ partInstanceAsList}], {1}]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out: {partID-&amp;gt;Integer, partName-&amp;gt;String, partColor-&amp;gt;RGBColor}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attribute can be seen as a mapping function. It maps a tuple to a value. We can define a function where we pass a single argument which is the association representation of the tuple and we return the specific value of the key. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isIdentifierOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partID&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isNameOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partName&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isColorOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;assoc_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;assoc&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partColor&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isIdentifierOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isNameOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isColorOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;partInstanceAsAssociation&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;relation-base-relval&#34;&gt;Relation (Base relval)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In the relational model, a relation is a (possibly empty) finite set of tuples all having the same finite set of attributes.This set of attributes is more formally called the sort of the relation, or more casually referred to as the set of column names. A tuple is usually implemented as a row in a database table. The fundamental assumption of the relational model is that all data is represented as mathematical n-ary relations, an n-ary relation being a subset of the Cartesian product of n domains. In the mathematical model, reasoning about such data is done in two-valued predicate logic, meaning there are two possible evaluations for each proposition: either true or false (and in particular no third value such as unknown, or not applicable, either of which are often associated with the concept of NULL). Data are operated upon by means of a relational calculus or relational algebra, these being equivalent in expressive power.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A relation is defined as a set of n-tuples. In both mathematics and the relational database model, a set is an unordered collection of unique, non-duplicated items. A table is an accepted visual representation of a relation; a tuple is similar to the concept of a row. It is a set of tuples sharing the same attributes; a set of columns and rows. A relvar is a named variable of some specific relation type, to which at all times some relation of that type is assigned, though the relation may contain zero tuples - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Predicates and the closed world assumption&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A relation consists of a heading and a body. A heading is a set of attributes. A body (of an n-ary relation) is a set of n-tuples. The heading of the relation is also the heading of each of its tuples. The body of a relation is sometimes called its extension. This is because it is to be interpreted as a representation of the extension of some predicate, this being the set of true propositions that can be formed by replacing each free variable in that predicate by a name (a term that designates something). There is a one-to-one correspondence between the free variables of the predicate and the attribute names of the relation heading. Each tuple of the relation body provides attribute values to instantiate the predicate by substituting each of its free variables. The result is a proposition that is deemed, on account of the appearance of the tuple in the relation body, to be true. Contrariwise, every tuple whose heading conforms to that of the relation, but which does not appear in the body is deemed to be false. This assumption is known as the closed world assumption: it is often violated in practical databases, where the absence of a tuple might mean that the truth of the corresponding proposition is unknown - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-02&#34; src=&#34;https://healis.eu/en/post/20150317/notebook02.jpg&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Silver&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Brake for Crop Circles Sticker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Translucent&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cyan&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magenta&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7 Segment Display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;view-derived-relvar--result-set&#34;&gt;View (Derived relvar / Result set)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In a relational database, all data are stored and accessed via relations. Relations that store data are called &amp;ldquo;base relations&amp;rdquo;, and in implementations are called &amp;ldquo;tables&amp;rdquo;. Other relations do not store data, but are computed by applying relational operations to other relations. These relations are sometimes called &amp;ldquo;derived relations&amp;rdquo;. In implementations these are called &amp;ldquo;views&amp;rdquo; or &amp;ldquo;queries&amp;rdquo; - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queryString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT Catalog.catsid,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Suppliers.sname,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Catalog.catpid,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Parts.pname,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Parts.pcolor,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         Catalog.catcost
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM Suppliers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  INNER JOIN (Parts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              INNER JOIN [Catalog] ON Parts.pid = Catalog.[catpid]) ON Suppliers.sid = Catalog.[catsid]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE (((Catalog.catpid)=998))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY Catalog.catcost;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLExecute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, queryString, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;&lt;img alt=&#34;notebook-output-03&#34; src=&#34;https://healis.eu/en/post/20150317/notebook03.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Each database is a collection of related tables; these are also called relations, hence the name &amp;ldquo;relational database&amp;rdquo;. Each table is a physical representation of an entity or object that is in a tabular format consisting of columns and rows - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_(database)&#34;&gt;Relation_(database)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TableType&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableTypeNames&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysAccessObjects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysAccessXML&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysACEs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysIMEXColumns&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysIMEXSpecs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNameMap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroupCategories&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroups&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneGroupToObjects&amp;#34;&lt;/span&gt;, \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysNavPaneObjectIDs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysObjects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysQueries&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MSysRelationships&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Catalog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;View998Suppliers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ViewAll&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLTableInformation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt;&lt;img alt=&#34;notebook-output-04&#34; src=&#34;https://healis.eu/en/post/20150317/notebook04.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;entity-relationship-er-constructs&#34;&gt;Entity-Relationship (ER) Constructs&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ER data model is a systematic way of describing and defining a business process. The process is modeled as components (entities) that are linked with each other by relationships that express the dependencies and requirements between them. Entities may have various properties (attributes) that characterize them. Diagrams created to represent these entities, attributes, and relationships graphically are called ER diagrams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced Entity Relationship (EER)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The EER data model includes all of the concepts introduced by the ER model. Additionally it includes the concepts of a subclass and superclass (Is-a), along with the concepts of specialization and generalization. Furthermore, it introduces the concept of a union type or category, which is used to represent a collection of objects that is the union of objects of different entity types - Wikipedia, &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&#34;&gt;Entity–relationship_model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;record-representations&#34;&gt;Record Representations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You need to maintain two ordered lists, one for the data values and another one for the semantics, i.e. the attribute/column names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  partInstanceAsList
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;:  attributes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {pid, pname, pcolor}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can combine the two lists in one list of &lt;code&gt;Rules&lt;/code&gt; with the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;attributes, partInstanceAsList&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Rule is the equivalent of a key-value pair, but it is more powerful because in Wolfram Language it is the basic mechanism that is used in transformations. Nevertheless for lookup operations and updating Wolfram researchers added a more powerful construct that is called Association, see below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Triples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let us call a specific part instance partXYZ, if we represent this as the subject resource of a triplet, the list of attributes as the predicates and the list of values as the objects we can take the following triplets&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.org/resource/partXYZ&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;predicate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StringJoin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.org/attribute/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ attributes;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partInstanceAsList;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Transpose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{subject, predicate, object}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TableForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-05&#34; src=&#34;https://healis.eu/en/post/20150317/notebook05.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Directed Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;notebook-output-06&#34; src=&#34;https://healis.eu/en/post/20150317/notebook06.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Tree&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wolfram Language functions are tree data structures that are created in the memory as a contiguous array of pointers, the first to the head and the rest to its successive elements. Take for example the &lt;code&gt;List&lt;/code&gt; we defined, we can present it in a tree form with the command :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TreeForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly we can represent this row of data as a function with three arguments that take values from the Integer, String, and Color domain, e.g. :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partFunction&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;RGBColor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TreeForm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Out:&lt;/code&gt; &lt;img alt=&#34;notebook-output-07&#34; src=&#34;https://healis.eu/en/post/20150317/notebook07.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Association&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Associations in Wolfram Language are very similar to the &lt;a href=&#34;http://www.topicmapslab.de/articles/TMDM_in_a_nutshell&#34;&gt;Association Type&lt;/a&gt; construct of the Topic Map data model. Each defined association is an instance of an association type. The keys of the association, association role types according to Topic Maps terminology, describe the role type of each value in the association instance. The values of the association, association role players according to Topic Maps terminology, describe the particular instance of the association type.&lt;/p&gt;
&lt;p&gt;The command to perform the association of attributes with their values is the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;attributes&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;partInstanceAsList&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Keys&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {partID, partName, partColor}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Association is a relatively new fundamental construct in Wolfram Language, it acts like a symbolically indexed list. The main reason for using it is to allow highly efficient lookup and updating and also build complex hierarchical structures and other datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. List of Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can easily convert an Association to a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Rules&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Normal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;6. Hypergraph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the following hypergraph representation we keep separate the schema from the data, i.e. the types from instances.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;notebook-output-08&#34; src=&#34;https://healis.eu/en/post/20150317/notebook08.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this hypergraph the &lt;code&gt;$Part&lt;/code&gt; plays the role of the hyperedge (red color) that connects three hypernodes that represent the attributes pid, pname, and pcolor (black color). Similarly for the values we have:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;notebook-output-09&#34; src=&#34;https://healis.eu/en/post/20150317/notebook09.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this hypergraph the &lt;code&gt;$Part991&lt;/code&gt; plays the role of a hyperedge (green color) that connects three hypernodes that represent the values 991, &amp;ldquo;Left Handled&amp;hellip;.&amp;rdquo;, RED (blue color).&lt;/p&gt;
&lt;p&gt;We defined two &lt;code&gt;hyperedges&lt;/code&gt;, one at a layer of concepts to represent the head of the record, and another at the data layer to represent the body of the record.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. EntityPropertyAssociation&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Association&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$Part991&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partColor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt; $Part991 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;partID&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, partName&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, partColor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;table-representations&#34;&gt;Table Representations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. List of Lists&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;In&lt;/span&gt;: partsList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SQLSelect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parts&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ShowColumnHeadings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Out&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcolor&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left Handed Bacon Stretcher Cover&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smoke Shifter End&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Acme Widget Washer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Silver&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Brake for Crop Circles Sticker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Translucent&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cyan&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Anti-Gravity Turbine Generator&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magenta&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fire Hydrant Cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7 Segment Display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. List of Associations&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ;;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;991&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bacon&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stretcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cover&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;992&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Smoke&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Shifter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Black&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;994&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Acme&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Washer&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Silver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;995&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;I &lt;span style=&#34;color:#66d9ef&#34;&gt;Brake&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Circles&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sticker&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Translucent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;996&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Cyan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;997&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Anti&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Gravity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Turbine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Generator&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Magenta&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Fire&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Hydrant&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cap&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Red&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;|&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;,pname&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Segment&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Display&lt;/span&gt;,pcolor&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Green&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3. Dataset&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partsList&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ;;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AssociationThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;head &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#] &amp;amp; /@ body //Dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;notebook-output-10&#34; src=&#34;https://healis.eu/en/post/20150317/notebook10.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Constraints provide one method of implementing business rules in the database. SQL implements constraint functionality in the form of check constraints. Constraints restrict the data that can be stored in relations. These are usually defined using expressions that result in a boolean value, indicating whether or not the data satisfies the constraint - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Constraints can apply to single attributes, to a tuple (restricting combinations of attributes) or to an entire relation. Since every attribute has an associated domain, there are constraints (domain constraints). The two principal rules for the relational model are known as entity integrity and referential integrity - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/towards-new-data-modelling-architecture-part-1-hatzis-phd&#34;&gt;LinkedIn Published Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://community.wolfram.com/groups/-/m/t/464147&#34;&gt;Wolfram Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>S3DM/R3DM</title>
      <link>https://healis.eu/en/project/r3dm/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/project/r3dm/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#computational-semiotic-triangle&#34;&gt;Computational Semiotic Triangle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-core-terms-of-s3dmr3dm&#34;&gt;The Core Terms of S3DM/R3DM&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#sterms&#34;&gt;STerms&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#rterms&#34;&gt;RTerms&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#other-terms&#34;&gt;Other Terms&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#trilateral-relations&#34;&gt;Trilateral Relations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#s3dmr3dm-dogma&#34;&gt;S3DM/R3DM Dogma&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#s3dmr3dm-formalization-v20&#34;&gt;S3DM/R3DM Formalization v2.0&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#memorizing-the-formula&#34;&gt;Memorizing the formula&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#s3dmr3dm-formalization-v10&#34;&gt;S3DM/R3DM Formalization v1.0&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#the-trilateral-principle&#34;&gt;The Trilateral Principle&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#symbols-duality-principle&#34;&gt;Symbol&amp;rsquo;s Duality Principle&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-threefold-tower-of-babel-in-information-technology&#34;&gt;The Threefold Tower of Babel in Information Technology&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;S3DM/R3DM is a conceptual framework that formalizes the architectural design of data modeling process in software engineering. It is founded on the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Sign_(semiotics)&#34;&gt;&lt;code&gt;Sign&lt;/code&gt;&lt;/a&gt; from Ancient to Modern Semiotics. S3DM/R3DM framework is based on the powerful theory of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Triangle_of_reference&#34;&gt;semiotic triangle&lt;/a&gt;, a.k.a triangle of reference. We use numerical vectors (&lt;code&gt;signs&lt;/code&gt;), to encode abstract things in our mind (&lt;code&gt;signified&lt;/code&gt;) to which the sign refers, e.g. Person, name, Car, model. We associate these with data containers-forms that the sign takes for the storage of data values (&lt;code&gt;signifier&lt;/code&gt;), i.e. primitive data types (see wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Signified_and_signifier&#34;&gt;Signified and Signifier&lt;/a&gt; article). This trilateral principle of S3DM/R3DM framework permits a uniform treatment of &lt;strong&gt;semantics&lt;/strong&gt;, &lt;strong&gt;syntax&lt;/strong&gt; and &lt;strong&gt;storage&lt;/strong&gt; of information based on a symbolic representation. Next we define a fundamental, &lt;strong&gt;atomic information resource unit&lt;/strong&gt;, (AIR). Those units, in turn, can be easily shaped to form any tabular, hierarchical, or graph data structure in a unified way. Data granularity can be also deeply connected and related to the definition of a fundamental unit of processing.&lt;/p&gt;
&lt;h2 id=&#34;computational-semiotic-triangle&#34;&gt;Computational Semiotic Triangle&lt;/h2&gt;








  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-triangles&#34; href=&#34;https://healis.eu/en/project/r3dm/triangles/1.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/project/r3dm/triangles/1_hu36aa7f76864557f3365108584961a105_72807_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-triangles&#34; href=&#34;https://healis.eu/en/project/r3dm/triangles/2.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/project/r3dm/triangles/2_hu21e291047e3aff5b1aa1a72857386392_434705_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-triangles&#34; href=&#34;https://healis.eu/en/project/r3dm/triangles/3.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/project/r3dm/triangles/3_hu51a099ed62fa0c4ab18c6aa77bd260ce_417813_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-triangles&#34; href=&#34;https://healis.eu/en/project/r3dm/triangles/4.jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/project/r3dm/triangles/4_hu892b8cab1a2bc8a100e1abb73c5314bf_1111011_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-triangles&#34; href=&#34;https://healis.eu/en/project/r3dm/triangles/5..jpg&#34; &gt;
  &lt;img src=&#34;https://healis.eu/en/project/r3dm/triangles/5._hue8fd63799a17e9a13e3af2a06cce3c19_414369_0x190_resize_q90_lanczos.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;First illustration with porsche&lt;/li&gt;
&lt;li&gt;Second illustration with
&lt;ul&gt;
&lt;li&gt;information resources&lt;/li&gt;
&lt;li&gt;information representation&lt;/li&gt;
&lt;li&gt;information realization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Third illustration with
&lt;ul&gt;
&lt;li&gt;concepts&lt;/li&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;computer storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Illustration with real-world object (green leaves)&lt;/li&gt;
&lt;li&gt;Illustration with an event (traffic lights)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-core-terms-of-s3dmr3dm&#34;&gt;The Core Terms of S3DM/R3DM&lt;/h2&gt;
&lt;p&gt;There are two sets of base terms one starting with the letter &amp;lsquo;R&amp;rsquo; and the other with the letter &amp;lsquo;S&amp;rsquo; that we can use in order to convey the fundamental principles of R3DM. Both of the sets are outlined hierarchically into three levels. Each level is described with one or more characteristic words that are useful for memorizing and recapitulating the distinguishing features of R3DM.&lt;/p&gt;
&lt;h3 id=&#34;sterms&#34;&gt;STerms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;S3 : Signified, Sense, Semantic - Signify&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Signified, in Greek &amp;ldquo;σημαινόμενον&amp;rdquo;, to mean something&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S2 : Sign, Symbol, Syntax, Structure - SymbolizeS2 : Sign, Symbol, Syntax, Structure - Symbolize&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign, in Greek &amp;ldquo;σημείο&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S1 : Signifier, Storage (String) - Store&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Signifier, in Greek &amp;ldquo;σημαίνον&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rterms&#34;&gt;RTerms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;R3 : Information Resource - InfoRes (Enity) - Originate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R2 : Information Representation - InfoRes (Symbol) - Represented&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R1 : Information Realization (Datum) - Realized&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other-terms&#34;&gt;Other Terms&lt;/h3&gt;
&lt;p&gt;There are also other terms that are often used when we describe relations, operations and features in R3DM these are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Referenced&lt;/li&gt;
&lt;li&gt;Interpreted&lt;/li&gt;
&lt;li&gt;Formatted&lt;/li&gt;
&lt;li&gt;Expressed&lt;/li&gt;
&lt;li&gt;Decoded&lt;/li&gt;
&lt;li&gt;Encoded&lt;/li&gt;
&lt;li&gt;Parsed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trilateral-relations&#34;&gt;Trilateral Relations&lt;/h3&gt;
&lt;p&gt;The trilateral schema of relations between R1, R2 and R3 or equally between S1, S2, S3 defines the core mechanism of semiosis. We will use the terms we defined in previous section to build simple sentences that convey the full meaning. We will also use three prepositions &amp;ldquo;from&amp;rdquo;, &amp;ldquo;through&amp;rdquo; and &amp;ldquo;in&amp;rdquo; that accompany RTerms and STerms in a specific order that signifies the left to right direction of abstraction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direction from S1 through S2 in S3&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data from S1 are Symbolized through S2 and Signified in S3&lt;/li&gt;
&lt;li&gt;Data from S1 are Decoded through S2 and Interpreted in S3&lt;/li&gt;
&lt;li&gt;Realization from S1 is Parsed through S2 and Interpreted in S3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direction from S3 through S2 in S1&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information Resources from S3 are Represented through S2 and Realized in S1&lt;/li&gt;
&lt;li&gt;Information Resources from S3 are Represented through S2 and Encoded in S1&lt;/li&gt;
&lt;li&gt;Information Resources from S3 are Represented through S2 and Formatted in S1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;


&lt;button class=&#34;btn  btn-warning&#34; type=&#34;button&#34;  &gt; An Interpretation from S3 is Symbolized through S2 and Formatted in S1 &lt;/button&gt;



&lt;/li&gt;
&lt;li&gt;


&lt;button class=&#34;btn  btn-warning&#34; type=&#34;button&#34;  &gt; Information Resources from S3 are Symbolized through S2 and Stored in S1 &lt;/button&gt;



&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;s3dmr3dm-dogma&#34;&gt;S3DM/R3DM Dogma&lt;/h3&gt;
&lt;p&gt;With the term dogma we want to bring together a set of R3DM principles laid down by an authority as incontrovertibly true. R3DM dogma serves as part of the primary basis of R3DM modelling system, and it cannot be changed or discarded without affecting the very system&amp;rsquo;s paradigm. R3DM is serving one purpose to become the paradigm of paradigms, the metamodel of metamodels.&lt;/p&gt;
&lt;h2 id=&#34;s3dmr3dm-formalization-v20&#34;&gt;S3DM/R3DM Formalization v2.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;S3DM/R3DM is a conceptual model of an information processing system based on semiosis. S3DM/R3DM fundamental construct is the uniform information &lt;strong&gt;RESOURCE (UIR)&lt;/strong&gt;, i.e. a parent class of the following three derived subclasses :&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;Term Information Resource (TIR)&lt;/strong&gt; models any concept, subject, topic, idea at a highest level, S3, i.e. sense, context level, of abstraction. TIR is also called the signified information resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the next, intermediate level, S2 - sign level, a &lt;strong&gt;Sign Information Resource (SIR)&lt;/strong&gt;, models the notion of the sign in semiotics. Therefore (TIR) is &lt;strong&gt;REPRESENTED&lt;/strong&gt; by (SIR).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally at level, S1, i.e. data level, (SIR) conveys information that are encoded inside a data container, i.e. &lt;strong&gt;Datum Information Resource (DIR)&lt;/strong&gt;, signifier. The content inside (DIR), i.e. data, is expressed with an atomic or complex data structure and &lt;strong&gt;REALIZED&lt;/strong&gt; with operations on data. Therefore &lt;strong&gt;(SIR) is REALIZED by (DIR)&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In all the levels, S3, S2, S1 of abstraction references are created and maintained for the context of the signified concept (S3), the construction of signs (S2), and for the addressing of containers and the indexing of content that express signifiers (S1). Thus, information resources are &lt;strong&gt;REFERENCED&lt;/strong&gt; differently depending on the level of abstraction by a &lt;strong&gt;Reference Information Resource (RIR)&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a hidden level S0, machine-system level, where everything is encoded and expressed with a sequence of binary digits but this currently out of our scope.&lt;/p&gt;






&lt;figure class=&#34;alignleft&#34;&gt;

&lt;img src=&#34;r3dm_formalization_v2.jpg&#34; &gt;


&lt;/figure&gt;

&lt;h3 id=&#34;memorizing-the-formula&#34;&gt;Memorizing the formula&lt;/h3&gt;
&lt;p&gt;In a concise way S3DM/R3DM can be described in any of the following memorable ways&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S3DM/R3DM Edges - Duality of Sign&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any Sign at level S2 is correlated to a Signifier at level S1 and the Signified at level S3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S3DM/R3DM Nodes - Triadic Relationship&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any information RESOURCE at level S3 can be REPRESENTED at level S2 and REALIZED at level S1 using a different REFERENCE mechanism at each level.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S3DM/R3DM Nodes - Triadic Relationship&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information RESOURCES are REPRESENTED, REALIZED and REFERENCED&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S3DM/R3DM Nodes - Triadic Relationship&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information RESOURCES are originated FROM level S3, are represented THROUGH level S2 and encoded IN level S1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;s3dmr3dm-formalization-v10&#34;&gt;S3DM/R3DM Formalization v1.0&lt;/h2&gt;
&lt;p&gt;In fact it occurs that this formalization is also the first attempt to formalize the notion of the word “plerophoria”, i.e. information translated in Greek, using Aristotle’s semiotic triangle of meaning.&lt;/p&gt;
&lt;p&gt;S3DM/R3DM models any concept C at a highest level, L2, of abstraction.&lt;/p&gt;
&lt;p&gt;Information RESOURCES about that concept are REPRESENTED and consequently encoded using a combination of signs S at an intermediate level, L1, into a message M.&lt;/p&gt;
&lt;p&gt;Then at the lowest level, L0, the content of M is expressed with a complex data structure D and REALIZED with operations on data containers.&lt;/p&gt;
&lt;p&gt;In all L0, L1, L2 levels of abstraction, we maintain REFERENCES for the context (L2), for the construction of signs (L1), and for the addressing of containers and the indexing of content (L0).&lt;/p&gt;
&lt;h3 id=&#34;the-trilateral-principle&#34;&gt;The Trilateral Principle&lt;/h3&gt;
&lt;p&gt;Resource, symbol and data, each plays a distinct role but they are united with a trilateral relationship and act as one thing. They are present at every level of R3DM as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;button class=&#34;btn  btn-warning&#34; type=&#34;button&#34;  &gt; Signified - Sign - Signifier &lt;/button&gt;


&lt;/li&gt;
&lt;li&gt;or&lt;/li&gt;
&lt;li&gt;

&lt;button class=&#34;btn  btn-warning&#34; type=&#34;button&#34;  &gt; Resource - Representation - Realization &lt;/button&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact you cannot separate these three things in any computer engineering architecture, the signifier (the concept, semantics), the symbol (serialization, syntax), and the signified (storage, data form, i.e. strings, numbers, bits). They stay together from the lowest level of abstraction, to the highest level. You can only link these meaning triangles side by side and move in two directions, specialization or generalization, &lt;a href=&#34;http://www.jfsowa.com/ontology/ontometa.htm&#34;&gt;Sowa Ontology, Metadata, and Semiotics&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;symbols-duality-principle&#34;&gt;Symbol&amp;rsquo;s Duality Principle&lt;/h3&gt;


&lt;button class=&#34;btn  btn-warning&#34; type=&#34;button&#34;  &gt; EVERYTHING is represented with a symbol &lt;/button&gt;



&lt;p&gt;There is a duality on the characteristics of a sign. Symbols play two roles at the same time that of a container and content. These roles cannot be separated, they always come in pairs. You may think in terms of how computer memory works to understand this. In digital computers &lt;strong&gt;EVERYTHING is represented with a sequence of bits&lt;/strong&gt;, but this sequence is stored in an array of memory cells. Therefore any such fundamental construct, i.e. data structure, that can be build at a higher level should comply with a symmetrical design, i.e. Types, Instances, Values, and Relations-Associations all of them have to be constructed from these atomic fundamental constructs.&lt;/p&gt;
&lt;h2 id=&#34;the-threefold-tower-of-babel-in-information-technology&#34;&gt;The Threefold Tower of Babel in Information Technology&lt;/h2&gt;
&lt;p&gt;A concise synopsis of the chaotic situation that is present in information technology is this:&lt;/p&gt;
&lt;p&gt;The user is experiencing a threefold Tower of Babel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in semantic web and linked data - conceptual modelling,&lt;/li&gt;
&lt;li&gt;in computer programming - symbolic modelling&lt;/li&gt;
&lt;li&gt;in persistent or temporary storage and retrieval of information - data modelling.&lt;/li&gt;
&lt;/ul&gt;






&lt;figure class=&#34;alignleft&#34;&gt;

&lt;img src=&#34;babel.jpg&#34; &gt;


&lt;/figure&gt;

&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;%7B%7Bbase_path%7D%7D/r3dm_project/post000000/&#34;&gt;HEALIS   - 20120920 Ignite Athens 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-275236266&#34;&gt;LinkedIn - 20130920 Topic Maps Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/60636/60636-275239328&#34;&gt;LinkedIn - 20130920 Linked Data Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/38506/38506-275240136&#34;&gt;LinkedIn - 20130920 Semantic Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/73235/73235-275241358&#34;&gt;LinkedIn - 20130920 Database Developers and Architects Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/60636/60636-275742535&#34;&gt;LinkedIn - 20130923 Linked Data Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-276331243&#34;&gt;LinkedIn - 20130925 Semantic Web Research - URI Identity Crisis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-277065814&#34;&gt;LinkedIn - 20130927 Semantic Web Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5812169398596702208&#34;&gt;LinkedIn - 20131129 Computational Semiotics - The Variable-Value Pair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5812182372547850240&#34;&gt;LinkedIn - 20131129 Semantic Web Research - The Variable-Value Pair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-5812199358258520066&#34;&gt;LinkedIn - 20131129 Topic Maps Community - The loss of interest in Topic Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5814353290581803012&#34;&gt;LinkedIn - 20131205 Semantic Web Research - About a better layered semantic structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5816861850800791555&#34;&gt;LinkedIn - 20131212 Semantic Web Research - How about a noSPARQL and noLinked Data movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5817207331682816002&#34;&gt;LinkedIn - 20131213 Semantic Web Research - Linked Data, an unnecessarily complicated technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2085042/2085042-5817215079413747713&#34;&gt;LinkedIn - 20131213 NoSQL - How about a noSPARQL and noLinked Data movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-5817216825900965891&#34;&gt;LinkedIn - 20131213 Chief Information Security Officer - How about a noSPARQL&amp;hellip;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2552968/2552968-5817217868823031811&#34;&gt;LinkedIn - 20131213 Graph Databases - How about a noSPARQL and noLinked Data movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5819436988985540612&#34;&gt;LinkedIn - 20131219 Semantic Web Research - Retrofitting, the reality, (CubeWeb)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5827030802524827648&#34;&gt;LinkedIn - 20140109 Semantic Web Research - The best debate ever in computer science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-5827044890873208832&#34;&gt;LinkedIn - 20140109 Topic Maps Community - The best debate ever in computer science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5847683290588282884&#34;&gt;LinkedIn - 20140307 Semantic Web Research - R3DM All right, All right, All right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5847725615553212419&#34;&gt;LinkedIn - 20140307 Semantic Web Research - Data and metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5862218105228394497&#34;&gt;LinkedIn - 20140416 Semantic Web Research - R3DM Conceptual Model Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5862220749883850752&#34;&gt;LinkedIn - 20140416 Semantic Web Research - R3DM a glimpse from the future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5862565206613323778&#34;&gt;LinkedIn - 20140417 Computational Semiotics - R3DM A computational semiotics interpretation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5866677067252277249&#34;&gt;LinkedIn - 20140428 Computational Semiotics - R3DM An explanation of the identity crisis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5866694831748706308&#34;&gt;LinkedIn - 20140428 Semantic Web Research - R3DM An explanation of the identity crisis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5867387764193927171&#34;&gt;LinkedIn - 20140430 Semantic Web Research - Something very big is coming Wolfram Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5870361376756637699&#34;&gt;LinkedIn - 20140509 Semantic Web Research - Linked Data vs Linked Documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5883270314305028098&#34;&gt;LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5883147163483013124&#34;&gt;LinkedIn - 20140613 Computational Semiotics - First Attempt to Formalise R3DM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5883182557104742403&#34;&gt;LinkedIn - 20140613 Semantic Web Research - R3DM Formalization v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5884640137274499075&#34;&gt;LinkedIn - 20140617 Semantic Web Research - R3DM Formalization v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5884629742212128772&#34;&gt;LinkedIn - 20140617 Computational Semiotics - R3DM Formalization v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/41001/41001-5889035439259553793&#34;&gt;LinkedIn - 20140617 Functional Programming - Best paradigm for implementing R3DM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5889047044898717696&#34;&gt;LinkedIn - 20140629 Semantic Web Research - Crossroad of Database, Functional Programming and Semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5901305361410846723&#34;&gt;LinkedIn - 20140802 Semantic Web Research - The Threefold Tower of Babel in Information Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62614/62614-5901305006312685571&#34;&gt;LinkedIn - 20140802 Mathematica Users - The Threefold Tower of Babel in Information Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/37945/37945-5901306328223092737&#34;&gt;LinkedIn - 20140802 Artificial Intelligence - The Threefold Tower of Babel in Information Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-5901310366939377667&#34;&gt;LinkedIn - 20140802 Topic Maps Community - The Threefold Tower of Babel in Information Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5901292520796618753&#34;&gt;LinkedIn - 20140802 Computational Semiotics - R3DM perspective on Wolfram Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2099362/2099362-5910345937716281345&#34;&gt;LinkedIn - 20140802 Greek IT Network - The Threefold Tower of Babel in Information Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-5926423771366846465&#34;&gt;LinkedIn - 20141010 Topic Maps Community - R3DM: A new paradigm on data modelling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5926425191910510594&#34;&gt;LinkedIn - 20141010 Semantic Web Research - R3DM: A new paradigm on data modelling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62614/62614-5926429468590637059&#34;&gt;LinkedIn - 20141010 Mathematica Users - R3DM: A new paradigm on data modelling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62614/62614-5931025523416268801&#34;&gt;LinkedIn - 20141023 Mathematica Users - The Role of Mathematica in semantic technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5932579789884919812&#34;&gt;LinkedIn - 20141027 Semantic Web Research - Semantic Web Research in a poetic style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5933416099717607425&#34;&gt;LinkedIn - 20141030 Semantic Web Research - AtomicDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5935020264617185285&#34;&gt;LinkedIn - 20141103 Semantic Web Research - Connecting values at an atomic level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/3750024/3750024-5935026662285541379&#34;&gt;LinkedIn - 20141103 Chief Information Security Officer - New paradigm for data modelling in the NoSQL world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5935060245876342788&#34;&gt;LinkedIn - 20141103 Semantic Web Research - An unusual criticism on RDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5935481161441648643&#34;&gt;LinkedIn - 20141104 Semantic Web Research - RDF is that the most basic data model you can think about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/62614/62614-5935484136608268289&#34;&gt;LinkedIn - 20141104 Mathematica Users - Symbolic expressions in mathematica and the RDF model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2085042/2085042-5935641835354484737&#34;&gt;LinkedIn - 20141105 NoSQL - Direct linking of two nodes with bidirectional pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5942557803641073668&#34;&gt;LinkedIn - 20141124 Computational Semiotics - The core terms of R3DM from two perspectives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5942559799718748161&#34;&gt;LinkedIn - 20141124 Computational Semiotics - R3DM Trilateral Relations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5942584139847868418&#34;&gt;LinkedIn - 20141124 Computational Semiotics - R3DM Principles The Dogma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5942593120347652098&#34;&gt;LinkedIn - 20141124 Semantic Web Research - R3DM The core mechanism of abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5955740180148162562&#34;&gt;LinkedIn - 20141230 Semantic Web Research - R3DM What do we really miss in data modelling field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-6248454510424006661&#34;&gt;LinkedIn - 20170317 Computational Semiotics - S3DM/R3DM Triangle of Meaning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>S3DM/R3DM Q&amp;A</title>
      <link>https://healis.eu/en/post/20131001/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20131001/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#qa-session-on-r3dms3dm&#34;&gt;Q&amp;amp;A session on R3DM/S3DM&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-information&#34;&gt;What is information&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-an-information-resource&#34;&gt;What is an information resource&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-kind-of-information-resources-we-have&#34;&gt;What kind of information resources we have&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-an-information-reference&#34;&gt;What is an information reference&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-information-representation&#34;&gt;What is information representation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-information-realization&#34;&gt;What is information realization&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#why-semantic-models-like-rdfowl-and-tmdm-are-not-sufficient-for-the-semantic-web&#34;&gt;Why semantic models like RDF/OWL and TMDM are not sufficient for the semantic web&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#is-there-an-analogy-of-your-model-with-the-object-oriented-programming-paradigm-where-you-have-reusable-and-composable-structures&#34;&gt;Is there an analogy of your model with the object-oriented programming paradigm where you have reusable and composable structures&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#semantic-web-or-the-web-of-linked-data-is-using-uris-to-identify-and-to-address-information-resources-is-there-a-difference-in-your-model&#34;&gt;Semantic web or the web of linked data is using URIs to identify and to address information resources, is there a difference in your model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#what-is-the-outmost-objective-with-your-r3dm-data-model&#34;&gt;What is the outmost objective with your R3DM data model&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#domain-independent-abstraction-and-kinds-of-relations&#34;&gt;Domain Independent Abstraction and Kinds of Relations&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;qa-session-on-r3dms3dm&#34;&gt;Q&amp;amp;A session on R3DM/S3DM&lt;/h2&gt;
&lt;h3 id=&#34;what-is-information&#34;&gt;What is information&lt;/h3&gt;
&lt;p&gt;In Greek we call it, (&lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;plērophoria&lt;/a&gt;) from πλήρης (plērēs) &amp;ldquo;fully&amp;rdquo; and φέρω (phorein) frequentative of (pherein) to carry through. It means to carry, to convey a message thoroughly, exhaustivelly, in a complete way. It is strongly related to the formation of the message, it depends on the sign vehicle we use to transmit the message.&lt;/p&gt;
&lt;h3 id=&#34;what-is-an-information-resource&#34;&gt;What is an information resource&lt;/h3&gt;
&lt;p&gt;It is a container of information. In the computer world a data container such as a blog, a web address, physical memory, computer hard disk. In the physical world any object can be an information resource.&lt;/p&gt;
&lt;h3 id=&#34;what-kind-of-information-resources-we-have&#34;&gt;What kind of information resources we have&lt;/h3&gt;
&lt;p&gt;A binary information resource (&lt;strong&gt;BIR&lt;/strong&gt;) is a container of information about concepts related to the computer world, such as a web page, a file, an email, a database record, a programming variable. A term information resource (&lt;strong&gt;TIR&lt;/strong&gt;) is a more generalized concept than BIR. TIR is extended to cover any term in general including those we use in our daily human to human communication. Both BIR and TIR represent abstract concepts. These are constructs that we use at the semantic, ontological layer of R3DM.&lt;/p&gt;
&lt;h3 id=&#34;what-is-an-information-reference&#34;&gt;What is an information reference&lt;/h3&gt;
&lt;p&gt;An information reference is the source of information resource. It is where it gets its meaning, it is the place it was originally conceived or defined. Any BIR or TIR is conceived in the human mind in the process of thinking. Therefore it follows naturally that they are referenced accordingly. Human concepts are presented from the sender in a verbal, oral, visual, or written way and are perceived from the receiver. Regarding to the meaning, the semantics of the transmitted information, there is strong connection between the interpretant and the sign vehicle used to carry information. The sign vehicle is strongly dependent on the information reference, i.e. the interpretant. We can have more than one interpretations for the same sign, and likewise any sign is referenced in many ways.&lt;/p&gt;
&lt;h3 id=&#34;what-is-information-representation&#34;&gt;What is information representation&lt;/h3&gt;
&lt;p&gt;Let us take things from the beginning. We have a concept in a human mind. The concept is presented in some perceivable way with symbols, icons, words, spoken sounds, etc. This represents an object of the real world that we want to talk about. In a computer we use metaphores: for example the desktop environment with files and folders on it. In fact any object of the real world can be represented in many ways on a computer screen: characters, numbers, images, sounds, books.&lt;/p&gt;
&lt;h3 id=&#34;what-is-information-realization&#34;&gt;What is information realization&lt;/h3&gt;
&lt;p&gt;Everything that is represented in a computer is in fact encoded in a binary format. Any content, such as text for example, can take many forms but at the end it is stored or transmitted in a binary format. In computers, this is the lowest level of information, it is the data level.&lt;/p&gt;
&lt;h3 id=&#34;why-semantic-models-like-rdfowl-and-tmdm-are-not-sufficient-for-the-semantic-web&#34;&gt;Why semantic models like RDF/OWL and TMDM are not sufficient for the semantic web&lt;/h3&gt;
&lt;p&gt;First let me make something clear. Semantic web is not the web of linked data, it is simply an approximation. In Web 1.0 and 2.0 we were linking documents, e.g. web documents, files. What is different now, is that we also link structured data, from relational databases, from RDF databases. But we are still in the data level. In my opinion Web 3.0 has to be differentiated from the current web, it has to create a distinct layer on top of the existing linked data layer with its own referencing scheme that can be resolved with the current URI scheme. This will have its own way to define and handle terms, concepts, relations, axioms, rules, the structural components of an ontology. The semantic web, is an ontological web. Everything else should revolve around it, data population, ontology enrichment, subject indexing, searching, matching, sharing.&lt;/p&gt;
&lt;p&gt;We can not make a significant progress on the &amp;ldquo;semantic web&amp;rdquo;, because there is not a model that combines the three main models of information architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The database model (data level - Information Realization),&lt;/li&gt;
&lt;li&gt;The programming model (symbol level - Information Representation) and&lt;/li&gt;
&lt;li&gt;The semantic model (human level - Information Referencing).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Indeed, there is ongoing research on RDF data model towards a semantic object framework, to bridge the gap between RDF and object-oriented programming and there are also researchers that investigate the mismatch of RDF with graph models and graph databases, especially property graph databases. R3DM is looking into combining those two interpretations of RDF by utilizing a post-relational database and a native object script language.&lt;/p&gt;
&lt;h3 id=&#34;is-there-an-analogy-of-your-model-with-the-object-oriented-programming-paradigm-where-you-have-reusable-and-composable-structures&#34;&gt;Is there an analogy of your model with the object-oriented programming paradigm where you have reusable and composable structures&lt;/h3&gt;
&lt;p&gt;I think the first question that has to be answered, is how we define the fundamental unit of information processing. Remember, in Topic-Maps Data Model everything is a topic. In our writing system, word-lexeme-morpheme, is our fundamental unit. The current progress with graph databases, and the long research with RDF triplets indicate, that indeed, we can define such a unit. Let us call this information node (iNode). The new question you should ask is how exactly these nodes are related. How do we represent relations ? The encoding of information into triplets has started long time ago, both with the Entity-Attribute-Value databases and now with the linked data movement. Although OWL is supposed to bridge the gap between programming and semantic relations, in practise this has never been achieved! A new programming language that will be based on a transparent handling of semantic relations and the corresponding data management is absent. This new programming language must be closely connected to the database layer.&lt;/p&gt;
&lt;h3 id=&#34;semantic-web-or-the-web-of-linked-data-is-using-uris-to-identify-and-to-address-information-resources-is-there-a-difference-in-your-model&#34;&gt;Semantic web or the web of linked data is using URIs to identify and to address information resources, is there a difference in your model&lt;/h3&gt;
&lt;p&gt;We are trying to develop a new, semantic web, layer on top of the previous one, where the document, i.e. web page, file, etc is the basic unit of information. The two layers can communicate with the current web addressing infrastructure but the new layer MUST have its own referencing scheme. A scheme that will be used both for retrieving and updating purposes. The naming/identification issue is also of critical importance here.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-outmost-objective-with-your-r3dm-data-model&#34;&gt;What is the outmost objective with your R3DM data model&lt;/h3&gt;
&lt;p&gt;The current www is based on content (data) and addressing (hypelinks) and the main founder and visioner of the Web Tim Berner&amp;rsquo;s Lee cries out &amp;ldquo;put the data on the web&amp;rdquo;. But the point is how to represent and link the human knowledge on the web, things like concept maps (Novak), conceptual graphs (Sowa) and these are based on linking concepts, not data. I would like to see the web of linked concepts. I see an obsession in many for machine readable data. The point is how our technology can assist us in making fast and smart decisions, in solving extremely complicate problems of interdisciplinary nature and machine readable data is just part of it.&lt;/p&gt;
&lt;h3 id=&#34;domain-independent-abstraction-and-kinds-of-relations&#34;&gt;Domain Independent Abstraction and Kinds of Relations&lt;/h3&gt;
&lt;p&gt;I think it is fundamental for the improvement of this kind of “Semantic Web”, LinkedData Web, if there is going to be some effort to describe and represent abstraction and relation types. We would not have to deal with such a chaos of alignment and mapping on predicates if there was some generally acceptable template, formula on what kind of Domain Independent Abstractions exist and how we can formulate them.&lt;/p&gt;
&lt;p&gt;Part of my R3DM data model and the work in it, is to define such a schema. I will give you a flavour here with an example that is characteristic of the confusion that exists between two specific generic relation types, (1) inheritance-subtyping and (2) hypernymy-hyponymy. Consider the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)	Music composition &amp;mdash;- isBroaderThan &amp;mdash;&amp;gt; Sonata&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)	Sonata &amp;mdash;- isNarrowerThan &amp;mdash;&amp;gt; Music Composition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)	Music Instrument &amp;mdash;- isHypernymOf &amp;mdash;&amp;gt; Wind Instrument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)	Wind Instrument &amp;mdash;- isHyponymOf &amp;mdash;&amp;gt; Music Instrument&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that both relations are symmetric and we need to define both directions. Each entity plays also a specific role in that relation. Now, if we can find a consistent way to describe relations that will make life much easier for both the developers and the researchers in “Semantic Web” area.&lt;/p&gt;
&lt;p&gt;In my opinion, we can define three broad classes of hierarchical relations that create all kinds of taxonomies (read more about them in other recent posts in this group).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generalization-Specialization expressed with the predicates
nulon:isBroaderThan and nulon:isNarrowerThan and the roles Superior, Subordinate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hyponymy-Hypernymy expressed with the predicates
nulon:isHypernymOf and nulon:isHyponymOf and the roles Hypernym, Hyponym&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Holonymy-Meronymy expressed with the predicates
nulon:isWholeOf and nulon:isPartOf and the roles Whole, Part&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Triples can be seen as binary predicates, but n-ary relations is a very natural way of thinking about many things such as events. This is exactly the point of a big divergence among TopicMapDM, RelationalDM, GraphPropertyDM, Freebase DM, Associative DM, RDF/OWL DM and others.&lt;/p&gt;
&lt;p&gt;I think modelling n-ary relations is not the root of the problem. The mother of all problems in data modelling is the bootstrap mechanism of creating types and the absence of a single universal Upper Level Ontology as the gold standard to define core basic types. Take Freebase for example, they have defined from scratch their own type system.&lt;/p&gt;
&lt;p&gt;This again cannot be seen in isolation of the data structures, a low level issue, that one is using to permanently store or process the data. This is why I insist that software engineers have to think in at least three perspectives of R3DM semiotic data model, i.e. the semantic, the symbolic and the storage.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2099362/2099362-228909136&#34;&gt;LinkedIn - 20130403 Greek IT Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-275236266&#34;&gt;LinkedIn - 20130920 Topic Maps Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-277065814&#34;&gt;LinkedIn - 20130927 Semantic Web Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5812169398596702208&#34;&gt;LinkedIn - 20131129 Computational Semiotics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5822403300636532737&#34;&gt;LinkedIn - 20131227 Semantic Web Research - Domain Independent Abstraction and Kinds of Relations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-5823055552451743745&#34;&gt;LinkedIn - 20131229 Semantic Web Research - Taxonomy Relations - My perspective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5932586289760079874&#34;&gt;LinkedIn - 20131129 Computational Semiotics - About Binary and N-ary relations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Origins of a new theoretical framework on information representation</title>
      <link>https://healis.eu/en/post/20130403/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://healis.eu/en/post/20130403/</guid>
      <description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#information-resources-and-real-world-objects&#34;&gt;Information Resources and Real-World Objects&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#origins-of-a-new-theoretical-framework-on-information-representation&#34;&gt;Origins of a new theoretical framework on information representation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#cross-references&#34;&gt;Cross-References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;information-resources-and-real-world-objects&#34;&gt;Information Resources and Real-World Objects&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The distinguishing characteristic of these resources is that all of their essential characteristics can be conveyed in a message. We identify this set as information resources&lt;/strong&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Assume we accept this definition for &amp;ldquo;information resources&amp;rdquo;. Let us take a real apple. Then we ask ourselves, is that apple an information resource according to the previous definition. In my opinion, the answer is No. Because &lt;strong&gt;we cannot convey all the essential characteristics&lt;/strong&gt; of an apple in a message, even if the message is transmitted through conventional human to human communication channels. If someone has not tasted an apple before then you cannot convey that characteristic in a message. One has to eat the apple to learn about that characteristic and many more.&lt;/p&gt;
&lt;p&gt;In addition to that, many will be familiar with pictures like the following one from artist Rene Magritte showing a pipe and underneath a text message in French saying &amp;ldquo;this is not a pipe&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Well this is not a pipe indeed, it is an information resource about a pipe. To be more specific this is a visual representation (image encoding) of a pipe. Or you may also say we present graphically, we draw a pipe. It is something that refers to a real pipe, but it is not the pipe. In fact, no matter what is the volume of information you are going to use about a real pipe, you will never manage to convey the &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;full&lt;/strong&gt; meaning of what a pipe is. But enen in the case we approach a very detailed description of something, then the main obstacle is the interpretant and the interpretation of the message.&lt;/p&gt;
&lt;p&gt;In a more recent effort of W3C to distinguish between digital information resources and real-world object &lt;a href=&#34;https://www.w3.org/TR/cooluris/#semweb&#34;&gt;it uses URIs to identify both of them&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;On the Semantic Web, URIs identify not just Web documents, but also real-world objects like people and cars, and even abstract ideas and non-existing things like a mythical unicorn. We call these real-world objects or things&lt;/strong&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is part of a bigger problem due to the inherited weak logic, theory and definitions that support RDF data model. The reader can search for many of these discussions that have appeared on the web under the search term &amp;ldquo;web identity crisis&amp;rdquo;. I believe the root of the problem lies on the inadequate meaning of word information as it is expressed in English. Linguists are aware of the distinction between signifier and signified and Greek language is serving well that purpose as &lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;the word &amp;ldquo;plērophoria&amp;rdquo; (signifier) conveys better the meaning of the word &amp;ldquo;information&amp;rdquo; (signified)&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The ancient Greek word for information is πληροφορία, which transliterates (plērophoria) from πλήρης (plērēs) &amp;ldquo;fully&amp;rdquo; and φέρω (phorein) frequentative of (pherein) to carry through. It literally means &amp;ldquo;bears fully&amp;rdquo; or &amp;ldquo;conveys fully&amp;rdquo;. In modern Greek the word Πληροφορία is still in daily use and has the same meaning as the word information in English. In addition to its primary meaning, the word Πληροφορία as a symbol has deep roots in Aristotle&amp;rsquo;s semiotic triangle. In this regard it can be interpreted to communicate information to the one decoding that specific type of sign.&lt;/strong&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;origins-of-a-new-theoretical-framework-on-information-representation&#34;&gt;Origins of a new theoretical framework on information representation&lt;/h2&gt;
&lt;p&gt;We propose a new theoretical framework that will cover RDF/OWL and Topic Map data models, the EAV model in RDBMS and the object-attribute-value model in OOP. So far there have been very weak attempts to bridge the gap among the Semantic Web, the Relational Databases world, the Object-Oriented programming community and recently the NoSQL Databases arena. All these need a solid theoretical framework that unifies them and an implementation that exhibits that these technologies are simply different perspectives of the same approach to information representation.&lt;/p&gt;
&lt;h2 id=&#34;cross-references&#34;&gt;Cross-References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/2099362/2099362-228909136&#34;&gt;LinkedIn - 20130403 Greek IT Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/109285/109285-228701193&#34;&gt;LinkedIn - 20130403 Topic Maps Community &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/38506/38506-228707355&#34;&gt;LinkedIn - 20130403 Semantic Technologies &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/129217/129217-228708177&#34;&gt;LinkedIn - 20130403 Semantic Web Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/45183/45183-228710356&#34;&gt;LinkedIn - 20130403 Database Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/groups/6514034/6514034-5883270314305028098&#34;&gt;LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/plerophoria-vs-information-athanassios-i-hatzis-phd/&#34;&gt;LinkedIn - 20150523 Article - Plerophoria vs Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Architecture of the WWW, W3C Recommendation 15/12/2004, &lt;a href=&#34;https://www.w3.org/TR/webarch/#id-resources&#34;&gt;section 2.2 URI/Resource Relationships&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Cool URIs for the Semantic Web, W3C Interest Group Note 3/12/2008, &lt;a href=&#34;https://www.w3.org/TR/cooluris/#semweb&#34;&gt;section 3 URIs for Real-World Objects&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Wikipedia, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Information#Etymology&#34;&gt;Etymology section&lt;/a&gt; of the term Information was updated by user Healis with the quoted text above on the 13th of June 2014&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
