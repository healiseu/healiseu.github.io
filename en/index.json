[{"authors":["admin"],"categories":null,"content":"Dr. Athanassios I. Hatzis is a seasoned IT professional, showcasing a blend of technical expertise, proficiency in software engineering, and strong leadership. His project management skills, particularly highlighted as an IT Work Package Manager in EC FP7, are complemented by a rich background in research and academia. With over two decades of experience in the IT sector, Athanassios has demonstrated a strategic mindset, adept at making trade-off decisions considering desirability, viability, and technical feasibility.\nServing as the software architect at major USA marathon events, Athanassios has showcased his ability to manage and execute agile development work effectively. He has been instrumental in establishing, deploying, and securely operating back-end systems and services across their full software life cycle. His strategic planning and resource allocation have been key in ensuring the smooth operation of these events, demonstrating proactive problem-solving in both technical and managerial aspects. During his tenure as Health Informatics Manager at Evangelismos General Hospital, Athanassios effectively managed facilities and IT infrastructure implementing electronic medical records and cutting-edge clinical information systems. He developed strategies and organised work activities, demonstrating his strong organizational and managerial skills. His commitment to network and database security policy ensured the protection of sensitive medical information.\nA pioneer in innovative technologies for the semantic web within startup ventures, Athanassios\u0026rsquo;s dedication to fostering creative and collaborative thinking is evident. His role as a researcher and lecturer is manifested by numerous published papers and presentations at conferences, contributing significantly to the academic discourse in health informatics and speech technology.\nBeyond technical expertise, Athanassios’s social and communication skills are well-developed, with experience in methodical leadership, delegation of responsibilities, and effectively liaising with diverse stakeholders, including speech therapists, medical staff, project managers, development teams, IT support staff, startup members and software vendors. Notably, his communication skills have been enriched by his interactions with students and lecturers in various higher education institutions.\nHis thoughtful decision-making and rigorous adherence to best practices, coupled with his ability to adapt to changing circumstances, consistently result in exceptional execution performance in dynamic and challenging environments.\n","date":1724803200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1724803200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://healis.eu/en/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/en/authors/admin/","section":"authors","summary":"Dr. Athanassios I. Hatzis is a seasoned IT professional, showcasing a blend of technical expertise, proficiency in software engineering, and strong leadership. His project management skills, particularly highlighted as an IT Work Package Manager in EC FP7, are complemented by a rich background in research and academia. With over two decades of experience in the IT sector, Athanassios has demonstrated a strategic mindset, adept at making trade-off decisions considering desirability, viability, and technical feasibility.","tags":null,"title":"Athanassios I. Hatzis, PhD","type":"authors"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"We welcome a modern, innovative way of managing medical information At a Glance Obsidian MEDILIG (Medical Life Guard): An easy-to-use, flexible, secure, cross-platform medical knowledge management system for patient\u0026rsquo;s Electronic Health Record (EHR) that is built on top of Obsidian software application for the design, implementation and use of autonomous, multilingual, clinical documents from primary care to continuing care.\nUser Manual  In English  ","date":1724803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1724803200,"objectID":"79ac91e0934b5a61a951003ffbb129ef","permalink":"https://healis.eu/en/project/obsidian_medilig/","publishdate":"2024-08-28T00:00:00Z","relpermalink":"/en/project/obsidian_medilig/","section":"project","summary":"Free open-source Electronic Health Record application for health professionals and patients that is based on Obsidian","tags":["Health_information_technology","Health_care","Health_information_management","Electronic_health_record","Electronic_medical_record"],"title":"Obsidian MEDILIG","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Table of Contents  Why HyperMorph  Not just another ETL tool Not only a data storage and transformations-analytics tool More promising than data virtualization and cloud analytics services   Speechless HyperMorph Screencast  Hypermorph speaks for itself Now you know that you can \u0026hellip;   Installation - Demo Test - Documentation  Step by step instructions Demo Guide to Test package Documentation   Cross-References   Why HyperMorph Not just another ETL tool There are many open-source tools written in Python for ETL or ELT process, petl, bubbles, mara-pipelines, mara-schema, bonobo, luigi, odo, etlalchemy, mETL, riko, carry, locopy, etlpy, pygrametl. Authors in many of these tools realized that Python developers need a uniform interface based on object oriented abstractions for commonly used operations.\nWell-designed powerful OOP classes HyperMorph offers interactive console programming and development with high-level OOP components tailored to cover all aspects of database management and analytics. HyperMorph is very rich in that aspect and provides DataSet, Table and Field classes for data resources, DataModel, Entity, Attribute classes for data models, SchemaGraph, SchemaNode, SchemaLink, SchemaPipe classes for metadata management, DataGraph, DataNode, DataLink, DataPipe for data management, Connector class for python drivers/clients and at the highest level of management we have ASET (Associative Entity Set is similar to Relation) and HACOL (HyperAtom collection).\nSchema and data as objects and nodes on a hypergraph HyperMorph goes one step ahead of the OOP design principle. It creates objects with 3D numerical vector identities and links them as nodes on a hypergraph. That graph is powered by graph-tool one of the best and fastest network analysis tools in Python. Hypermorph keeps separate schema information, i.e. metadata, from stuctured data (tuples, hierarchical, graph, table, etc). This unique feature offers the possibility to organize easily data resources and to build complex customised data models in order to digest data. Data integration (consolidation) requires to manage successfully the complexity of mapping data resources on a data model something that can be easily done when our objects are hypergraph enabled and have numerical key vectors to identify their exact location in the schema, data graph.\nHyperMorph Connectors Another fundamental difference of HyperMorph with ETL tools is on the Python DB Driver/Adapter side. The current release supports:\n Clickhouse-Driver MySQL-Connector SQLAlchemy with the following three dialects  pymysql clickhouse sqlite    On top of these drivers HyperMorph uses a Connector class to abstract and unify SQL command execution sql() in a functional way and wrap commands to extract metadata get_tables_metadata(), get_columns_metadata(). Transformation to tuples, json rows, tuples, columns, and pyarrow batch/table is taking place at this level. At this stage performance is a critical factor. In our design and implementation of HyperMorph connectors we are seeking to minimise the time delay and data transferring speed. Therefore the protocol of communication that is used in the python database driver/adopter is highly important.\nPipelines This is a standard approach in ETL frameworks and a very useful one because in general pipelines are flexible and intuitive in programming. Hypermorph is not an exception we tried to make a difference here by designing same pipeline operators for fetching either data or metadata. For example there is an over() operator for projection and to_dataframe() for transformation to Python Pandas dataframe. We have even wrapped functional commands on pipelines so that you can choose between OOP (chaining) or functional style of programming.\nNot only a data storage and transformations-analytics tool There is another category of tools related with data storage (in-memory, on-disk), transformations and analytics processing, such as TileDB, datatable, pandas, petl, vaex, pytables, ibis, numpy, dask, pyarrow, gandiva. Usually most of them construct a table data structure in-memory or on-disk and use either a column layout or row layout to process the data. Hence they resemble database engines. In fact previous prototypes of HyperMorph (see TRIADB project) were based on SQL database engines. This time the current, first, release of HyperMorph is powered by PyArrow. There are many reasons for that choice. Most important PyArrow is mature and provides a columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware including GPUs. But regarding HyperMorph the killer feature of PyArrow package is dictionary encoding which is utilized to implement associative filtering, part of our associative semiotic hypergraph technology, in the style of Qlik analytics engine.\nMore promising than data virtualization and cloud analytics services In recent years there is also another approach for data management and analytics aiming to skip the weary ETL process. Usually these are SaaS products on the cloud, such as panoply, dremio, knowi, denodo, and many others. They provide GUIs and act as middleware between DBMS and BI platforms. Naturally these are proprietary products and details on how they work under the hood are hidden. Developers or power users have to stick with menu-widget driven interfaces than having the ultimate flexibility of programming at the level of Python language. You may consider HyperMorph as an open-source API with the same role to fetch data for graph visualisation platforms. HyperMorph has three key differentiating points here data consolidation, user defined data modeling and interactive associative filtering for analytics with the option to visualize connected data on a graph. And because HyperMorph is open-source it is more promising that potentially our technology can be used from many software vendors for BI applications.\nSpeechless HyperMorph Screencast Hypermorph speaks for itself Watch the demo, check youtube settings and make sure video quality is at 1080p HD. You may also set the playback speed at 0.75 to increase the time of executing commands.\n  Now you know that you can \u0026hellip; and the only limit on what you can is your imagination.\nInstallation - Demo Test - Documentation Step by step instructions on how to install release.\nDemo Guide to Test package Demonstration of HyperMorph functionality on data resources and demo scripts that are included in the distribution.\nDocumentation A draft of the documentation from comments in source code is generated automatically with Sphinx and it is hosted at GitHub.\nCross-References  LinkedIn - 26/06/2020 Pulse Article  ","date":1598054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598054400,"objectID":"78c6544fd0bcf7ff5b08b930c1452e63","permalink":"https://healis.eu/en/project/hypermorph/","publishdate":"2020-08-22T00:00:00Z","relpermalink":"/en/project/hypermorph/","section":"project","summary":"Operational Python API for information management and data transformations-analytics on Associative Semiotic Hypergraph Development Framework","tags":["Programming","Software","Python_(programming_language)","Application_programming_interface","Database","Database_management_system"],"title":"HyperMorph","type":"project"},{"authors":null,"categories":null,"content":"","date":1597881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597881600,"objectID":"fca1b5df6e2d85d93c391ba49d81426c","permalink":"https://healis.eu/en/hmorph/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/en/hmorph/","section":"","summary":"","tags":null,"title":"HyperMorph","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":1597536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597536000,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://healis.eu/en/about/","publishdate":"2020-08-16T00:00:00Z","relpermalink":"/en/about/","section":"","summary":"","tags":null,"title":"About","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":1597536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597536000,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"https://healis.eu/en/contact/","publishdate":"2020-08-16T00:00:00Z","relpermalink":"/en/contact/","section":"","summary":"","tags":null,"title":"Contact","type":"widget_page"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Table of Contents  Introduction Two programming paradigm approaches for a NoSQL API Functional operations A glimpse from the future Epilogue Cross-References   Introduction In a decade of investigating NoSQL systems, I noticed a huge effort from many vendors to create SQL compatible APIs. Yes, there is a pretty good reason behind this tendency to walk-the-line as usual. Everybody has learned to program in SQL, everybody knows how to access a DBMS using SQL.\nWell, I guess after 50 years of SQL based DBMS there has to be a better approach to win programmer\u0026rsquo;s acceptance but it seems nobody has managed to achieve such an ambitious goal in scale. Nobody dares to propose something different to be adopted as a better solution and even those few that tried something different, it just comes to my mind the Apache Tinkpop-Gremlin language, GraphQL and Cypher, those brave hearts have not managed to convince the majority of IT users to switch gears to their proposed query environment. Others were more radical in their approach and even imagined a connected semantic web, but when they designed their query language, SPARQL, it looked very similar to SQL, and even its acronym reminds us SQL.\nI can start writing many reasons for why all these approaches have not reached the consensus for the majority of IT technical users. I could also state a number of facts for why the industry and several consortium keep using SQL as their favourite DBMS query language. But with this article I would like you to focus on a very specific point, and with that perhaps I can share a bit of my imagination on how it can be possible to access a DBMS differently, with more flexibility than SQL, without losing the comfort of your programming language, without the hurdles in SQL and most important with earning the interest and respect of developers.\nTwo programming paradigm approaches for a NoSQL API What is SQL ? It\u0026rsquo;s a domain specific language designed specifically to manage data in a relational DBMS, although many proponents of relational theory correctly argue that these DBMS do not follow Codd\u0026rsquo;s relational principles. But that is another important story to tell some other time.\nRecently, in the last decade, graph databases started becoming very popular but interestingly many important vendors stretched SQL language to cover graph traversal and other related operations. Columnar databases another very successful NoSQL type also followed the same tactic regarding to the query language. Therefore, although the data model and the physical layer implementation can vary a lot, SQL attempts to create an artificial unity at the database client level.\nBut again SQL is domain specific, started as data model specific and remains a declarative query language. The main question is what happens at the API side, i.e. at the side of the programming language and that is exactly where all interesting, peculiar things happen. How exactly do you connect to the DBMS server, what is the protocol DBMS driver uses to transfer data, how well objects match with entities and attributes in your DBMS, schema vs object model changes, nullable and partial loading of fields-atrributes, persistence, state, concurrency and caching of objects. For OOP aficionados and others what I briefly described is known as the object-relational impedance mismatch problem, the Vietnam of Computer Science. And do not make a mistake it is still \u0026ldquo;Vietnam\u0026rdquo; out there.\nChainable operators and operands OOP is perhaps the most popular programming paradigm and yet because of the SQL magic spell everything had to be squeezed on a tabular form using one ORM or the other. But during all these years of my personal research and development effort I noticed one specific characteristic of these ORM APIs that is related to the data retrieval approach in use. There are three major trends here, Query-By-Example (QBE) the precursor of GraphQL, Query-By-API (QBA) the precursor of Gremlin and Query-By-Language (QBL) where all the SQL like query languages are categorised, GQL is not an exception. Developer\u0026rsquo;s practical experience showed that certain complex queries, particularly those with joins, were more difficult to represent in QBA and QBE and once more SQL won again this battle. But it is not a surprise that proponents of graph database technology have only partially touched the object-relational impedance mismatch. It requires a deeper architectural design and multi-perspective attitude than only comparing how well nodes of the graph match objects of a class.\nSo, was that a fair battle between QBA and QBL, the answer is no because of the SQL existing dominance in DBMS and the mimicking of SQL join operations. That is where imagination enters the game, imagine that you could use object chainable operations using the fluent interface design method, a.k.a QBA, without the mismatch between the DBMS and OOP, i.e. imagine a loose connection between the DBMS and API, think of API database client more like a bridge to fetch or transfer data. The method of chaining query operators is very promising indeed, it can won a second round of boxing with SQL. I will briefly explain why.\nOOP is based on the concept of objects that can exchange messages and modify their internal state. Therefore that kind of fluent interface is very natural in OOP languages, on the other hand most complex queries can be visualised and processed as a data pipeline. My question to those that design GQL, the next international query language standard, is why you keep following a dead-end declarative approach ? Wouldn\u0026rsquo;t it be more natural and appealing to the users to follow a data pipeline methodology by standardising operands and operations ? There is plenty of hard evidence to verify that this is not an assumption. Recall TinkerPop-Gremlin reference above and in Python there is Pandas, a very popular data analysis library (23621 starts at GitHub).\nFunctional operations Speaking about programming languages, what is the other very competitive paradigm in software development. Arguably it is the functional one and yet the functional requirements for such an API are more obscure. But such an API exists in one of the most powerful functional programming languages of IT industry, Mathematica. See for example how carefully they designed Wolfram language functions on Database-Like Operations on Datasets and Computation with Structured Datasets and how perfectly these fit with many other functions of the same language.\nA glimpse from the future Enough said, software engineering is not a theoretical thing, it is based on practice. I will give you an example. One of the drawbacks of SQL is that you don\u0026rsquo;t have a direct access to manage data dictionary information, this is handled more or less automatically by the DBMS. Gartner recently reported that data quality and data integration tools are incorporating data catalogs. This is certainly a step towards the right direction, you need a query API that is capable to manage both data and metadata using a unified approach.\nConsider the following code snippet in Python:\nThe first command demonstrates fetching metadata using OOP chainable python methods:\nmis.get(221) .fields .over(select=\u0026#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter\u0026#39;) .to_dataframe(index=\u0026#39;dim4, dim3, dim2\u0026#39;) .out() Out[18]: nid cname alias ntype ctype counter dim4 dim3 dim2 1 605 7 227 Duration NA FLD CSV 0 8 228 Start date NA FLD CSV 0 9 229 End date NA FLD CSV 0 10 230 Start station number NA FLD CSV 0 11 231 Start station NA FLD CSV 0 12 232 End station number NA FLD CSV 0 13 233 End station NA FLD CSV 0 14 234 Bike number NA FLD CSV 0 15 235 Member type NA FLD CSV 0 The second command demonstrates fetching metadata using a functional approach:\nmis.get(nid=221, what=\u0026#39;fields\u0026#39;, select=\u0026#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter\u0026#39;, index=\u0026#39;dim4, dim3, dim2\u0026#39;, out=\u0026#39;dataframe\u0026#39;) Out[19]: nid cname alias ntype ctype counter dim4 dim3 dim2 1 605 7 227 Duration NA FLD CSV 0 8 228 Start date NA FLD CSV 0 9 229 End date NA FLD CSV 0 10 230 Start station number NA FLD CSV 0 11 231 Start station NA FLD CSV 0 12 232 End station number NA FLD CSV 0 13 233 End station NA FLD CSV 0 14 234 Bike number NA FLD CSV 0 15 235 Member type NA FLD CSV 0 And the third command demonstrates fetching data using again a functional approach\nmis.get(221, what=\u0026#39;data\u0026#39;, select=\u0026#39;nid, dim4, dim3, dim2, cname, alias, ntype, ctype, counter\u0026#39;, out=\u0026#39;dataframe\u0026#39;, limit=5, offset=1000) Out[20]: 534 2012-04-01 10:29:06 2012-04-01 10:38:00 31113 Columbia Rd \u0026amp; Belmont St NW 31201 15th \u0026amp; P St NW W00663 Member 0 1937 2012-04-01 10:29:07 2012-04-01 11:01:25 31202 14th \u0026amp; R St NW 31621 4th \u0026amp; D St NW / Judiciary Square W00692 Casual 1 470 2012-04-01 10:29:17 2012-04-01 10:37:08 31104 Adams Mill \u0026amp; Columbia Rd NW 31200 Massachusetts Ave \u0026amp; Dupont Circle NW W00020 Member 2 727 2012-04-01 10:29:30 2012-04-01 10:41:38 31103 16th \u0026amp; Harvard St NW 31200 Massachusetts Ave \u0026amp; Dupont Circle NW W00880 Member 3 1144 2012-04-01 10:29:59 2012-04-01 10:49:03 31110 20th St \u0026amp; Florida Ave NW 31236 37th \u0026amp; O St NW / Georgetown University W00681 Casual 4 1698 2012-04-01 10:30:09 2012-04-01 10:58:27 31107 Lamont \u0026amp; Mt Pleasant NW 31610 Eastern Market / 7th \u0026amp; North Carolina Ave SE W01154 Member Epilogue I am sure it is not difficult for those few out there to imagine and even implement a better solution than SQL provided you have the motive and financial backup. In fact as I mentioned in this article that partly exists. But it is certainly far more challenging and difficult to loose the safety of your daily job and/or income for years to imagine and consequently strive to give flesh and bones to a truly NoSQL API that can be more productive, efficient and innovative to work with than what already exists. Keep an eye for the next release of TRIADB project and who knows you might be convinced that this is truly a unique and valuable tool to use.\n Therefore, we need to investigate systems that combine relational algebra and linear algebra in a richer query paradigm, potentially as extensions to SQL. Two “holy grails” should continue to stay on our agenda. First, we must always explore any novel ideas to reduce the impedance mismatch between application development and writing database queries. Second, we must continue to find ways to make database systems less rigid (e.g., flexible schema evolution) without significantly sacrificing their performance 1\n Cross-References  LinkedIn - Published Post    The Seattle Report on Database Research - the report summarizes the discussion and conclusions of the 9th such meeting, held during 9-10 October 2018. It appeared in the December 2019 issue of ACM SIGMOD Record\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1582070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582070400,"objectID":"b98c1b63e839c3126774743093ecd191","permalink":"https://healis.eu/en/post/20200219/","publishdate":"2020-02-19T00:00:00Z","relpermalink":"/en/post/20200219/","section":"post","summary":"Table of Contents  Introduction Two programming paradigm approaches for a NoSQL API Functional operations A glimpse from the future Epilogue Cross-References   Introduction In a decade of investigating NoSQL systems, I noticed a huge effort from many vendors to create SQL compatible APIs. Yes, there is a pretty good reason behind this tendency to walk-the-line as usual. Everybody has learned to program in SQL, everybody knows how to access a DBMS using SQL.","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system","associative_semiotic_hypergraph","Associative_model_of_data","Qlik","Topic_map","Correlation_database","Database_model","OrientDB","Redis","MariaDB","ClickHouse","Python_(programming_language)","InterSystems_Caché","Filter_(higher-order_function)","Serialization","Hypergraph","Computational_semiotics","API"],"title":"50 Years of SQL, can you imagine a truly NoSQL approach ?","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction The new brave age of hyperlinked data Technical questions for hyperlinking data  Physical Layer Logical Layer Conceptual layer By reference vs. by value   Cross-References   Introduction Normally IT people including architects, engineers, scientists and developers are forced to think a particular implementation of an application or a business solution in terms of the query language. Generally speaking most often it is the specific technology and infrastructure behind the scene that dictates how things should be done. Recently the first workshop on web standardization for graph data was held in Berlin, Germany. The title of the workshop \u0026ldquo;Creating Bridges: RDF, Property Graph and SQL\u0026rdquo; indicates that it is technology again, and its vendors, that force a narrow view of how to apply graph networks in data management. Hope they do not seek a solution that temporarily makes everyone happy in business, instead of taking a firm decision to move ahead on a new path that will be proven the right choice over time. That said, I do recognize that there are always compatibility issues with older technology in place but the bridges should serve the scope of a smooth transition from the old age to the new age.\nThe new brave age of hyperlinked data But there is another factor more important than technology, the need to provide a business insight, understanding and/or solution to real world problems with increasing complexity. After all many recognize that this was the driving force behind the NoSQL movement that started ten years ago. Out of the three main technological categories of database products, key-value, document-hierarchical and graph networks, the last one emerged with significant importance for the future of IT business for many reasons that will not be analysed here. Suffice to say that WWW, the most advanced and popular information system, is the biggest graph network of documents and other resources in the history of human mankind. Today we reached the point in time that the maturity of NoSQL movement met the evolution of WWW but the question remains on how exactly these two will be married to serve human needs. A quick and sort answer is by hyperlinking data in the context of information.\nTechnical questions for hyperlinking data Therefore the aim has been set but the competitive database, semantic and web technologies out there makes it too difficult for many to rise above the specifics. That is where a multi-layer perspective is needed to embrace the problem of hyperlinking data.\nDoes this mean users are going to abandon their favorite popular SQL row-based, column-based, document based or existing triple store and property graph databases ? No, not at all but this new technology should integrate them in the large picture which takes on account the following questions as it concerns the hyperlinked graph data network :\nPhysical Layer Although many vendors consider a native graph network storage layer as an advancement in graph databases, this approach has the following drawbacks:\n it results in poor data locality and you may consider this issue independent of horizontal scaling. you are forced to apply too early a graph layout on data especially on record-based data. it is not easy to implement quick and easy data transformations, i.e. the result from a data query in a tabular, columnar, hierarchical or graph network format. All four are needed for different purposes.  So what is the best type of storage engine that serves these specifications ? Would it be better to think in terms of a hybrid architecture ?\nLogical Layer This is where the basic constructs of the technology must be thoroughly specified. Since we are talking about a graph network:\n  What type of nodes and edges we have ?\n  Do you allow key-value properties in nodes and edges ?\n  Does the edge connect only two nodes ?\n  What type of cardinality and linkage, i.e. unidirectional, bidirectional, they have ?\nSpeaking about linkage, both RDF and property graph databases are anchored on appropriate semantic labelling of edges and then storage and retrieval of information at the implementation level are dependent on this labelling.\n  However, have you considered that this extra piece of information, i.e. the label, in most cases can be a meta-data property of the node, e.g. type, category, role, characteristic, etc ?\nFor that reason labelling of edges should be left to the data modeller, business person, purely for conceptualising the business model. Here is perhaps the most critical question.\n  How do you use these constructs to build business data models and what are their semantics ?\n  This leads us inadvertently to the conceptual level.\nConceptual layer I think RDF graphs and labeled property graphs and Topic Map graphs (hardly anyone talks anymore about this standard) and even entity-relationship graph in relational theory have varying types of constructs with big differences in meaning and use. Entities, attributes, properties, data resources, relationships, relations, associations, items, instances and many other concepts make the IT babel at the business, end-user level.\nHere lies a major source of confusion for the newcomer, I used to be one of them, which is the distinction between classes and instances, metadata and data, terminological and assertion components. This distinction as many others in IT semantic world is artificial, nevertheless it plays an extremely important role in programming, in data retrieval and even in inferencing mechanisms.\nIf you think you can handle this distinction easily, I urge you to think again, because in my opinion these two concepts must be clearly separable and at the same time they have to be related like the hand mold and the letter types in typography. On the contrary I do not see this happening in our modern graph technologies, time does not permit to expand this argument but it is entangled with the following important observation.\nBy reference vs. by value Those of us familiar with programming and the internals of computing know that there is another critical, fundamental distinction in data processing. How do you access the datum by reference or by value ?_ This was the moment in time that RDF/OWL framework presented the first signs of derailment. First they came up with the idea of universal resource locator (URL), then the concept was elevated to the universal resource identifier (URI) and the result was the web identity crisis for those old enough to remember the clash with the proponents of Topic Maps data modeling framework. If you ask me, that crisis has not been resolved yet.\nThe main reason behind web identity crisis is the use of namespace addressing, to connect, identify and locate data. The notion of web address has been semantically overloaded because of its textual form. On the contrary internet protocol for addressing and usually primary key mechanism of databases are numerical. Perhaps they thought that this way it would have been easier for developers and machines to do the linkage in the same way they use HTML anchoring. But I guess this is more or less a fallacy of TimBL\u0026rsquo;s linked data network where it was designed primarily for documents (html pages) not record-base (relational) data. The origin of this misconception is Memex and it is continued in our days with the invention of many different encodings, including RDFa, Microdata and JSON-LD with the intention of generating manual or semi-automated linked data in semi-structured, hierarchical forms and html documents.\nGlobal Giant Graph (GGG) or WWW 3.0 will become a reality only if W3C consortium admit that they have to build likewise IP numerical addressing schema for concepts in data models and for hyperlinked data. It is this new protocol that will permit networking at semantic level, it is going to be the same protocol that we are going to use for identification purposes, the same protocol that will make each data element traceable and connectable, the same protocol that will be used in number-crunching computers. Moreover the whole process of constructing hyperlinked data, especially from structured data resources (databases), will be fully automated and hidden in the same way TCP/IP is hidden from internet users.\nEpilogue The reader may realize that I have only touched various parts of the \u0026ldquo;elephant in the room\u0026rdquo;. But those key points that I tried to make digestible rose from my experience with semantic and database technologies and eventually from my long standing personal effort to develop S3DM/R3DM computational semiotics framework. This way I hope that I managed to enlighten a different path not in theory but in practice. And if there is one thing to remind you something from this article and assist you in following this path then let it be granular computing.\nCross-References  LinkedIn - Published Post  ","date":1572393600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572393600,"objectID":"31aee63075b05c821e2fa5adec143986","permalink":"https://healis.eu/en/post/20191030/","publishdate":"2019-10-30T00:00:00Z","relpermalink":"/en/post/20191030/","section":"post","summary":"Table of Contents  Introduction The new brave age of hyperlinked data Technical questions for hyperlinking data  Physical Layer Logical Layer Conceptual layer By reference vs. by value   Cross-References   Introduction Normally IT people including architects, engineers, scientists and developers are forced to think a particular implementation of an application or a business solution in terms of the query language. Generally speaking most often it is the specific technology and infrastructure behind the scene that dictates how things should be done.","tags":["Abstraction_(software_engineering)","Information","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array","Relational_algebra","Granular_computing","Granularity"],"title":"Helicopter view of Graph Networks in DBMS","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":" TRIADB is discontinued, page is maintained here for the history. Visit HyperMorph the successor of this project   Self-Service Data Management \u0026amp; Visual Interactive Analytics Framework This is a public announcement of the second open-source release of TRIADB, codename TRIACLICK. Repository of the project can be found at GitHub.\nYou can use TRIACLICK to manage your disparate data sources, create custom data models with an integrated, whole view of your business and get a business insight by building easily dashboard web applications that work with the associative selection/filtering of Triaclick engine.\nTutorial and Installation Guides Analytic instructions on how to install TRIADB are written on the installation guide. If you decide to go deeper, read the tutorial guide to get into the basics of programming with TRIADB.\nScreen Capture Demo Watch a screencast demonstration of the main features of TRIADB in the current release with a focus on the key aspects highlighted and illustrated in the following section.\n  At A Glance TRIADB is an innovative, multi-perspective development framework written in Python with the scope to assist power BI users and developers to build easily web applications and/or Jupyter notebooks, i.e. reports, that are based on interactive computing and exploratory, visual analysis. It’s main unique and valuable characteristics are:\n Interactive visual exploratory analytics powered by TriaClick associative semiotic hypergraph engine. The technology is based on ClickHouse columnar DBMS and its output can be easily transformed to enable hypergraph traversal, associative selection and cross-filtering with states on coordinated visualizations.   TRIACLICK Animated Chart  Coordinated update of GUI components based on associative selection and filtering    TRIACLICK Hypergraph  Visualization of hypergraph paths based on TRIACLICK associations   User defined business models in the form of a hypergraph. Data modeling plays a central role in TRIADB. Management of meta-data, loading and filtering processes are innately related, associated, with the business model you define.   Business Model Graph  Business model based on Northwind database with Associative Entities in yellow   Interactive programming with high-level OOP components and methods tailored to fit database management and analytics. TRIADB powerful transformations, including list items, tuples and associations enable the user to analyze data quickly and intuitively.   Associative Filtering  Examine visually how the domain set values of attributes are related    Transformation of aggregation  Aggregation in a filtered state and transformation to tuples and bar chart   What problem TRIADB solves and how The project started long time ago from a personal need to integrate an electronic medical record database used in a neurosurgery clinic with several other specialized databases for neurosurgical disorders. Integration, correlation, aggregation and visual exploration will always be the holy grail of business analytics. Associative technology in general is a specific solution that has not been opened to the public until now although it is applied by one of the most successful BI companies for two decades. The implementation of associative semiotic hypergraph engine (TRIACLICK) in TRIADB project opens a path for other competitive, cost effective (not only RAM based), efficient solutions sharing the same principles in data modeling and database management.\nFuture Plans TRIADB is a middleware, one part is closely coupled with the physical layer of the data store engine and the other part is closer to the application layer. Therefore the project can be expanded in two directions, optimization and improvement of associative semiotic hypergraph engine on one hand, efficient and effective transformations and visual exploration on the other hand.\nIn spite of the growing development of TRIADB which requires urgently funding for resources, the critical factor for the success of this project is how exactly it is going to be applied to solve particular users’ problems. This step requires that users become aware of what are the advantages in using TRIADB and what they can achieve.\nCross-References  LinkedIn - 20191025 Pulse Article - TRIADB v0.9  ","date":1571961600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571961600,"objectID":"ad943073ad6bd99994ed8c7b753b5131","permalink":"https://healis.eu/en/post/20191025/","publishdate":"2019-10-25T00:00:00Z","relpermalink":"/en/post/20191025/","section":"post","summary":"Second release of TRIACLICK on ClickHouse and MariaDB DBMS","tags":["Programming","Software","Application_programming_interface","Database","Database_management_system","associative_semiotic_hypergraph","Associative_model_of_data","Database_model","MariaDB","ClickHouse","Python_(programming_language)","Hypergraph"],"title":"TRIACLICK 2nd Release","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Information Conceptual, computational semiotics framework Push forward Cross-References   Introduction In computer science there are many things we take for granted like the fundamental digital representation of anything with 1s and 0s. It\u0026rsquo;s often too easy to forget that when you have dived deep into the virtual realm of a computer the only thing you get is a mere representation of abstract concepts. This is our data and because they live in a machine and its peripherals they always have structure no matter how you interpret them.\nInformation And that kind of human interpretation I will call it information, i.e. you put data in a form, in some perspective, so you can get meaning out of them. In that sense data in a computer does not differ much from printed letters in a book, or paint in a canvas, or stone in a sculpture. From that point of view computer is simply an advanced form of a medium, a sophisticated printing press where 0\u0026rsquo;s and 1\u0026rsquo;s take the place of the movable individual metal letters, i.e. a computerized movable type printing.\nConceptual, computational semiotics framework Once again, it\u0026rsquo;s only structured data you have, our mind is doing all the rest because of the power of semiosis. One can also ask, is there anything in our universe that is unstructured ? Yes there is, concept is unstructured because it is an abstract thing. When you represent the concept, or you realize, materialize it in our realm then you have structure again. A computational model of representation which is semiotic in its nature is R3DM/S3DM. And here is a memorable type of formula that describes fully the semiotic nature of this data model.\n  (R3DM): Representation ↦ Resource + Reference + Referent\n  (S3DM): Semantics ↦ Signifier + Sign + Signified\n  Push forward Nowadays there is already a sufficient and effective solution for data volume and velocity. It\u0026rsquo;s variety and consequently integration that is at stake. In my opinion the key to an efficient and effective solution is to think about the exact form of what atomic fundamental constructs you use and how you build connected higher structures. I think granular computing is an excellent term we can use here. That said, I have experienced for more than a decade a denial of thinking a better data model standard than those we already have (Relational, RDF and Topic Maps) simply because many believe that the wheel is going to be reinvented. But progress is made only when one defies the established nomenclature and challenges them with a better alternative that can be proven in a computational scientific and engineering way.\n Here’s to the crazy ones. The misfits. The rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They’re not fond of rules. And they have no respect for the status quo. You can quote them, disagree with them, glorify or vilify them. About the only thing you can’t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the people who are crazy enough to think they can change the world, are the ones who do 1\n   Cross-References  LinkedIn - Published Post    Steve Jobs, Apple advertisement (Aired 1997)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1561334400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561334400,"objectID":"9123f8cec73f129b0bda5f78635b631d","permalink":"https://healis.eu/en/post/20190624/","publishdate":"2019-06-24T00:00:00Z","relpermalink":"/en/post/20190624/","section":"post","summary":"Table of Contents  Introduction Information Conceptual, computational semiotics framework Push forward Cross-References   Introduction In computer science there are many things we take for granted like the fundamental digital representation of anything with 1s and 0s. It\u0026rsquo;s often too easy to forget that when you have dived deep into the virtual realm of a computer the only thing you get is a mere representation of abstract concepts. This is our data and because they live in a machine and its peripherals they always have structure no matter how you interpret them.","tags":["Abstraction_(software_engineering)","Information","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array","Relational_algebra","Granularity","Granular_computing","Semiosis"],"title":"About data granularity","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Business vs Technological Factors Cross-References   Introduction I was motivated to write this post from an article of Christian Kaul \u0026ldquo;Bridging the Knowledge Gap\u0026rdquo;. He is making questions about how, what is the best way to bridge the knowledge gap between data modeling experts and people from other fields ? But I think an important role that data modeling experts play is exactly that to bridge the gap between pure IT technical people like developers, database administrators, data engineers and people from other fields e.g. domain experts, scientists, business people, etc. A more interesting question in my opinion is how this gap is created. Get prepared because I will answer with more questions:\n Do we all agree that the best way to model data-information is to create a graph ? If yes the next question is how exactly you represent that graph ? As you probably know there are four major competing data models, (relational model - ER, labeled property graph, RDF and Topic Maps), Are you convinced that there can be no other better alternative ? What about the building blocks, for example in RDF you have triples, in relational you have relations (tables) and tuples. Is that all ? Can we make better building blocks to connect data or information ? And last but not least, at a physical layer, and I believe that is exactly where the gap lies between pure data modelers/architects and database engineers/developers, you have row, column, document, native graph structures. Are you totally convinced that the best way to physically implement a graph data-information model is with a native graph structure on permanent storage ?  If you ask me to answer these questions I suggest you read more information about S3DM/R3DM conceptual, computational semiotics framework and the related projects HyperMorph and TRIADB. This is what I have been involved with for the last ten years.\nThe nice thing with social media is that if you deserve to get some good feedback from professionals and experts of the field in a post like this one you might decide to extend it. That\u0026rsquo;s exactly what I did in the following few paragraphs to respond in a better way to comments in my post._\nBusiness vs Technological Factors I believe the resurgence of no-SQL movement (2009), which is highly related to data modeling, started out of the emergent need of companies-users to deal with the velocity, volume, variety and other properties of distributed data resources. That same movement pushed forward our technological boundaries to create better DBMS and BI, web/desktop applications.\nPersonally speaking I joined that movement because of my business need to manage complex medical databases. Another reason was to enrich and manage collectively and efficiently my own data resources, i.e. personal information management. Believe it or not I am still not satisfied from what exists out there and that is why I ended up researching and developing my own solution.\nApparently another critical factor has to do purely with the cost of a solution you apply to a complex data/information management problem. That is also why open-source based systems are becoming more and more popular nowadays. We need bulletproof, open-source tools with strong communities behind to support, develop and test them. Do consider also that in many cases open-source is an escape from the high cost cloud solutions and corresponding vendor-locking mechanisms.\nEventually, somehow, sometime something similar to a Linux OS, will be created for information management at a higher level. Something that will earn the consensus of developers, end users and companies emerging out of practical need for a new data modeling standard, for effective physical layer implementation, highly responsive graphical user interfaces and efficient augmented artificial intelligence tools.\nCross-References  LinkedIn - Published Post  ","date":1560556800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560556800,"objectID":"a236ed28df949059c0a6fff3b5329ea3","permalink":"https://healis.eu/en/post/20190615/","publishdate":"2019-06-15T00:00:00Z","relpermalink":"/en/post/20190615/","section":"post","summary":"Table of Contents  Introduction Business vs Technological Factors Cross-References   Introduction I was motivated to write this post from an article of Christian Kaul \u0026ldquo;Bridging the Knowledge Gap\u0026rdquo;. He is making questions about how, what is the best way to bridge the knowledge gap between data modeling experts and people from other fields ? But I think an important role that data modeling experts play is exactly that to bridge the gap between pure IT technical people like developers, database administrators, data engineers and people from other fields e.","tags":["Abstraction_(software_engineering)","Information","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array","Query_language","Query_by_Example","Relational_algebra"],"title":"Where is the gap in data modeling ?","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":" TRIADB is discontinued, page is maintained here for the history. Visit HyperMorph the successor of this project   Introduction TriaClick is my long standing effort to revitalize Relational and Topic Maps data model. Associative filtering, similar to Qlik associative engine, has been implemented for the first time with a fast columnar DBMS on non-volatile memory and tested with a relatively large file on commodity hardware.\nScreencast Screen Capture Demo of TriaClick, a python library that implements associative, semiotic, hypergraph technology on top of ClickHouse columnar DBMS and MariaDB. We show the execution of commands from two python console applications that are built with TriaClick library. The various operations (methods) of our Chain Query Language (CQL) aim to make the processing pipeline of data integration, exploratory data analysis and visualization easier, faster, intuitive, and more efficient and accurate for the database/data analyst expert. Currently the focus is on management of data resources and data models, associative filtering, hypergraph exploration and aggregations.\n  Performance On my 10 years old Intel i3 core machine, TriaClick takes about a minute to load a 42 x 2.8M Physician records TSV flat file (856MB) on SSD and the average elapsed time for processing user selections, i.e. filters with an exploratory QlikView style, is 3 seconds. Output can be transformed and seen as associations, tuples, and columns with distinct values, frequencies and filtering states. The result set can also be driven to a hypergraph for further exploration.\nCross-References  LinkedIn - 20190211 Pulse Article - TriaClick Demo  ","date":1549843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549843200,"objectID":"f05b411770a544e4a3a3cc9896a8776b","permalink":"https://healis.eu/en/post/20190211/","publishdate":"2019-02-11T00:00:00Z","relpermalink":"/en/post/20190211/","section":"post","summary":"First release of TRIACLICK on ClickHouse and MariaDB DBMS","tags":["Programming","Software","Application_programming_interface","Database","Database_management_system","associative_semiotic_hypergraph","Associative_model_of_data","Database_model","MariaDB","ClickHouse","Python_(programming_language)","Hypergraph"],"title":"TRIACLICK 1st Release","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Table of Contents  At A Glance Architectural Design Architectural Overview (White Paper) Implementations Conference Presentations Key Differentiating Factors Business Strategy Cross-References    TRIADB is discontinued, page is maintained here for the history. Visit HyperMorph the successor of this project   At A Glance TRIADB is an innovative, multi-perspective database framework. It is a Python library that sits on top of suitable NoSQL/SQL data store engines and enables the users to perform easily integration, correlation, aggregation and hypergraph exploration of multiple data resources. TRIADB is founded on the principles of R3DM/S3DM.\nArchitectural Design In terms of the architectural design TRIADB is based on associative, semiotic, hypergraph technology pioneered by Dr. Athanassios I. Hatzis. Foundational principles, theoretical formalization and ontological dimensions of the framework and the data model are dating back to the year 2012. Our technology shares certain similarities with Qlik associative technology, AtomicDB and X10SYS associative technology, Sentences associative data model, Topic Maps data model and correlation database model. The main difference of our technology from other similar associative technologies is that it has a solid theoretical background, a unified data modeling architecture and at the same time it is distinct in its design and implementation.\nArchitectural Overview (White Paper) It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   Implementations There are four TRIADB prototypes implemented:\n TRIADB on OrientDB with Mathematica - 2016 TRIADB on Intersystems Cache with Python - 2017 TRIADB on Redis with Python - 2018 TRIADB on MariaDB and ClickHouse with Python - 2019  In the last open-source release of TRIADB, MariaDB stores data dictionary information and ClickHouse data storage engines are used for processing and querying data. The associative, semiotic, hypergraph engine has a proprietary licence, although the sources are included in the release, and it is given the codename TriaClick.\nConference Presentations  16/11/2017 - Connected Data London Conference 19/06/2017 - European Wolfram Technology Conference in Amsterdam  Key Differentiating Factors The following is a list of technical specifications and features in the design and implementation of TRIADB. This same list is what makes TRIADB a unique and valuable product:\n Multi-Perspective Database Framework: tuples, domain sets, objects, hypergraph, hierarchical Act both as an operational and data warehouse database with a 360 degree view Automatic fixed, primary indexing schema instead of user-defined secondary indexing Manage the references instead of data: relying on reference-based associations and logical identifiers No duplicates: single value instance based on system defined primitive data types Consolidation of multiple data resources and mapping on user-defined data models Management of data resources, data models and metadata Python Chain Query Language (CQL) that avoids namespace and impedance mismatch problem Interactive, free-form, contextual queries  Business Strategy We create strong partnerships with database vendors to implement and fine-tune TRIADB on top of their technology stack and we offer consulting services on how to apply Associative, Semiotic, Hypergraph technology. We are not selling licenses or software, we provide full stack solutions and add-on value for our own clients, or for the clients of the vendor, thus the system we build inherits the scaling, performance, availability and TCO of the vendor.\nOur associative, semiotic, hypergraph technology is open-source. We are seeking for developer\u0026rsquo;s community consensus on the use of it and we strongly believe that our technology will be eventually adapted by major semantic and database technology players in the IT industry.\nCross-References  LinkedIn - 20190211 Pulse Article - TriaClick Demo LinkedIn - 20190319 TriaClick Architectural Overview White Paper LinkedIn - 20191025 Pulse Article - TRIADB v0.9  ","date":1549843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549843200,"objectID":"b9f843d64c5b3d694a8c1fa89f9a2037","permalink":"https://healis.eu/en/project/triadb/","publishdate":"2019-02-11T00:00:00Z","relpermalink":"/en/project/triadb/","section":"project","summary":"Data Management \u0026 Analytics Python API enables users to perform easily integration, correlation, aggregation and hypergraph exploration of multiple data resources","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system","associative_semiotic_hypergraph","Associative_model_of_data","Qlik","Topic_map","Correlation_database","Database_model","OrientDB","Redis","MariaDB","ClickHouse","Python_(programming_language)","InterSystems_Caché","Filter_(higher-order_function)","Serialization","Hypergraph","Computational_semiotics"],"title":"TRIADB","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Table of Contents  Source Code About the project Tests and Demos Cross-References   Source Code The project\u0026rsquo;s source code at GitHub, was originally written and used as a module of TRIADB project.\nAbout the project CacheORM module is an enhanced OOP porting of Intersystems Cache-Python binding. There are three classes implemented:\n  CacheClient This is the super class of CachePython module. It wraps two functions from intersys.pythonbind module pythonbind3.connection() and pythonbind3.database().\n  CacheQuery A subclass of CacheClient that wraps methods and adds extra functionality in intersys.pythonbind.database and intersys.pythonbind.query classes\n  CacheClass A subclass of CacheClient, that wraps methods and adds extra functionality in intersys.pythonbind.database and intersys.pythonbind.object classes\n  The intersys.pythonbind package is a Python C extension that provides Python application with transparent connectivity to the objects stored in the Caché database.\nTests and Demos There are two folders in this release:\n  testCacheORM contains python jupyter notebook files that demonstrate CacheQuery and CacheClass\n  testCacheBinding are tests written for Intersystems Cache python binding\n  One can simply compare tests with demos to appreciate the work in this project to leverage intersystems cache python binding.\nCross-References  LinkedIn - 20180305 Pulse Article - HEALIS: Build valuable relations; establish effective communications  ","date":1532304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532304000,"objectID":"2293e969eee37ec0e92f47951cb2731f","permalink":"https://healis.eu/en/project/cache_python/","publishdate":"2018-07-23T00:00:00Z","relpermalink":"/en/project/cache_python/","section":"project","summary":"CacheORM module is an enhanced OOP porting of Intersystems Cache-Python binding. Three classes are implemented CacheClient, CacheQuery and CacheClass.","tags":["Programming","Software","Python_(programming_language)","InterSystems_Caché","Application_programming_interface","Database","Database_management_system"],"title":"Cache Python ORM","type":"project"},{"authors":null,"categories":null,"content":"By accessing, browsing, or using this Web site, you acknowledge that you have read, understood, and agree to be bound by these terms and to comply with all applicable laws and regulations. If you do not agree to these terms, please do not use this Web site. HEALIS may, without notice to you, at any time revise these Terms of Use and any other information contained in this Web site by updating this posting.\nDisclaimer of Warranty USE OF THIS SITE IS AT YOUR SOLE RISK. ALL MATERIALS, INFORMATION, PRODUCTS, SOFTWARE, PROGRAMS, AND SERVICES ARE PROVIDED \u0026ldquo;AS IS,\u0026rdquo; WITH NO WARRANTIES OR GUARANTEES WHATSOEVER. HEALIS EXPRESSLY DISCLAIMS TO THE FULLEST EXTENT PERMITTED BY LAW ALL EXPRESS, IMPLIED, STATUTORY, AND OTHER WARRANTIES, GUARANTEES, OR REPRESENTATIONS, INCLUDING, WITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY AND INTELLECTUAL PROPERTY RIGHTS. WITHOUT LIMITATION, HEALIS MAKES NO WARRANTY OR GUARANTEE THAT THIS WEB SITE WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR-FREE.\nYOU UNDERSTAND AND AGREE THAT IF YOU DOWNLOAD OR OTHERWISE OBTAIN MATERIALS, INFORMATION, PRODUCTS, SOFTWARE, PROGRAMS, OR SERVICES, YOU DO SO AT YOUR OWN DISCRETION AND RISK AND THAT YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGES THAT MAY RESULT, INCLUDING LOSS OF DATA OR DAMAGE TO YOUR COMPUTER SYSTEM.\nSOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF WARRANTIES, SO THE ABOVE EXCLUSIONS MAY NOT APPLY TO YOU.\nLimitation of Liability IN NO EVENT WILL HEALIS BE LIABLE TO ANY PARTY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY TYPE WHATSOEVER RELATED TO OR ARISING FROM THIS WEB SITE OR ANY USE OF THIS WEB SITE, OR OF ANY SITE OR RESOURCE LINKED TO, REFERENCED, OR ACCESSED THROUGH THIS WEB SITE, OR FOR THE USE OR DOWNLOADING OF, OR ACCESS TO, ANY MATERIALS, INFORMATION, PRODUCTS, OR SERVICES, INCLUDING, WITHOUT LIMITATION, ANY LOST PROFITS, BUSINESS INTERRUPTION, LOST SAVINGS OR LOSS OF PROGRAMS OR OTHER DATA, EVEN IF HEALIS IS EXPRESSLY ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS EXCLUSION AND WAIVER OF LIABILITY APPLIES TO ALL CAUSES OF ACTION, WHETHER BASED ON CONTRACT, WARRANTY, TORT, OR ANY OTHER LEGAL THEORIES.\nAdditional Terms Additional or different terms, conditions, and notices may apply to specific materials, information, products, software, and services offered through this Web site. In the event of any conflict, such additional or different terms, conditions, and notices will prevail over these Terms of Use. Please see the applicable agreement or notice.\n","date":1530144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530144000,"objectID":"2be162d2f72c82932beeafd4d63ea802","permalink":"https://healis.eu/en/terms/","publishdate":"2018-06-28T00:00:00Z","relpermalink":"/en/terms/","section":"","summary":"Here we describe how to add a page to your site.","tags":null,"title":"Terms of Use","type":"page"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Cross-References   Introduction Recently, I have been reading an article for yet another query language, HypergraphQL. But do we really need another query language ? I do agree that it is always good to offer the developer a variety of choices for querying a database, especially if the new query language makes it easier or perhaps better in some sense to fetch or input data. But that\u0026rsquo;s not really a big deal, I will try to explain why in brief here.\nWhether it is a standard based SPARQL, SQL, TMQL, XQuery language, or a more graph oriented query language like GraphQL (former Facebook Query language), Gremlin and Cypher, the end user (developer) has to write down the query in some form according to the formal system of the language. That also implies that you do know your data model in some detail, i.e. structural form of data, instances vs object types, and kind of connections/links. This is essential to describe your query in the language.\nTherefore all Query Languages are dependent on their data model and naturally they also carry the deficiencies of their data model and several quirks of their vendor. So in my opinion that is where all bets are off. Better show me a new data model, describe how it deviates from other established data models, in what terms it is better and most important the functional operations, the basic mechanisms behind the implementation of a query language that is based on this data model.\nSpeaking about HypergraphQL, and former Facebook GraphQL that is not something new. They originate from Freebase MQL language, which according to Barak Michener, a former employer of Metaweb Technologies and later on of Google, it was mainly developed in the period between 2006-2008 to elevate GQL a query language for a kind of triple store database (graphd). And if we decide to search further back MQL approach looks like the Query by Example (QBE) language for relational databases that was devised during the mid-1970s, I still remember Ashton-Tate dBase product that I was playing with as a BSc student.\nBut what really puzzles me is that I hardly see a strong mathematical foundation, e.g. like Codd\u0026rsquo;s relational algebra, that covers important features of all these query languages I mentioned above. I am specifically referring to:\n closed vs open world assumption closure under operations constrains updates joins  That is why in a previous article of mine I have proposed to return back to the roots and investigate better the Relational Algebra and these reasons that made both SQL and NoSQL DBMS to deviate from the original relational model path.\nFor those that follow my posts, they are aware that I am not speaking purely from a theoretical point of view. There is an alternative data model (R3DM/S3DM) that I propose, a particular software technology based on this (Associative Semiotic Hypergraph) and two prototypes (TRIADB, HyperMorph) implemented and demonstrated with an intuitive functional declarative way to query things. Nevertheless performance is a top priority, and that is what I am currently investigating.\nCross-References  LinkedIn - Published Post  ","date":1522713600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522713600,"objectID":"f47f30d919dfbb5d72d74111cb67cb64","permalink":"https://healis.eu/en/post/20180403/","publishdate":"2018-04-03T00:00:00Z","relpermalink":"/en/post/20180403/","section":"post","summary":"Table of Contents  Introduction Cross-References   Introduction Recently, I have been reading an article for yet another query language, HypergraphQL. But do we really need another query language ? I do agree that it is always good to offer the developer a variety of choices for querying a database, especially if the new query language makes it easier or perhaps better in some sense to fetch or input data.","tags":["Abstraction_(software_engineering)","Information","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array","Query_language","Query_by_Example","Relational_algebra"],"title":"Yet another query language, really ?","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Back to the roots Relational model vs Other data models Our perspective Cross-References   Back to the roots Recently, I realized that the associative, semiotic, hypergraph, or in short the R3DM/S3DM, technology framework we propose to be adopted in database management systems can be considered in many ways an extension to Codd\u0026rsquo;s Relational Model. I am aware that this is a big claim and certainly this is not the place or the time to lay down my arguments, suffice it to say how this occurred to me.\nI have partially implemented TRIADB technology twice on top of two different data stores and I noticed that those add and get operations we defined are closely related to Codd\u0026rsquo;s relational algebra operations, while data sets, i.e. domains, and a user defined type system match the sets defined in mathematics and relational theory. Coincidentally Codd\u0026rsquo;s Relational logic goes back to Aristotle and the corner stone of our technology, which is the computational semiotic triangle, goes back to Aristotle too. I will briefly mention that one basic difference is that both the heading set and the body tuples of the Relation, in fact everything, are transformed and uniformly represented with numerical key references. Therefore it can also be called Reference Database Management System (RDBMS). All these are simply good indications. I believe we are on the right track.\nThe truth is, and I will quote Chris Date here, that:\n if you are proposing to replace technology A by technology B first is counted on you to understand technology A and then it is counted on you that there is some problem that technology A does not solve and technology B does solve 1\n And the best person I have found to teach me Relational database technology, so that I can acquire an in-depth understanding, is Chris Date himself. The following video is a clip from an excellent, illuminating workshop that explains Codd\u0026rsquo;s Relational Theory to computer professionals, but most importantly, he shows what a real relational product would be like, and how and why it would be so much better than what’s currently available.\n  Relational model vs Other data models That said, allow me to have my doubts about whether many of the proponents of other database technologies, including those in SQL databases and those in NoSQL databases, have understood what are really the differences with respect to Relational model and at what abstraction level they occur. Again this is not the place or time to elaborate on this. Instead, I am inviting you to ponder on the architectural design of modern database management systems.\nYou see in practice, it is too difficult to make a very clean separation between the physical, logical and conceptual levels of information. From an engineer\u0026rsquo;s point of view it is hard to separate theoretical from practical purposes. Moreover, many of these NoSQL DBMS, that are in fashion nowadays, are suited to solve a particular type of problem and this is why you often hear that big corporations and large companies have many different kinds of DBMS at the back-end. Not to mention that nowadays there is the trend to market many DBMS as multi-model database systems. And that made me also to realize that:\n there has to be a distinction between those problems that one solves at the physical level e.g. physical layout, partition and availability and those that apply more at the logical-conceptual level e.g. integrity and data modeling. Therefore, I foresee that in the future systems will have to use a combination of these two levels that somehow will have to be tuned and made to work harmonically independent of each other2\n Our perspective This is our perspective towards the architectural design of modern database management systems that fully justifies our choice of marketing TRIADB as a middleware. We are focusing to provide an efficient and effective solution at the logical and conceptual level using an existing implementation of the database physical layer. Relational modeling theory applies here too, from what I understand it was the implementation details at the physical level and perhaps other naive simplifications that made many to depart from the original Relational model. So it\u0026rsquo;s time to return back to the roots and make some real progress.\nIn case you, as a reader, have the same feelings and see some truth on my writing, I would be more than happy to discuss with you about the progress we are making with TRIADB and associative, semiotic, hypergraph technology and definitely exchange ideas and share some common thoughts on these database topics. Stay tuned.\nCross-References  LinkedIn - 20180305 Pulse Article - Relational Data Model : Back to the roots    Chris Date - SQL and Relational Theory Master Class - O\u0026rsquo;Reilly Workshop\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Athanassios I. Hatzis, LinkedIn post, March 2018\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1520640000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1520640000,"objectID":"16e30795ac62addbfc5aad61c3fffd5a","permalink":"https://healis.eu/en/post/20180310/","publishdate":"2018-03-10T00:00:00Z","relpermalink":"/en/post/20180310/","section":"post","summary":"Important design and implementation principle arising from studying relational data model theory","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Artificial_intelligence","Type_system","Serialization","Filter_(higher-order_function)","Granularity","Namespace","Data_store","Relational_algebra","Relational_database","Middleware","Relational_model"],"title":"Back to the roots, Relational Data Model","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":null,"content":"Why \u0026ndash;\u0026gt; How \u0026ndash;\u0026gt; What Simon Sinek discovered that all great companies think, act and communicate the exact same way and he illustrated the method with the following infographic.\n\nFor many years I have been working on a personal project that started with research on data modeling and now it reached the level of a database add-on product. And without realizing it, I have just discovered, that I was always working from the inside out but I could not articulate why until now.\nInformation technology is a tool that can be used in many ways, but perhaps the most creative and imaginative aspect, is to view IT as the vehicle for communication. In that case IT covers a basic human need, arguably a need that can be even more important than food. And communication in Greek is ΕΠΙ-ΚΟΙΝΩΝΙΑ, literally meaning, on top of society.\n Man is by nature a political animal 1\n Relations and Communications You can easily see what one can achieve with a computer, but deep behind this behavior is the why part of it. Take internet for example, you can educate yourself, you can learn about something new, you can interact with systems and services, you can be creative. This is definitely a form of communication. But it is more direct when you become a member in a social media site, or in a forum, or in a programming/game community. And the reason behind all these user actions is that we need to communicate. We need customers to serve, we need an audience to perform, we need others to share things, we need to be in a group of people. We are internet citizens, citizens of this world.\nThe question is would you travel around the world without any navigation system ? Same question is true for internet. It is the search engine and the hyperlinks that play partly the role of a map and a compass. But nowadays these are not enough. It\u0026rsquo;s because we have started asking to get meaning, to find value out of our data. We want to understand not only how but why things are interconnected. Therefore we should use technology, the know how, to build meaningful, valuable relationships and lay them down as a foundation to establish effective communication. And in my opinion, and opinion of great inspired leaders you have to think, act and communicate from inside out. It is not the product that defines the need, it is the need that dictates what is the product. This is the right guide in the design and implementation of inter-operable systems, devices and applications.\nWe see things differently In HEALIS this is our philosophy and also our brand strategy to develop great solutions to fully cover your needs and the needs of your customers. A humble start was made with TRIADB. Although TRIADB is not a product for the common end-user, it reflects our way of thinking about information technology in general.\n   Here\u0026rsquo;s to the crazy ones. The misfits. The rebels. The troublemakers. The round pegs in the square holes. The ones who see things differently. They\u0026rsquo;re not fond of rules. And they have no respect for the status quo. You can quote them, disagree with them, glorify or vilify them. About the only thing you can\u0026rsquo;t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the people who are crazy enough to think they can change the world, are the ones who do 2\n We have laid strong foundations, we put the cornerstone at the right place. We made a start and we can see the future of this. If you, want to learn why, we know how and what you will get is the fulfillment of our common goal:\nBuild valuable relations; establish effective communications  Cross-References  LinkedIn - 20180305 Pulse Article - HEALIS: Build valuable relations; establish effective communications    Aristotle\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Steve Jobs, Apple advertisement (Aired 1997)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1520208000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1520208000,"objectID":"84da53d3caeccf59e67f285435edaa24","permalink":"https://healis.eu/en/post/20180305/","publishdate":"2018-03-05T00:00:00Z","relpermalink":"/en/post/20180305/","section":"post","summary":"A post that explains our philosophy and goals behind HEALIS","tags":["Tagline"],"title":"Build valuable relations; establish effective communications","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Video Recording of Speech The following video is from a presentation and demonstration of TRIADB at Connected Data London conference on the 16th of November 2017. The event brings together top class innovators, thought leaders and practitioners in the field of Artificial Intelligence and Semantic Technology.   Unfortunately the light conditions were not ideal for the demonstration of our system. We recommend you visit the links at the right side of the following table to view Pandas notebooks in addition to the video above. You may also start the video at the corresponding time.\n   Time Pandas Notebook     05:00 Traversal and Hypergraph   09:00 Hypernodes, Hyperedges and Tuples   11:45 Hypercollections   13:00 Data Model   15:30 Mapping    Slides of the talk  Screen Captures           The first two images of our collection portray a hypegraph of seven records, two on the left (Parts), three in the center (Catalog Entries) and another two on the right (Suppliers). The main difference is that in the first one nodes are shown with values and in the second one with 2D numerical references. Images are aligned so you can switch back and forth with the left and right arrow keys.\nThe third image shows execution of TRIADB Python commands on a Jupyter notebook. This is a traversal query that fetches the tuples that make the neighbourhood of the two parts that we saw in the first two images.\nIn the fourth image two records are drawn, they have common values for the weight and the name of the part. There is a red (partID=993) and a silver (partID=994) Acme Widget Washer but they do not share a common unit for the weight. This cleansing problem is solved in the fifth image where the two parts share three common values.\nThe sixth image visualizes the bipartite mapping solution. The fields on the left are mapped onto attributes on the right and the pandas 2D frame in the seventh image presents their names and key references.\nFinally the last two images display a hypergraph data model for movies and a movie instance with many participants. Again you can switch back and forth with the left and right arrow keys.\nVideo Screen Capture of TRIADB Screencast of TRIADB on a toy problem dataset with a junction table (Catalog) that bridges the other two tables (Supplier and Part). Videos demonstrate in detail the python client API functional operations of TRIADB system such as add models, add resources and records, get operations to retrieve data and hypergraph traversal operations.\nThere are five videos in this playlist of HEALIS youtube channel. You may start watching the last video of this series to get an overall impression of TRIADB\nPart 1/5 In this recording session we demonstrate the first Jupyter Notebook. We show how to use TRIADB functional commands to reset and rebuild the framework. And we explain a bit the associatve and semiotic architectural design of our framework.   Part 2/5 In this video you will learn how to add a data model, how to search and retrieve information from the data model environment of TRIADB framework and how to visualize your data model.   Part 3/5 In this video we continue with adding resources, mapping these resources to the data model and finally adding records into TRIADB.   Part 4/5 In this video we continue with GET operations on Supplier-Part-Catalog data set and we describe various environments according to S3DM/R3DM data model. These include the Data Types Environment (DTE), Data Values Environment (DVE), Data Resources Environment (DRE), Data Models Environment (DME) and Data Sets Environment (DSE).   Part 5/5 In this video, first we explain the hypergraph visual representation of our data model, then we compare it with relational data model and finally we traverse the hypergraph.   Acknowledgement We would like to thank Intersystems Cache for providing us with a license of Caché DBMS to test TRIADB.\nCross-References  LinkedIn - 20180103 Pulse Article - TRIADB at Connected Data London Youtube - HEALIS Channel Playlist - TRIADB Supplier Part Catalog (SPC) Connected Data London - 2017 Event  ","date":1510790400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1510790400,"objectID":"ef91ec65a8d32c87af743c8e1708a6ec","permalink":"https://healis.eu/en/talk/triadb_connected_data/","publishdate":"2017-11-16T00:00:00Z","relpermalink":"/en/talk/triadb_connected_data/","section":"talk","summary":"TRIADB associative, semiotic, hypergraph technology is an emerging unique and valuable technology in NoSQL database modelling and BI analytics. TRIADB prototype is founded on R3DM/S3DM conceptual model and it was implemented on top of Intersystems Cache database with a command line interface (CLI) in Python (Jupyter - Pandas).","tags":["Programming","Software","Application_programming_interface","Database","Database_management_system","associative_semiotic_hypergraph","Associative_model_of_data","Topic_map","Correlation_database","Database_model","InterSystems_Caché"],"title":"TRIADB at Connected Data London","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Computer_programming","Software_engineering"],"content":"Table of Contents  Introduction Transparent operations A programming language with a built-in database Epilogue Cross-References   Introduction Have you noticed that what ever the model and data structure in databases we cannot escape from the fundamental principle of managing data allocation space with references, i.e. pointer based logic, memory addressing ? Isn\u0026rsquo;t this the fundamental mechanism of programming languages too ? The problem I see with all these modern NoSQL databases, especially graph databases is that they provide a higher level abstraction for the end developer but they hide and lock completely the access to the low level storage and retrieval mechanism including indexes. Even in key-value stores you cannot see or understand the sorting of indexes, you cannot easily reference data values in permanent storage locations.\nTransparent operations Transparency in computer science is a huge issue. The wizards and pioneers of computer hardware and software, have created multiple abstraction layers. They have hidden a lot of detail but at the same time they prevented access to low level mechanisms. And here comes the next generation that is asked to program the machine without understanding what is going on underneath. And even if there is such a desire, from the developer\u0026rsquo;s point of view, the operating system environment, the language and the debugging tools, not to mention the market, do not help us towards this direction. There have been few exceptions and one of them has been MUMPS (Massachusetts General Hospital Utility Multi-Programming System). I found astonishing the fact that M was developed by Neil Pappalardo, Robert Greenes, and Curt Marble during 1966 and 1967. A reputable and established company in operational database market, Intersystems Cache, has taken over, expanded, and continued their effort on our days.\nA programming language with a built-in database Cache ObjectScript does make the difference from many aspects. Here I would like to emphasize its strong characteristic of a built-in database with sub-scripted arrays and multi-dimensional keys similar to the variables used by most programming languages to access main memory. Let me repeat this, you get a programming language with a built-in multi-model database. I think this is a fundamental aspect that software pioneers have been missing when they invented new programming languages or new sql databases. They are missing the innate common characteristic that both databases and programming languages share, which is the pointer, reference based logic. What do you think ?\nEpilogue So I believe it\u0026rsquo;s time to return back and fix this for new generation multi-model databases AND post-modern programming languages too. We have already made a good start and we believe M will make history again in database management and modeling with our Associative Semiotic Hypergraph Engine that will be built on top of Intersystems Cache powerful global data structure and accompanied with a popular and easy to program client API in Python for data analytics.\nCross-References  LinkedIn - 20170910 Article LinkedIn - 20170912 Semantic Web Research Post LinkedIn - 20170912 Database Developers and Architects Group LinkedIn - 20170912 Database \u0026amp; Data Store Professionals ★ NoSQL LinkedIn - 20170912 Database Experts LinkedIn - 20170912 Graph Databases LinkedIn - 20170912 MUMPS and Cache Development Group LinkedIn - 20170912 InterSystem Developer Community Post  ","date":1505001600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505001600,"objectID":"50b4a918f8da3a4a6bf4f1cff12742bc","permalink":"https://healis.eu/en/post/20170910/","publishdate":"2017-09-10T00:00:00Z","relpermalink":"/en/post/20170910/","section":"post","summary":"Have you noticed that what ever the model and data structure in databases we cannot escape from the fundamental principle of managing data allocation space with references, i.e. pointer based logic, memory addressing ?","tags":["Abstraction_(software_engineering)","Information","Pointer_(computer_programming)","Stored-program_computer"],"title":"The wizards of stored computer program and the next generation of programmers","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Comparison with other data model standards  Namespace problem Separate abstraction layers Granularity with AIR units Filtering instead of querying A solid theoretical background   Summarize Cross-References   Introduction Both Topic Maps and RDF/OWL exhibit signs of aging. In my opinion these signs do not indicate maturity levels but on the contrary they signal a re-examination of the data modeling, information representation problem. There is an emergent need to unify and exchange transformations between serialization formats (XML, JSON, etc), (graph) DBMS data model standards and semantic web data models.\nHence this is my speech at European Wolfram Technology Conference 2017 about a new data modeling framework R3DM/S3DM that is implemented on top of OrientDB graph database and coded in Wolfram Mathematica.\n  Comparison with other data model standards These are a few critical points to consider when you compare this data model with Topic Maps and RDF/OWL:\nNamespace problem Both RDF/OWL and Topic Maps are suffering from namespace problems and complexity. In topic maps for example, when you want to define associations, i.e. n-ary relations, relationships you must specify at least type and roles. For example:\nPart(08:pid, \u0026quot;Acme Widget Washer\u0026quot;:pname, white:pcolor )\nBut in this representation you do not have a handle for the association instance and the context of roles has always to be present to assign meaning on values. Things become even more complicate with RDF association (type or instance) where everything has to be broken down in triples with labeled uni-directional edges.\n(Prt1 --pid--\u0026gt; 08, Prt1 --pname--\u0026gt; \u0026quot;Acme Widget Washer\u0026quot;, Prt1 --pcolor--\u0026gt; white}\nThe predicate of RDF triplet is causing more harm than good. Any SPARQL traversal algorithm is heavily dependent on these predicates, and in practice for large collaborative knowledge bases, e.g. Freebase, they used to label both directions to make traversal easier. You may also consider that owl:sameAs adds more complexity in the graph and traversal.\nNow compare these with the simplicity of Entity-Relationship model. The database vocabulary has the header of the association (relation) and the body contains tuples.\ntuple type : (pid, pname, pcolor) tuple instance : (08, \u0026quot;Acme Widget Washer\u0026quot;, white)\nIs there an alternative representation to combine these ? Yes there is, you make a uniform numerical representation of types and instances, of entities and attributes, of data values and data types and you bind everything in a hypergraph space.\ntuple type : 233:0{85:0, 91:0, 34:0} tuple instance : 233:1[85:6, 91:2, 34:9]\nThe vocabulary of relational model (header) permits to have ordered tuples of values (body), the numerical reference vectors of R3DM/S3DM model permits to have unordered tuples and there is a handle that represents each tuple instance. In RDF to represent a tuple you have to break it down into triples where you repeat the subject. And values (objects) must be semantically accompanied by the predicate. Thus R3DM/S3DM associative representation with numerical references is simpler and it proves to be more efficient with indexing too !\nSeparate abstraction layers It is important to separate digital information resources, e.g. web pages, files, folders, audio/video recordings, images, text documents etc from real things e.g. humans, organizations, objects, etc. It is also important to distinguish between a flexible model and its instances. But it is equally or more important to separate any abstract concept from data values (numerical, string, bits, etc). Because the first is the vehicle for human thinking and the second is the way computers are processing data. Therefore this gap has to be bridged somehow. R3DM/S3DM achieves this with an extra abstraction layer where everything is connected with Atomic Information Resource (AIR) units. This AIR unit defines also the level of granularity. Instead of building everything with Topics, you use AIR units.\nGranularity with AIR units But the AIR unit has the advantage that can be indexed easily, it is represented with a numerical vector, an address that can pinpoint the exact location of an Entity-Attribute-Value item. It is similar to an IPv4 address of a machine (e.g. domain, network, server, node/device/machine). My question is the following. If we use such addresses for connecting machines on the internet, why don\u0026rsquo;t we establish a similar standard for connecting data ? An AIR unit is the fundamental powerful construction unit for smart data. It knows its siblings, its parent, its type, its nexus, its associated AIR units (nodes). A tuple of such units can stand on its own, without a header and its completely meaningful because the context has already been defined.\nFiltering instead of querying Thanks to the uniform representation of everything with AIR units that are connected with bidirectional edges there is no need to define a query language but instead you define powerful functional operations that filter and add data in an associative manner in a fully typed environment. R3DM/S3DM supports types for database metadata, data sources, models, entity types, attribute types, items (instances), link types and value types. Again everything is constructed with AIR units. Both bidirectional edges and a full type system that is based on primitives were key features of Metadata Freebase project and then Google\u0026rsquo;s knowledge graph.\nA solid theoretical background R3DM/S3DM data model is founded on the theory of semiosis. There have been attempts to connect RDF/OWL with Aristotle\u0026rsquo;s triangle of reference/meaning but in my opinion they fail to capture the essence of the abstraction mechanism in semiosis which is played by the sign as the vehicle of communication between the signifier and the signified.\nSummarize To summarize the power of R3DM/S3DM is hidden on its Atomic Information Resource units that are fully typed, addressable and can be dereferenced and the formation of n-ary bidirectional associations.\nCross-References  LinkedIn - 20170709 Topic Maps Group Post LinkedIn - 20170709 Semantic Web Research Group Post LinkedIn - 20170709 Article LinkedIn - 20170409 Update about namespace problem  ","date":1499558400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1499558400,"objectID":"ce85ee247767911fe17fbc63f93597f2","permalink":"https://healis.eu/en/post/20170709/","publishdate":"2017-07-09T00:00:00Z","relpermalink":"/en/post/20170709/","section":"post","summary":"Both Topic Maps and RDF/OWL exhibit signs of aging. These signs do not indicate maturity levels but on the contrary they signal a re-examination of the data modeling, information representation problem","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Artificial_intelligence","Type_system","Serialization","Filter_(higher-order_function)","Granularity","Namespace"],"title":"Are our old data model standards out of shape ?","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Abstract Cross-References   Abstract In an awesome review of AI John Launchbury, special assistant to DIRO, DARPA, defined four dimensions of processing information:\n perceiving learning abstracting reasoning    This is not any perspective on AI, it is a perspective from the founders and pioneers of internet. Although there has been significant progress with first and second generation AI systems in reasoning, learning and perceiving, abstraction has not been part of the game. In fact Launchbury could not say much about this in his talk.\nNevertheless he explained clearly where we are heading in the third generation of AI systems. Models and contextual information will play a critical role. But this is a pretty close match with Aristotle’s theory of semiosis. The mechanism of abstraction is related to the ideal world of models and the world of real objects. Those two worlds are bridged by symbols, signs and these create meaning in contextual information. So this is the objective of third generation AI.\nIt is not a coincidence that I have been investigating since 2012 how this triangle of meaning can be applied to the problem of information representation. Recently I have presented officially to the public R3DM/S3DM data modeling framework in European Wolfram Technology Conference. In one of his talks Conrad Wolfram emphasized how important is abstraction to education and learning. But so far this mechanism of abstraction has not been computable. This is what we anticipate to see in the near future.\nThe mechanism of abstraction can unify these other three processes of perception-interpretation, learning, and reasoning. And it can also interconnect every thing on the internet, every bit of information, in the very same way our computers are interconnected with IP addresses.\nWe are here to build powerful, meaningful relationships easily. This is our mantra after all.\nCross-References  LinkedIn - 23/06/2017 Article  ","date":1498176000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1498176000,"objectID":"1bba02e3cd589651f6192abf7359ab5a","permalink":"https://healis.eu/en/post/20170623/","publishdate":"2017-06-23T00:00:00Z","relpermalink":"/en/post/20170623/","section":"post","summary":"Although there has been significant progress with first and second generation AI systems in reasoning, learning and perceiving, abstraction has not been part of the game. The mechanism of abstraction can unify these other three processes","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Artificial_intelligence"],"title":"The three dimensions of AI and a fourth one as the key to unlock them","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Abstract R3DM/S3DM is a conceptual data model that attempts to unify existing data model standards by elevating n-ary relationships on a hypergraph, a.k.a associations. In this framework semantics are defined and explained with three alternative paradigms (object-oriented, network graph and semiotics). It is the last one that gives birth to its name and this is also the cornerstone of its reference mechanism. R3DM/S3DM redefines RDBMS as a Reference Database Management System with a set of functional operations that match those of SQL statements and are implemented in Wolfram Language.\nBased on these operations we demonstrate interactively using Wolfram Notebook interface how we can create R3DM/S3DM environment on top of OrientDB Graph Database and how we can add a Domain Model or a Data Set. We also present R3DM/S3DM filtering mechanism for traversing and cleansing and we compare and review these command operations in Qlikview graphical user environment.\nThe output of this interactive exploration of data modeling, processing and analysis and any result set can be returned in the form of a table using Wolfram Language constructs such as List(s), Rule(s), Association(s) and Dataset(s). There is also the option of visualizing hypergraphs with the Graph network function and attribute sets as column charts.\nFinally we discuss our future business plan and we share with you our mantra:\n We build powerful meaningful relationships easily\n Recording of the talk   Cross-References  LinkedIn - 09/07/2017 Update about my youtube video presentation  ","date":1497830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497830400,"objectID":"905d6efbdb8a82e102b7519698ae5fed","permalink":"https://healis.eu/en/talk/triadb_wolfram/","publishdate":"2017-06-19T00:00:00Z","relpermalink":"/en/talk/triadb_wolfram/","section":"talk","summary":"A new data modeling framework R3DM/S3DM that is implemented on top of OrientDB graph database and coded in Wolfram Mathematica","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system","associative_semiotic_hypergraph","Associative_model_of_data","Topic_map","Correlation_database","Database_model","OrientDB"],"title":"Associative Semiotic Hypergraph API in Mathematica for Next-Generation BI Systems","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"In the Past A many to many relationship is represented with an associative entity. Experts and non-experts in IT field know that this is one of the most important topics in Entity-Relationship and Relational theory. Seven years ago, when I started my data modeling saga, searching for SQL joins returned numerous results and few of them were on XML data. But I could hardly find any discussion about how a join table is related to the theory of two international data model standards, namely RDF and Topic Maps. A year later, in 2010 W3C started publishing \u0026ldquo;A Direct Mapping of Relational Data to RDF\u0026rdquo;. Coincidentally, back in 2009-2010 the NoSQL movement was born and Graph Databases started becoming a hot topic but nodes and edges were shrouded in disorientation for users of relational databases.\nIn the Present It is 2017 and in my opinion the situation with associative entities has become darn confusing. Edges of a Property Graph data model are bidirectional but RDF links are unidirectional. A bridge-table of an Entity-Relationship schema has links only at the many side, i.e. we have an intersection of two one-to-many relationships. Foreign keys of a bridge table can be conveyed to RDF objects but for integrity and cardinality constrains you have to use OWL. Topic Maps use bidirectional associations with roles, therefore they are closer to the property graph data model. Each data model has a query language SQL, SPARQL, TMQL, Cypher, OrientDB SQL and GraphQL. There are significant differences among them and you have to understand the model in order to process or store efficiently data.\nEpilogue I took a firm decision to clear a bit this info-glut with a series of articles in associative data modeling written with a hands-on practice style:\n Part 1/6 is about Entity-Relationship data model Part 2/6 discusses Topic-Map data model Part 3/6 is focusing on Property Graph data model Part 4/6 is explaining RDF Graph data model and Sentences associative data model Part 5/6 is a demonstration of QlikView associative data model Part 6/6 presents R3DM/S3DM associative semiotic hypergraph data modeling perspective  Cross-References  LinkedIn Semantic Web Group LinkedIn Graph Databases Group LinkedIn Data Scientists Group LinkedIn Data Warehouse \u0026amp; Business Intelligence Architects Group LinkedIn Database \u0026amp; Data Store Professionals Group LinkedIn Semantic Web Research Group LinkedIn Database Experts Group  ","date":1492646400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1492646400,"objectID":"5098e3d7031b514221ec53aacb163c1c","permalink":"https://healis.eu/en/post/20170420/","publishdate":"2017-04-20T00:00:00Z","relpermalink":"/en/post/20170420/","section":"post","summary":"Associative entities are represented differently in various data models","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Entity–relationship_model","Serialization","Relational_model","Association_(object-oriented_programming)","Associative_array","Relational_database"],"title":"Many-to-Many Relationships","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Abstract Introduction  R3DM Definition   Architecture Overview  Conceptual Perspective Logical Perspective Instances Perspective Semantic Perspective   Environment Type Systems  Database Type System (DBS) Model Type System (MTS) Entity Type System (ETS) Attribute Type System (ATS) Items Type System (ITS) Value Type System (VTS) Data Sources Type System (DSS) Link Type System (LTS)   Functional Operations  Get Anything Add anything   Filtering  Case1: Condition and Sorting Order Case2: Condition and Cleansing Case3: Graph Traversal   Summary Epilogue The End Cross-References   Abstract In this last post for this series Associative Semiotic Hypergraph technology is introduced to the public with a demonstration of a fully functional prototype that is built in OrientDB multi-model DBMS and coded with Wolfram Language. This is the first working prototype that is based on R3DM/S3DM conceptual, computational semiotics framework, the theoretical framework behind our technology.\nIntroduction It is remarkable how we turned an electronic device that is processing only 1s and 0s to an inseparable intelligent companion and trustworthy assistant. There is a long historical record of technological achievements in the development of computable information and the interactive engagement of the user. In every step of our technological progress we made systems with better performance, pushing towards a simpler, extensible, modifiable, scalable and generic logic. And the key behind this imaginative use of computers is the captivating abstract thinking process of the human brain. R3DM/S3DM conceptual and logical framework is an attempt to model databases with the very same intimate mechanism that creates models. In this endeavor, there could not be a better theory as the base of R3DM/S3DM other than Aristotle\u0026rsquo;s Semiosis. Semiotics is the study of meaning-making and it binds semantics with symbolic representation and transformation which is the bread and butter of computer programs and digital storage. R3DM/S3DM is not only conceived along this theory, it is also founded on those semiotic principles.\nR3DM Definition  R3DM - Representation(Resource, Realization) or S3DM - Sign(Signified, Signifier) is a computational semiotic framework with a mathematical morphism that formalizes the architectural design of associative hypergraph databases.1\n Following this definition we will unfold R3DM/S3DM and explain its main characteristics starting with the classic three layered database architecture.\nArchitecture Overview One of the main purposes of Zachman\u0026rsquo;s conceptual, logical, and physical database design, is to provide data independence at the application-user level. The three layers are in descending levels of abstraction where the conceptual model is the most abstract and the physical data model the least abstract or most concrete.\nThe conceptual model usually refers to the domain of discourse and describes the semantics of the application without any reference to the database technology. On the contrary, the logical data model implements the concept model in terms of abstract data types, (e.g. List, Set, Map, Graph). In the following list you can see the correspondence between these two layers for five popular data models.\n  Conceptual Schema\n Predicates, Entities and Relationships, Topics, Associations and Occurences, Subjects, Objects and Predicates, Classes and Properties    Logical Structure\n n-ary Relation, Tuples and Attributes, Table, Rows and Columns, Hyperedges, Hypernodes, Nodes, Edges and Properties Objects    Both conceptual and logical layers should act independently of the underlying database engine, i.e. physical data model. The following is an indicative list of what is normally included in this layer.\n Physical Data Storage Organization  Data orientation (rows/columns, correlational), Data structure, Object storage, Block storage, Data cluster, Database index, Serialization    Conceptual Perspective Regarding to the conceptual data model R3DM/S3DM is using terms that are well-known among database experts, i.e. Entities and Attributes. In Code.1 segment we can view instances of Supplier, Part and Catalog Entities and the Attributes that describe them. Remember that in R3DM/S3DM Entities and Attributes play the role of abstract concepts that we associate to create models of our data, they are NOT containers or instances of data.\n  Entity is something that has a discrete, independent existence,\n e.g. Eiffel Tower (Building), Apple Inc (Company), Porsche 993 GT2 with a specific VIN (Car)    Attribute is a piece of information that describes an Entity\n e.g. (referring to the above Entities) 300m (Height), US$215.639 (Revenue), WP0ZZZ99ZTS392124 (VIN)    Association represents:\n An N-ary relation of an Entity with its Attributes (see Code.1)   e.g. Part{ID, Description, Color, Weight} e.g. Part998 {998, \u0026ldquo;Fire Hydrant Cap\u0026rdquo;, \u0026ldquo;Red\u0026rdquo;, 7.2}  An N-ary relationship between one or more Entities, sharing one or more common Attributes, that is defined by the roles they play in the association (see Code.1)   e.g. Film {StarringActor1, StarringActor2, Director} e.g. FilmID { ActorID1, ActorID2, DirectorID }    Code.1 - Result sets from SQL queries on Supplier, Part and Catalog tables. The same result sets are drawn in Fig.1 with a hypergraph and in Code.2 segment they are assimilated with AIR units in Associations\nView Code.1  Logical Perspective Changing now our perspective with a focus on the logical building blocks, R3DM/S3DM can be viewed as a hypergraph, Fig.1, comprised of three data structures hyperatoms (hypernodes), hyperbonds (hyperedges), and hyperlinks (edges).\n  A hyperbond represents graphically a complex data structure (e.g. tuple, JSON object). The role of hyperbond is to connect a set of hyperatoms in order to form associations\n  A hyperatom represents graphically an atomic data item (e.g. record value, a key-value pair of a JSON object).\n  A hyperlink graphically speaking is a Graph Edge that connects bidirectionally a hyperatom to hyperbond\n    SPC Hypergraph  A hypergraph of Supplier Part Catalog for Part No. 998 with its four Catalog entries and its four Suppliers. Hyperedges are in green and hyperatoms are in red   Instances Perspective Entity or Attribute in R3DM/S3DM are Types and represent uniquely a single Set of Instances also known as items (see also Items Type System). Entities or Attributes can be thought as references to Collections, Fig.2.\n  Domain Abstractions and Specializations  Fig. 2 - Meta Level and Domain Level, i.e. Domain Abstractions and Specializations are abstract types, e.g. a Person, a Credit Card, an Item and refer to the Instance Level. The Instance Level includes domain particular instances, e.g. Tom the person, his Credit Card with No: XXXX, an Item ZZZZ that he purchased     A Collection (set of instances) is a generic container for items with no duplicates. A Collection can have one or more representative concepts (Entities or Attributes). We have two types of collection, Datum Collection and Nexus Collection.\n  A Datum Item (datum) can be thought as an instance of a particular Attribute type that points to a single atomic piece of data (atomic value). A Datum Collection contains Datum Items (data). In our hypergraph perspective Datum Items are represented with hyperatoms.\n  A Nexus Item (nexus) can be thought as an instance of a particular Entity type with a role of associating, binding together, Datum Items. A Nexus Collection is a type of collection which holds Nexus items (nexuses). The graphic equivalent of Nexus Items is the hyperbond.\n  Ponder for a moment here, it is a common ground to consider a type, i.e. class, as a container of its instances. But that is not the case in R3DM/S3DM where abstract concepts (types) have an independent existence and refer to collections, i.e. the containers of instances.\nThis separation between containers of items (instances) and abstract concepts (types) is extremely important as it decouples the data modeling layer from the data collections that are ingested into the database Semantic Perspective Data, e.g. names, codes, quantities, time, location, categorical are meaningless without context. They are separated, isolated bits of information with no related context. Data inherits more meaning when the data are processed within a context. This is exactly the purpose of semantic data modeling, a data modeling technique to define the meaning of data within the context of its interrelationships with other data. Semantic models can be either fact oriented, e.g. RDF triples, or object oriented e.g. Entities and Relationships. The disadvantage of the second is that you have to manage dissimilar 2D structures (tables) that are dependent of a fixed database schema and not connected or related directly. The drawbacks of the first are the labeled edges, the modeling of n-ary relations, the inseparable mixture of plain and typed literal triples that represent values with RDF links that represent resources, the Semantic Web Identity Crisis to name a few. R3DM/S3DM assimilates both fact and object-oriented views by defining an atomic information reference unit which is based on semiotics. Naturally, with this solution we escape from many of the above problems. This is one of the most innovative aspects of this framework.\nObject-Oriented View The most commercially successful semantic model is Entity-Relationship data model. In the first post of this series we discussed the conceptual data model that Chen is using to represent the tuples of relational data model. Fig. 2 and Fig. 3 shows that Chen is using either Entity Set, Attributes and Value Sets or Entity Set(s), Relationship Set(s), Attributes and Value Sets to form an Association. The key point here is that Entity set and Attributes in both cases are separated from the Value sets. Indeed, this is the design principle that is followed in any modern relational DBMS. There is a data dictionary, also known as a metadata repository or metadata registry, that stores among other things names and descriptions of Entity Sets, Relationships and their Attributes that construct a database schema.\nSemantically speaking, the database schema and its metadata describe the meaning of its instances, i.e. Entity relations, Entity relationships and Attribute Value sets. For this purpose, in the current OrientDB implementation of R3DM/S3DM each one of these sets is defined explicitly and is represented with an OrientDB Class. There is another reason we keep separate the actual data values. R3DM/S3DM uses a single instance value-based storage. Each unique value in the raw data is stored only once. With this feature there is some resemblance with the data model of Correlation Database.\nNetwork Graph View While it is helpful to view the higher-level Type System Architecture of R3DM/S3DM through an object-oriented filter, it is important to understand that at a low-level R3DM/S3DM consists of nodes and edges. In particular, the prototype framework we describe in this article is built on top of OrientDB Graph engine with Lightweight Edges and a hypergraph structure, Fig.9.\nIn previous posts of this series we have made a comparison of the Association construct with Relational tuples, Topic Map Association, RDF triplet, Property Graph nodes and edges and Qlik binary coded records. Such semantic models, with the exception of Qlik technology, are fact oriented and semantics are typically expressed by binary or n-ary relations between data elements. In R3DM/S3DM the graph is usually undirected with symmetric and typed binary relations between the hyperbond and the hyperatom.\nThis low-level graph view of the system can be implemented in many ways. For example you can have two constructs, e.g. tables, one for the nodes and another for the edges (see the work of Simon Williams in Sentences database), or you can use a key-value store that saves tuples (Graphd the back store of Freebase) or you can also have a native triple store.\nSemiotic View So far we have seen how we can contextualize data using Association construct. This is the mechanism to assimilate tuples of data. Nevertheless, values in a tuple or literals/resources in a triple are meaningless in isolation. In the first case you need either the head and the type of the relation (table and column names), in the second case you need the label and direction on the edge (Predicate) that connects the Subject and the Object to give meaning in the binary relation. To quote Ron Everett,\n Every table is a silo. Every cell is an atom of data with no awareness of its contexts, or how it fits in to anything beyond its cell. It can be located by external intelligence but on its own it’ s a “dumb” participant in the system - the ultimate disconnected micro - fragment accessible only by knowing the column and the record it exists in.\n and according to him,\n The alternative is to replace the data elements with information at the atomic level of the system. Instead of a data atom in a table, we have an information atom with no table.\n Ron Everett in \u0026ldquo;Introduction to Associative Information Systems - (N) Normal Form\u0026rdquo; {: .small}\nTherefore the trick here is to build Associations, based on a uniform representation of its members and the roles they play, in a similar way to Topic Map Association items. For this purpose we have introduced Atomic Information Resource (AIR) unit in the previous post of this series. Now we will view AIR with more detail and in action. For each AIR unit we maintain a record of information. For simplicity and for demonstration purposes, the AIR unit in the current implementation of R3DM/S3DM is equivalent to OrientDB Record ID (RID).\nFor example the Supplier result set in Code.1 is transformed to an associative set and each cell of Supplier table is represented with an RID (Code.2 - Get Supplier Associative Set). Columns of Part table, e.g. pid (Code.1), and any of its values are also represented with RIDs (Code.2 - Get Datum where Parts.pid=998). The single Part tuple where pid=998, (Code.1) is considered to be an instance of a Entity and has an RID too (Code.2 - Get tuples that this Datum is part of).\nThis way AIR information representation serves two principal functions; information resource identification and location addressing, i.e. dereferencing and retrieval. Code.2 - Associative sets are presented with values or in RID (reference key) format. The equivalent result sets are drawn in the hypergraph of Fig.1 and fetched with SQL in (Code.1) segment. The document record in OrientDB with RID #60:7 is an instance of prtID Attribute collection. We can read the Datum value, find which Attribute collection (class) it belongs to, and get its siblings, i.e. other Datum items of the class. In the same Datum record we can see its row context associates, i.e. Nexus Items. These are the five tuples it participates, one Part relation (#52:7) and four Catalog relationships (#53:7, #53:11, #53:12, #53:16).\nView Code.2 Frame  There are two steps towards this transformation of tuples. First we create a value type system, i.e. a place where we store atomic values based on their type. And second we apply a uniform representation on everything, i.e. data and metadata. This turns our DBMS to a Reference Database Management System (RDBMS), i.e. redefining this way the acronym of Relational Database Management Systems. Remember that deep down to an atomic level we store single instance values. It is only the reference keys to those values that we manage. This enables a cellular granularity on R3DM/S3DM. Metadata with a high granularity allows for deeper, more detailed, and more structured information and enables greater levels of technical manipulation.\nThis uniform Representation and management of abstract information Resources (Models, Data Sources, Metadata) with AIR units in R3DM is the Realization of the fact that underneath there is a separate storage layer of single instance data values. {: .btn .btn\u0026ndash;info}\nS3DM framework is based on the powerful theory of the semiotic triangle also known as the triangle of meaning or the triangle of reference. We use key references (Signs-Symbols), to represent abstract things (Signified Concepts) in our mind. We encode these into data containers, i.e. forms that the sign takes, for the storage of data values (Signifiers), Fig.3. {: .btn .btn\u0026ndash;success}\n    Fig. 3 - R3DM/S3DM Triangle of Meaning, Semiotic Triangle, Triangle of Reference   This trilateral principle permits a uniform treatment of semantics, syntax, storage and structure of information based on symbolic representation. The very same principle is applied to the architectural design of R3DM/S3DM type system. {: .btn .btn\u0026ndash;info}\nEnvironment Type Systems In the previous section we have seen that R3DM/S3DM can be seen from many perspectives. At a lower level we have a network graph of nodes and edges. In OrientDB graph model these are instances of the \u0026ldquo;V\u0026rdquo; (for Vertex) and \u0026ldquo;E\u0026rdquo; (for Edges) classes. At a higher level, based on those two classes, we build a hierarchically organized namespace in OrientDB paginated local storage (plocal). This is the database Environment, the highest organizational structure, a logical container that it may represent a business environment, a user environment, even a programming environment. Its role is to group related classes into eight type systems. Seven of them manage vertices and one of them is for the different types of edges, Fig.4. The process of initializing and defining the structures in OrientDB database is fully automated by reading the schema of the type system from a JSON file, Fig.5.\n    Fig. 4 (Left)- Information about R3DM/S3DM hierarchical type system stored in DBRegistry subsystem       Fig. 5 (Right) - Schema of R3DM/S3DM hierarchical type system in a JSON format. For simplicity, in the current implementation Items Type System (ITS) is not present. Entity Type System (ETS) and Attribute Type System (ATS) OrientDB classes compose this missing system   Our DBAPI project in Wolfram Language has been extended to cover all R3DM/S3DM functionality. For example, an Environment is added with OR3addEnvironment command, (Code.3), and we retrieve any metadata about it with the OR3getAnything command (Code.4).\nOR3addEnvironment[\u0026#34;F:\\tmp\\R3DM_TypeSystem.json\u0026#34;,\u0026#34;R3DB\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;123\u0026#34;] Code.3 - We pass the schema file (JSON), the name of the database (R3DB), the username and the password. Metadata for the newly created classes are stored in the DBRegistry subsystem Fig.4.\nCode.4 - Retrieval of Environment System Types with OR3getAnything command. By default it is returning a List of references (RIDs) unless we specify a specific format for the structure e.g. Dataset.\nView Code.4  Database Type System (DBS) Classes that start with the letters DB such as DBLog, DBUser, DBOperation, and DBUserRole are used to store the user Environment metadata useful for administrative, security, and monitoring purposes (Code.5).\nCode.5 - Retrieval of Primitive Database Types with OR3getAnything command as a List of references or as as Dataset.\nView Code.5  We have already seen the DBRegistry subsystem where information about the schema of Environment is stored, Fig.4. Another class DBObject is used for casting multi-type role playing at a node (Object is an instance of a Type).\nModel Type System (MTS) Next we will examine how we can add a new domain model in the system. Usually at this stage the database expert draws the entity-relationship diagram of the model which is a graph of Entities, Attributes and relationships. In Fig.6 we present a similar diagram for our Supplier-Part-Catalog data set and in Fig.9 we have drawn the same diagram in OrientDB Graph Editor. The main difference with ER diagrams is that relationships/relations here have a direct representation on the system with the edges (R3DM/S3DM links) and dictionary metadata are explicitly defined and stored in MTS.\n    Fig. 6 - The schema diagram of SupplierPartCatalog Model (red). Entities (blue boxes) and Attributes (green ovals) are written with their full names (blue) and short names (purple) that take positions outside each shape. Entity boxes inside carry their type (red) and their super-type (blue). While inside each Attribute oval super-type (black) and value type (red) is written. We can also see two types of links. LTS_EA (blue) connects Entities with Attributes and LTS_WP (brown) is linking the model with its Entities.   We have serialized the domain model graph of Fig.6 in the same manner as the schema of the type system and the task of loading and building the model is simplified again with the following single function call (Code.6).\nOR3addDomainModel[\u0026#34;F:\\tmp\\SPCModel.json\u0026#34;] Code.6 - The only parameter required in OR3addDomainModel is the schema definition file of the model. This function call will instruct OrientDB to create classes for all Entities and Attributes of the Model. All the metadata from the schema, Fig.6, will be stored in MTS and will be available for retrieval with OR3getAnything command.\nUsing the powerful OR3getAnything function in the context of DBAPIOrientR3S3 package we can retrieve metadata, Fig.6, for any Model, Entity or Attribute. The result set can be in the form of Wolfram Language Dataset, List, or Graph data structures (Code.7).\nCode.7 - Three examples of the OR3getAnything function where we retrieve OrientDB records for Models, Entities and Attributes respectively. The function call is translated to OrientDB RESTful API command and the JSON response from the DBMS is transformed to Wolfram Language data structures for further processing and visualization. It worths noticing the hypergraph representation which is the equivalent graphical form of Model\u0026rsquo;s schema diagram in Fig.6.\nView Code.7  To maintain compatibility and interoperability with ontologies and other vocabularies for structured data on the Internet such as schema.org we categorize Entities and Attributes of any Model according to OrientDB classes that typically form the hierarchical structure of Entity Type System and Attribute Type System.\nEntity Type System (ETS) Entity Types usually refer to abstract entity types. They are used to create schema templates for popular entity types. Metadata are kept in DB_Registry and as usual they can be retrieved with OR3getAnything command (Code.8).\nCode.8 - Retrieval of Entity Types with OR3getAnything command from DB_Registry. For each Entity Type we can view its type and its super-type as well as the name and shortname that can be accessed.\nView Code.8  As an example consider the schema diagram of Fig.6 where we have three entity sub types, ORGANIZATION, PRODUCT and DATACATALOGUE where we classify the Supplier, Product and Catalogue entity collections respectively (see Code.7, Get Entities section).\nAttribute Type System (ATS) Similarly, Attribute Types refer to abstract attribute types. Each attribute can participate in one or more Entity Types and that is how schema templates are formed. In our Supplier-Product-Catalogue data model, Fig.6, attributes can be classified as CATEGORICAL (Supplier_status, Part_color, Part_unit, Catalog_check), IDENTITY (Supplier_id, Part_id), NAME (Part_nameEN, Supplier_nameEN, Supplier_city, Supplier_country), QUANTITY (Part_weight, Catalog_price), COUNT (Catalog_total), TIME (Catalog_date) and DESCRIPTION (Supplier_address). The following OR3getAnything command demonstrates how we can draw metadata about this type system (Code.9).\nCode.9 - Retrieval of Attribute Types with OR3getAnything command from DB_Registry. For each Attribute Type we can view its type and its super-type as well as the name and shortname that can be accessed.\nView Code.9  Each of these attribute classes above (see Code.7, Get Attributes section) refers to an attribute collection of data items that has a value type. For example, Supplier_status, Part_id, Catalog_total, Supplier_id are of value type INT (integer) and Part_weight is of value type REA (real).\nItems Type System (ITS) This is the system of items collections, i.e. where Entity and Attribute reference instances are stored (see Instances Perspective). In our demo these are represented with OrientDB classes, Fig.7.\n    Fig. 7 - Two Select SQL queries with OrientDB Studio manager. The first one returns four Entity records and the second one returns four Attribute records. Each Entity and Attribute record is represented with an item from a collection. These items in turn are represented with a reference key which is OrientDB @rid   For simplicity\u0026rsquo;s sake we have not constructed ITS separately but we used OrientDB classes instead to populate them with instances of Entity and Attribute types. Nevertheless the idea is the same, segregate the abstract concepts, TYPES, from the domain particular INSTANCES.\nValue Type System (VTS) According to our Semiotic View (Fig.3) key REFERENCES (RIDs) represent RESOURCES from DBS, MTS, ETS, ATS, ITS, LTS, DSS and encoded form of data, i.e. REALIZATION of data values. These values have domains that are based on OrientDB primitive data types, e.g. Integer, Double, DateTime, String and types that are defined in the Value Type System (VTS), Code.10.\nCode.10 - Retrieval of Value Types with OR3getAnything command from DB_Registry. For each Attribute Type we can view its RID, type, super-type, name, shortname and the OrientDB data type that is based on.\nView Code.10  Data values are stored together in ordered sets based on Value Types, e.g. all integers in one set (VTS_Integer), identifiers in another (VTS_Encoded), and so on. This optimizes the access and management of values. Each Item Collection is a subset of values, i.e. a subset of a value set, Fig.8.\n  Figure 8:   Fig.8 - A subset of the VTS_Integer value set. This record set is obtained with OrientDB SQL select command. Each one of these records is pointed from a datum item of the Supplier_id collection (see Fig.7) using the OrientDB Link type.\nElements of both Value Sets and Item Collections are unique, i.e. a single instance of each one. In OrientDB this is implemented by setting SB-Tree index with UNIQUE keys in both Value set and Item Collection.\nData Sources Type System (DSS) Yet there is another type system in R3DM/S3DM framework that is reserved for the input of data sets, the Data Sources Type System (DSS). A Data Set is considered to be a number of related collections that usually correspond to the contents of flat files or database tables. During the process of adding a Data Setwe do not store the values but only the structure and properties, Code.11.\nCode.11 - Demonstration of the OR3addDataSet command with three parameters, the name of the new DataSet that will be created, the working path and the filenames of the flat files to inspect. This function call will instruct OrientDB to create a new class to store information about the structure of these flat files. These metadata will be available for retrieval with OR3getAnything command (Code.12).\nView Code.11  Code.12 - Retrieval of a DataSet structure, e.g. name, shortname, type, supertype, path, table names, table types, column names, etc, with OR3getAnything command from DSS system.\nView Code.12  Link Type System (LTS) Last but not least the aforementioned symmetric and typed binary relation is a bidirectional link, i.e. hyperlink, that is used to connect a hyperatom to a hyperbond to form Associations. We have two kinds of hyperlinks, directed and undirected. Directed links are used to form directed associations of a specific type, e.g. Entity-Attribute, Whole-Part, Type-Instance Fig.9. Depending on which direction we traverse the link, outgoing or incoming we have two different labels to assist us in reading and understanding the semantics of the binary relation. In all cases metadata about the Link Type System (LTS) are currently stored in DB_Registry and as usual we can retrieve link types with OR3getAnything command, Code.13.\nCode.13 - Retrieval of Link Types with OR3getAnything command from DB_Registry. For each ASSOCIATION type we can view its supertype, name, short name, and the labels for outgoing or incoming traversal direction.\nView Code.13    Figure 9:  Fig.9 - Schema diagram of Supplier-Part-Catalog model in OrientDB Graph Editor. Red edges connect Entities to Attributes and green edge connect the Model to Entities. We can also view the type of R3DM/S3DM link in LTS system as a label on the edge   Functional Operations The OrientR3S3 Package extends OrientDB RESTful API package in Mathematica with a powerful functional set of commands that cover all operations in R3DM/S3DM. These operations fall in four categories, get, update, delete, add (GUDA). The main idea here is to define standard named optional arguments for any of these functional categories and then allow their values, default or mandatory, to be given using Wolfram Language transformation rules. We have already started viewing examples of this functional approach to data management with the OR3getAnything command, Code.2, Code.4, Code.5, Code.7, Code.8, Code.9, Code.10, Code.12, Code.13.\nGet Anything By varying the named optional arguments we pass to OR3getAnything public function of the OrientR3S3 Package, Code.14, we can retrieve or search for anything in R3DM/S3DM and we can also ask to return the result in a specified format e.g. Dataset, References, Rules, and Associations.\n(* Search Operations *) OR3getAnything[from-\u0026gt;\u0026#34;25:02\u0026#34;, find-\u0026gt;\u0026#34;SPC\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:01\u0026#34;, find-\u0026gt;\u0026#34;prtName\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:02\u0026#34;, find-\u0026gt;\u0026#34;\u0026#39;Acme Widget Washer\u0026#39;\u0026#34;] (* Type Systems Operations *) OR3getAnything[from-\u0026gt;\u0026#34;25:19\u0026#34;, type-\u0026gt;\u0026#34;SYSTEM\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;, debug-\u0026gt;True, check-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;25:19\u0026#34;, type-\u0026gt;\u0026#34;PRIMITIVE\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;, debug-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;25:19\u0026#34;, type-\u0026gt;\u0026#34;ASSOCIATION\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:19\u0026#34;, type-\u0026gt;\u0026#34;VALUE\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:02\u0026#34;, type-\u0026gt;\u0026#34;MODEL\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:02\u0026#34;, type-\u0026gt;\u0026#34;ENTITY\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:02\u0026#34;, type-\u0026gt;\u0026#34;ATTRIBUTE\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:01\u0026#34;, type-\u0026gt;\u0026#34;DATASET\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:01\u0026#34;, type-\u0026gt;\u0026#34;TABLE\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;25:01\u0026#34;, type-\u0026gt;\u0026#34;COLUMN\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;] (* Mapping Operations *) OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Mapping\u0026#34;, return-\u0026gt;\u0026#34;Rules\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Mapping\u0026#34;, return-\u0026gt;\u0026#34;Bigraph\u0026#34;] OR3getAnything[from-\u0026gt;supplierMRules, get-\u0026gt;\u0026#34;Mapping\u0026#34;, return-\u0026gt;\u0026#34;AssociationWithValueTypes\u0026#34;] OR3getAnything[from-\u0026gt;supplierMRules, get-\u0026gt;\u0026#34;Mapping\u0026#34;, return-\u0026gt;\u0026#34;AssociationWithNames\u0026#34;] (* Items Operations *) OR3getAnything[from-\u0026gt;\u0026#34;70:1\u0026#34;, get-\u0026gt;\u0026#34;Fields\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:1\u0026#34;, get-\u0026gt;\u0026#34;Entities\u0026#34;, return-\u0026gt;\u0026#34;Count\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:5\u0026#34;, get-\u0026gt;\u0026#34;Entities\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Attributes\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Model\u0026#34;, return-\u0026gt;\u0026#34;Names\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Attributes\u0026#34;, return-\u0026gt;\u0026#34;RulesWithNames\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Attributes\u0026#34;, return-\u0026gt;\u0026#34;Rules\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;70:2\u0026#34;, get-\u0026gt;\u0026#34;Parts\u0026#34;, return-\u0026gt;\u0026#34;Names\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;70:2\u0026#34;, get-\u0026gt;\u0026#34;Parts\u0026#34;, return-\u0026gt;\u0026#34;Count\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;70:2\u0026#34;, get-\u0026gt;\u0026#34;Parts\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;70:5\u0026#34;, get-\u0026gt;\u0026#34;Whole\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;70:1\u0026#34;, get-\u0026gt;\u0026#34;Parts\u0026#34;, return-\u0026gt;\u0026#34;Rules\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;70:1\u0026#34;, get-\u0026gt;\u0026#34;Parts\u0026#34;, return-\u0026gt;\u0026#34;RulesWithNames\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:3\u0026#34;, get-\u0026gt;\u0026#34;Tuples\u0026#34;, return-\u0026gt;\u0026#34;Count\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:3\u0026#34;, get-\u0026gt;\u0026#34;Tuples\u0026#34;, return-\u0026gt;\u0026#34;Rules\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:3\u0026#34;, get-\u0026gt;\u0026#34;Tuples\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;, values-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Tuples\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;, values-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Tuples\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;, values-\u0026gt;True, filter-\u0026gt;\u0026#34;58:0\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;50:2\u0026#34;, get-\u0026gt;\u0026#34;Tuples\u0026#34;, return-\u0026gt;\u0026#34;FieldsDataset\u0026#34;, values-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;50:3\u0026#34;, get-\u0026gt;\u0026#34;Collections\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;, values-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;50:11\u0026#34;, get-\u0026gt;\u0026#34;DataItems\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;, values-\u0026gt;True] OR3getAnything[from-\u0026gt;\u0026#34;60:7\u0026#34;, get-\u0026gt;\u0026#34;Nexuses\u0026#34;, return-\u0026gt;\u0026#34;Count\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;60:7\u0026#34;, get-\u0026gt;\u0026#34;Nexuses\u0026#34;, return-\u0026gt;\u0026#34;References\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;60:7\u0026#34;, get-\u0026gt;\u0026#34;Nexuses\u0026#34;, return-\u0026gt;\u0026#34;Rules\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;60:7\u0026#34;, get-\u0026gt;\u0026#34;Nexuses\u0026#34;, return-\u0026gt;\u0026#34;Association\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;60:7\u0026#34;, get-\u0026gt;\u0026#34;Nexuses\u0026#34;, return-\u0026gt;\u0026#34;AssociationWithFields\u0026#34;] OR3getAnything[from-\u0026gt;\u0026#34;60:7\u0026#34;, get-\u0026gt;\u0026#34;Nexuses\u0026#34;, return-\u0026gt;\u0026#34;Dataset\u0026#34;] Code.14 - Examples of the OR3getAnything command from OrientR3S3 Wolfram Language package.\nAdd anything We have not reached the development phase of integrating all add operation in an OR3addAnything function of OrientR3S3 Package. Instead of this unified function we have defined many others such as:\n  OR3addEnvironment [ envstruct, envname, usrname, usrpwd ] - Code13\n  OR3addDomainModel [ jsonFileName] - Code6\n  OR3addDataSet [ datasetName, dataSetPath, fileNames] - Code11\nThus, we have seen how we can add an Environment Type System, a Domain Model and a Data Source. The last two and those that follow are repetitive actions in data analytics lifecycle, i.e. data sources import, modeling, mapping, ingestion, [filtering and aggregation][].\n  OR3addMapping [columns, attributes, mappingRules] - Code15\nThis is a problem of matching the Columns of a Table or in general fields of a data set with the Attributes of an Entity in a data model.\nWe can have fields from multiple data sources that are mapped in the same model. The following code section Code15 demonstrates how we perform the mapping of the Columns from the three Tables of a data set that we added in Code12.\n  Code.15 demonstrates the mapping of data fields onto Attributes in three steps. Step1: retrieve metadata from the Data Set and the Model, Step2: specify the mapping rules, Step3: store the mapping.\nView Code.15  Mapping is necessary in order to proceed with the data ingestion. This allows seamless integration of data from multiple data sources on the model we design in R3DM/S3DM. The following three add operations are used in populating Entity, Attribute items collections with reference instances and the Value Type System with data values. Records, i.e. tuples, are assimilated by creating associations (Code16).\nOR3addValue [className, propertyValue, propertyName] - Code16 OR3addNexus [className] - Code16 OR3addEdge [edgeClass, fromItem, toItem] - Code16  Code.16 demonstrates the ingestion of three data sources (TSV files). First we read headers and body from each file in memory. Then we get the mapping of Columns from the stored Dataset onto the Attributes of each Entity and finally we add values, collections items and associations.\nView Code.16  Filtering It should have become apparent that R3DM/S3DM operates in a different way than other database models. Instead of a Data definition language, Data manipulation language or a Query language (SQL, SPARQL) the functional, uniform set of commands that we have seen in the previous section due to the consistent structure of its type systems and the AIR units makes it easier to manipulate data and elements of the database.\nOne of the most characteristic features of R3DM/S3DM is the ability to filter data in a seamless standard way instead of accessing data with a query plan which may vary between database models. {: .btn .btn\u0026ndash;info}\nThis filtering operation is similar to QlikView and we will make a contrast with the same data set and example case we used in the 5th article of this series.\nCase1: Condition and Sorting Order In this case we are looking for the Supplier that has the minimum Catalog Price for a Red Fire Hydrant Cap and we want to retrieve supID, supName, supCity, supCountry, catPrice, catQuantity, prtID, prtName, and prtColor. The following SQL SELECT query and SPARQL query retrieve a result set using the relational or the RDF data model respectively.\nCode.17 - SQL query: sort Catalog prices for a Red Fire Hydrant Cap\nSELECT suppliers.sid, suppliers.sname, suppliers.scountry, catalog.catcost, catalog.catqnt, parts.pid, parts.pname, parts.pcolor FROM suppliers INNER JOIN (parts INNER JOIN [catalog] ON parts.pid = catalog.catpid) ON suppliers.sid = catalog.catsid WHERE (( ( parts.pid ) = 998 )) ORDER BY catalog.catcost; Code.18 - SPARQL query: sort Catalog prices for a Red Fire Hydrant Cap\nSELECT ?sup ?supName ?supCountry ?catPrice ?catQuantity ?prt ?prtName ?prtColor ?cat where { ?prt dc:identifier \u0026#34;998\u0026#34;^^xsd:int . ?prt rdf:label ?prtName . ?prt schema:color ?prtColor . ?cat wd:hasPart ?prt . ?cat schema:cost ?catPrice OPTIONAL {?cat schema:quantity ?catQuantity .} ?cat wd:hasVendor ?sup . ?sup rdf:label ?supName . ?sup schema:country ?supCountry } ORDER BY ASC(?catPrice) Code. 19 - We have coded two solutions for the testing case using our DBAPI OrientR3S3 package. In the first one (see condensed form in Code20) Catalog Tuples are filtered then sorted with a single command ! The first tuple in the resulting set is the one we are looking for. Then we use filtering on Part and Supplier sets to obtain other information. Finally we project and we Join all three tuples deleting any duplicates. In the second solution we start by filtering Catalog collections, then we find the Datum with the minimum Catalog price. Then we filter Catalog, Supplier and Part tuples, we project and join the final tuples.\nView Code.19  Code.20 R3DM/S3DM Filtering. This is the condensed version of Code.19\n{SUP, PRT, CAT} = OR3getAnything[from-\u0026gt;spcModel, get-\u0026gt;\u0026#34;Entities\u0026#34;] prtID = OR3getAnything[from-\u0026gt;spcModel, find-\u0026gt;\u0026#34;prtID\u0026#34;][[1]] fval1 = OR3getAnything[from-\u0026gt;prtID, find-\u0026gt;\u0026#34;998\u0026#34;][[1]] minCatPriceTuple = SortBy[ OR3getAnything[from-\u0026gt;CAT, get-\u0026gt;\u0026#34;Tuples\u0026#34;, filter-\u0026gt;fval1], OR3getValue@#[[3]] \u0026amp;][[1]] catTuple = minCatPriceTuple // OR3getValue fval2 = minCatPriceTuple[[1]] supTuple=OR3getAnything[from-\u0026gt;SUP, get-\u0026gt;\u0026#34;Tuples\u0026#34;, filter-\u0026gt;fval2, values-\u0026gt;True,][[1]] prtTuple=OR3getAnything[from-\u0026gt;PRT, get-\u0026gt;\u0026#34;Tuples\u0026#34;, filter-\u0026gt;fval1, values-\u0026gt;True,][[1]] prtTuple[[1 ;; 3]]~Join~catTuple[[3 ;; 4]]~Join~supTuple[[{1, 2, 5}]] // DeleteDuplicates Case2: Condition and Cleansing This is a case of detecting and correcting an inaccurate value from a record set that is returned by specifying a condition.\nCode. 21 - This is an example of cleansing in two phases, detection and correction. Here we can spot the error by filtering collection sets with the condition prtName=Acme Widget Washer. There are two values in prtUnit collection kg and kb. The second one should be kg, it is a typographical error. We can fix this by deleting the hyperlink that connects the nexus 52:3 (red hyperbond), with the datum kb (green hyperatom), and then adding a new hyperlink from 52:3 to datum 64:1.\nView Code.21  Case3: Graph Traversal This is how we perform graph traversal in R3DM/S3DM. Instead of visiting each vertex in the graph we filter hyperbonds on account of the hyperatoms they share.\nCode. 22 - We start by specifying a condition, e.g. visiting a single hyperatom. This is a green node on the first hypergraph with the label Acme Widget Washer. Now we can get hyperbonds (red nodes) and find all its siblings. This is also a visual representation of Part tuples. There are two Part items with the description Acme Widget Washer. One has Silver color, the other is Red and both of them weigh 142.88kg. In the same hypergraph we have also two identifiers 993 and 994 these are prtID Attribute values that are shared with Catalog Entity tuples. Therefore in the second hypergraph we have filtered Catalog tuples and we have drawn three of them that are related to these two Part items. This time there are common hyperatoms, those with a supplier identifier (1081, 1084), that are shared between Catalog and Supplier. In the third hypergraph we get a complete 360 degrees view of our case by filtering the Supplier Entity. Now we can see that there are two Suppliers one located in USA that supplies both Part items and the other in UK that supplies only the Silver Acme Widget Washer.\nView Code.22  In all three cases we have demonstrated that there are two ways to present the resulting data set from filtering. We can either return item collections, i.e. sets of values for each Attribute we are interested in, or projected tuples from each Entity separately or in a consolidated multi-grid flat form.\nSummary We have presented R3DM/S3DM data modeling framework from a multi-perspective view. The building blocks of conceptual and logical perspective are paired up. Types are separated from instances and semantics are defined and explained with three alternative paradigms object-oriented, network graph and semiotics. It is the interpreted, encoded (materialized) and representative forms in the triangle of reference that gave R3DM/S3DM its name. This trilateral principle is applied to everything including the architectural design of R3DM/S3DM.\nThe eight type systems of R3DM/S3DM play the role of a formal upper level ontology and its construction is based on the Neurorganon Upper Level Ontology (NULON). Terms of this ontology describe the framework with a hierarchical organizational structure that defines schemata and types for models, entities, attributes, items, values, data sources, links and database metadata.\nIn terms of querying and managing data there is a set of functional operations that match SQL Select, Insert, Update, Delete statements and there is a filtering mechanism implemented which is equivalent to SQL Where conditions. Thanks to the powerful Wolfram Language transformations we can return results in the form of a table, Rule set, Association set, Dataset, or even a network graph. R3DM/S3DM has also been defined as a functional representation of information resources that are mapped to a materialized form (realization).\nEpilogue R3DM/S3DM is an attempt to unify existing popular data models. The key element to achieve this is the association construct. We have devoted five posts of this series to highlight differences and similarities of Relational, Topic Map, Property Graph, RDF and Qlik data models that are dependent on associations. And the innovative aspect of R3DM/S3DM is that it avoids namespace, addressing, and identification problems by adopting a uniform representation of everything with numerical vector references.\nR3DM/S3DM is a framework to construct a Reference Database Management System, it is RDBMS redefined. The first class citizen in this system is the Reference. It is not the tuple of Entity-Relationship data model, or the triplet of RDF/OWL data model, or even the nodes and edges of the graph data model. R3DM/S3DM is based on Atomic Information Reference units (AIR) and it can assimilate table, column, tuple, key-value, triplet, associations and graph data structures. This kind of granularity of R3DM/S3DM controls also the level of information detail that will be presented to the user e.g. show only hyperbonds i.e. Entity instances.\nInformation resources are not handled by name in R3DM/S3DM, they are always represented and function as meaningful keys (numerical vectors). We escape from the namespace entanglement and alleviate the complexity of linked data by smart AIR units that are represented in a uniform way and their digital form can be processed, retrieved and stored efficiently and/or combined to create composite information structures. Where bit is the basic construction unit for data, AIR becomes the fundamental processing unit for structured information. It is now possible to have a giant global graph (GGG) network of information resources based on the power of semiosis with a reference mechanism that is not built with character strings (URL) but it is similar to the Internet Protocol address (IP).\nThis is our mantra, build valuable relations; establish effective communications.\nThe End \u0026hellip; or perhaps the beginning of a new era in databases and data modeling.\nCross-References  LinkedIn - 20170412 Update about duration, effort and acknowledgements LinkedIn - 20170412 Article LinkedIn - 20170412 Update about LinkedIn article and request for comments LinkedIn - 20170426 Update about RDF predicate and literal triplets LinkedIn - 20170525 Update and comment - Post of Theodore Hills - \u0026ldquo;Data Architecture COMN Sense: Relationships and Semantics\u0026rdquo; LinkedIn - 20170525 Data Modeling Group - Relational-Graph DBMS, how do we bridge the gap ? LinkedIn - 20170525 Update and comment - Post of Theodore Hills - \u0026ldquo;Understand Relational to Understand the Secrets of Data\u0026rdquo; Facebook - 20170412 Post Disqus - Number of Comments Disqus - Discussion Channel Data Science Central - 20170510 Discussion - R3DM/S3DM : A Semiotic Data Modelling Framework Data Science Central - 20170525 Discussion Comment on SQL to NoSQL translator    © Athanassios I. Hatzis, March 2017\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1491955200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1491955200,"objectID":"78c5a4de8b3c00c11a9a71fa5d4d4e95","permalink":"https://healis.eu/en/post/20170412/","publishdate":"2017-04-12T00:00:00Z","relpermalink":"/en/post/20170412/","section":"post","summary":"The last part (6/6) of a series demonstrating Associative Semiotic Hypergraph technology","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Wolfram_Language","OrientDB","Computational_semiotics","Associative_entity"],"title":"Associative Semiotic Hypergraph based on R3DM/S3DM","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Definition Graph Databases Per Data Model Epilogue Cross-References   Definition There is a lot of confusion with the definition of graph databases. In my opinion, any definition that avoids any reference to the semantics of nodes and edges or their internal structure is preferable. Failing to follow this guideline, it is unavoidable to favor specific implementations, e.g. Property Graph Databases or Triple Stores, and you may easily become myopic to other types that are based on different models, e.g. hypergraph databases, or different data storage paradigms, e.g. key-value stores. Therefore, I propose we adopt a vendor neutral definition, such as the following one, which cannot exclude any future type of graph database.\n A Graph Database is a database that uses a graph topology, i.e. vertices and edges, to manage information at the conceptual level independent of the logical and physical implementation of the graph data structure - Athanassios I. Hatzis\n Graph Databases Per Data Model That said, there are many differences regarding to the abstraction layer of databases. These affect everything — visualization, query language, indexing, scaling, and transactions. Now, let me focus on the conceptual/logical layer, where my work is based. Depending on the structure of nodes and edges, one can describe the following three different data models.\n  Property Graph Data Model\n Directed Labeled Graph Entity-centric with embedded properties and edges with bidirectional linking to nodes Neo4J, OrientDB, ArrangoDB, etc.    Triple/Quadruple Data Model\n Directed Labeled Graph Edge-centric with unidirectional linking on vertices GraphDB, AllegroGraph, OpenLink Virtuoso, etc.    Associative Data Model\n Hypergraph/Bipartite Graph Hypernodes, Hyperedges with bidirectional linking Topic Map Data Model, R3DM/S3DM, X10SYS (AtomicDB), HypergraphDB, Qlik Technology    There are two main differences between (1) and (2). First, the type of edges in a property graph, by definition, is bidirectional. You can traverse any edge both ways, despite the fact there is a direction on the edge. On the contrary, with RDF, you have to define two labeled edges with opposite directions to achieve bidirectional linking. And secondly, in literal triples, object parts are properties of a subject part, but they are not first-class citizens and they are not embedded inside the structure of Entity nodes of a property graph.\nI left the associative data model as the last thing to mention. R3DM/S3DM is the reincarnation of Topic Maps, the de facto standard for the representation of associations. The following series of posts on associative data modeling is written with a hands-on practice style. It is an attempt to clear the information glut of many-to-many relationships (a.k.a associations) with a thorough examination of well-known data models and at the same time introduce R3DM/S3DM to the public.\n Part 1/6 - Relation, Relationship, and Association Part 2/6 - Association in Topic Map Data Model Part 3/6 - Association in Property Graph Data Model Part 4/6 - Association in RDF Data Model and Sentences associative data model Part 5/6 - Qlik Associative Mode Part 6/6 - R3DM/S3DM Associative Semiotic Hypergraph Data Model  Epilogue The verdict from this quick review on graph databases is that I have reasons to believe that associative data modeling is far more powerful and expressive than the other two. I foresee that DBMS vendors that will incorporate in their products R3DM/S3DM technology will eventually have a significant competitive advantage.\nCross-References   LinkedIn - 27/02/2017 Pulse Article\n  LinkedIn - 28/04/2017 Post about Robin Bloor on driving BI in real-time\n  LinkedIn - 28/04/2017 Post about Thomas Frisendal on atomic data\n  LinkedIn - 04/05/2017 Featured on Semantic Web Research Group\n  LinkedIn - 04/05/2017 Featured on Computational Semiotics Group\n  LinkedIn - 04/05/2017 IT Professionals Group\n  LinkedIn - 04/05/2017 Business Analytics Group\n  LinkedIn - 04/05/2017 Big Data Analytics Strategy Group\n  LinkedIn - 04/05/2017 Big Data Analytics BI \u0026amp; Visualization Group\n  LinkedIn - 25/05/2017 Post Comment SQL to NoSQL translator\n  DZone - 17/03/2017 Article\n  Facebook - 04/05/2017 HEALIS Page\n  Data Science Central - 17/06/2017 Blog Post\n  ","date":1488240000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1488240000,"objectID":"0890a2ce98797602df4c64f805ffa3ec","permalink":"https://healis.eu/en/post/20170228/","publishdate":"2017-02-28T00:00:00Z","relpermalink":"/en/post/20170228/","section":"post","summary":"The associative data graph database model is still a heavy hitter, stacking up well against property graphs and triples/quadruples. Expect a comeback","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array","Online_analytical_processing","Business_analytics","Data_warehouse","IT_Operations_Analytics","Resource_Description_Framework"],"title":"Data Modelling Topologies of a Graph Database","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Definition of Graph Databases Many-to-many Relationships Multi-model Database Engine Physical versus Logical Perspective Conceptual Framework Query Language Business Analytics Epilogue Cross-References   Introduction There are endless discussions in the databases arena about which DBMS is best suited for operational or data warehousing analytics, which one is the most efficient for online transaction processing, or which one is suitable for semantic integration. Recently graph databases are growing in popularity, especially in the enterprise space, and perhaps that adds more headache on those vendors that try to differentiate from competition and on those clients that are completely uncertain how to embrace this database technology.\nDefinition of Graph Databases Recently Bloor published a report about Graph and RDF Databases. The author, Philip Howard, claims that \u0026ldquo;the difference between a true graph product and a triple store is that the former supports index free adjacency (which means you can traverse a graph without needing an index) and the latter doesn\u0026rsquo;t\u0026rdquo;. On the contrary Weinberger, CEO of ArrangoDB, argues that this is not a fundamental criterion on what is a graph database. In a post titled \u0026ldquo;Index Free Adjacency or Hybrid Indexes for Graph Databases\u0026rdquo; he proposes that the definition of graph database remains\n a database that uses graph structures for semantic queries with nodes, edges and properties to represent and store data independent of the way the data is stored internally - Claudius Weinberger\n Indeed, in the same Bloor report a distinction between native and non-native graph databases is made based on their engine. In my opinion, any definition that avoids any reference to the semantics of nodes and edges or their internal structure is preferable. Failing to follow this guideline, it is unavoidable to favor specific implementations, e.g. Property Graph Databases or Triple Stores, and you may easily become myopic to other types that are based on different models, e.g. hypergraph databases, or different data storage paradigms, e.g. key-value stores. Therefore, I propose we adopt a vendor neutral definition, such as the following one, which cannot exclude any future type of graph database.\n A Graph Database is a database that uses a graph topology, i.e. vertices and edges, to manage information at the conceptual level independent of the logical and physical implementation of the graph data structure - Athanassios I. Hatzis, 28th February 2017\n Many-to-many Relationships In another recently published Spotlight paper by Bloor, \u0026ldquo;All about graphs: a primer\u0026rdquo;, the author discusses the Graph data model and highlights the representational differences of a many-to-many relationship including those of bipartite, hypergraph and associative graphs. He observes that\n unlike other new database approaches, graphs cannot easily be subsumed by the leading relational database vendors because the architectural constraints of graphs do not fit easily within the relational paradigm - Philip Howard\n He mentions that the two main variants on entity relationships are labeled property graphs and subject-predicate-object triples. In practice, although the idea of relationships (associations) between entities is at the heart of Peter Chen\u0026rsquo;s Entity-Relationship model, Fig.2 and Fig.3, there are subtle dissimilarities in its implementation on various graph databases. A. Hatzis, in a series of posts on associative data modeling, that is written with a hands-on practice style, attempts to clear the information glut of this topic with a thorough examination of graph data models.\nMulti-model Database Engine The graph engine and the type of data model are critical factors for any graph database. Therefore it is not strange that many vendors have started marketing their DBMS as a multi-model. We have extensive and long experience with two such products, OrientDB and Intersystems Cache. The former supports Graph, Document, Key/Value, and Object models, the latter is an object database with relational access, integrated support for JSON documents and a multidimensional key-value storage mechanism that can be easily extended to cover Graph data model. Generally speaking, we have reasons to believe that multi-model DBMS will dominate the database market. Currently OrientDB has become a leading player in the graph databases and Intersystems Cache is one of the best operational DBMS according to Magic Quadrant report.\nPhysical versus Logical Perspective Not only has a multi-model database been flexible with its logical schema, but it also has a unified storage data architecture. Although the developer should hardly need access to the physical implementation details of the storage engine, an API for direct use of the engine is desirable and beneficial for many reasons. Most important, this kind of architecture allows someone to build a customized database management system. In theory, ANSI/SPARC three level architecture (external, conceptual/logical and physical) is an effort to allow these three perspectives to be relatively independent of each other, but in practice the front-end of a DBMS is most often strongly dependent on the back-end storage data model.\nA loose coupling can be achieved with associative/multidimensional arrays. No matter what is their physical implementation, i.e. hash tables or trees, based on this abstract data type you can model all four NoSQL database types, (Key/Value, Tabular/Columnar, Document, Graph). For one reason or another, we are of the opinion that associative/multidimensional arrays will eventually prevail in the world of databases. There is already strong competition for their best physical implementation and sparse, column-family store, databases have proven to be very popular (HBase, Hypertable, BigTable, Intersystems Cache).\nThere are other properties that are crucial for operational database management systems such as ACID transactions, distributed data architecture, and scalability. Whether we are talking for a multi-model or single model graph databases, there is a tendency to use them for on-line transaction processing therefore these properties are worth having. And again in terms of architectural design there is always the problem of how to achieve a loose coupling between the physical structures of a database and the application logic.\nConceptual Framework With that said it brings us to the question on what kind of logical/conceptual data model architecture to use. Our R3DM/S3DM framework is based on the powerful theory of the semiotic triangle. We use numerical vectors (signs), to encode abstract things in our mind (signified) to which the sign refers, e.g. Person, name, Car, model. We associate these with data containers-forms that the sign takes for the storage of data values (signifier), i.e. primitive data types (see also Signified and Signifier). This trilateral principle of our framework permits a uniform treatment of semantics, syntax and storage of information based on a symbolic representation. This way we define a fundamental, atomic information resource unit, (AIR). Those units, in turn, can be easily shaped to form any tabular, hierarchical, or graph data structure in a unified way. For example, study this R3DM hypergraph representation of Qlikview associative model. Data granularity can be also deeply connected and related to the definition of a fundamental unit of processing.\nBased on this single primitive construct as a building block, (AIR), we have implemented seven type systems for an upper level management of any DBMS. These are:\n   SYSTEM SHORTNAME     1. SYS_Dataset DSS   2. SYS_DomainModel DMS   3. SYS_EntityType ETS   4. SYS_AttributeType ATS   5. SYS_ValueType VTS   6. SYS_LinkType LTS   7. SYS_Database DBS    We characterize Datasets, Domain Models (schemas), Entities, Attributes, etc, as information resources, values are information realization and our AIR units that represent everything are called information representations or simply references. Our current implementation phase has been completed on top of OrientDB and a forthcoming article will present R3DM/S3DM architecture in detail. In the past, Freebase collaborative knowledge graph had a type system that was built on primitive constructs.\nQuery Language Yet another decisive norm in databases is the query language. With RDF directed, labeled graph data format and with RDF store databases respectively, e.g. OpenLink Virtuoso, AllegroGraph and Ontotext GraphDB, SPARQL query language is a standard way to retrieve data. On the contrary the query language of property graph databases varies a lot. There are similar to SQL APIs such as those of OrientDB and ArrangoDB, Neo4J is using its own Cypher declarative graph query language and there is also the Gremlin open-source graph programming language.\nAnother approach is that of GraphQL which is similar to Freebase MQL query language. Queries are shaped in JSON hierarchical format with patterns that follow the schema of the graph database.\nWe have developed a functional RESTful API that can be served as a prototype for a uniform, universal treatment of data language. Commands and their parameters can become more efficient and they can be simplified if we take on account the hierarchical relationship of Server, Database, Class, Property and Record containers. There are five sets of commands for getting, updating, deleting, adding and linking information. Current implementation is built with Wolfram Language and we will expose more details in a forthcoming article where we analyze R3DM/S3DM architecture.\nBusiness Analytics Last but not least, there is an emerging need for databases that can function as both analytic and operational. In particular, the modern data warehouse should unify all client\u0026rsquo;s transactional databases as well as integrate other external data sources that enable data cleansing, validation and enhancement. Not only that, but for quick and smart business analytics the interface should be both user friendly and functionally powerful. We are aware of such a player in this market segment with a technology that possess similar features to our R3DM/S3DM framework. This is the reason that we devoted one of our articles to describe QlikView\u0026rsquo;s unique, award-winning, in-memory associative technology.\nEpilogue Make no mistake, relational databases are the past of computer database technology. Graph databases are the present and the future. This quick review on what we considered important criteria for graph database related technology products might leave the reader in more perplexity than satisfaction. This is our perspective, we wanted to share some of our knowledge with experts and chief technology persons on this field so that we could discuss the matter in more detail with them. The future will show in how many of these discussion topics we were right.\nCross-References  LinkedIn - Published Posts LinkedIn - Semantic Web Research Group LinkedIn - Graph Databases Group LinkedIn - Data Warehouse \u0026amp; Business Intelligence Architects LinkedIn - Computational Semiotics LinkedIn - Database \u0026amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational LinkedIn - Database Developers and Architects Group LinkedIn - Data Modeling Group LinkedIn - Update LinkedIn - Database Experts LinkedIn - OrientDB LinkedIn - MUMPS and Cache Development Quora - Question and Answer DZone - Article Data Science Central - Blog Post Intersystems Developer Community - 21/2/2017 Post about how Intersystems Cache fits in the Graph Database Arena  ","date":1486944000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1486944000,"objectID":"09fe04781c8acac749ba2f4b170a98f6","permalink":"https://healis.eu/en/post/20170213/","publishdate":"2017-02-13T00:00:00Z","relpermalink":"/en/post/20170213/","section":"post","summary":"A swift introduction to the key factors that influence the performance and unification character of graph databases","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array","Online_analytical_processing","Business_analytics","Data_warehouse","IT_Operations_Analytics","Resource_Description_Framework"],"title":"A Quick Guide on How to Prevail in the Graph Database Arena","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction to Qlik\u0026rsquo;s Associative Model Qlik\u0026rsquo;s In-Memory Associative Architecture  Loading the data Explore/Filter Data via Selections   R3DM Hypergraph Representation  AIR Units   Future Plans Cross-References   Introduction to Qlik\u0026rsquo;s Associative Model In the discussion session of the previous post of our series we mentioned two basic reasons that make RDF data modeling and consequently SPARQL query mechanism disadvantageous with an interactive and associative data exploration and data integration as that of QlikView/Qliksense. These are the naming of predicate terms that connect resources and literals and the unidirectional architectural design of the edges. We have already demonstrated this issue with the associative model schema design of a Movies domain in Freebase, Fig.12, and the modeling of our Supplier-Parts-Catalogue toy example in Sentences, Fig.15, Fig.16 and OrientDB Property Graph, Fig.4. In this post we continue our journey with Qlik\u0026rsquo;s associative data model.\nQlik\u0026rsquo;s In-Memory Associative Architecture Qlik\u0026rsquo;s competitive advantage over other BI tools is that it manages associations in memory at the engine level and not at the application level [(English,2010)]1. This management of data, is deep down to an atomic level of data (Granularity), i.e. every data point in every field of a table is associated with every other data point anywhere in the entire schema [(English,2010)]1. We will follow Qlik\u0026rsquo;x QIX engine stepwise approach with the goal of performing an interactive data exploration [(Ferguson,2015,p.10)]2 of our Suppliers-Parts-Catalogue data set.\nLoading the data The first step is to bring data into memory. A multi-table read-only, in-memory, compressed, binary, columnar data model is created. Data from each source data table is converted into two types of in memory data structure : [(Ferguson,2015,p.12)]2.\n A set of columns that contain binary values, i.e. references, for each distinct original value. A compressed binary data table by replacing each row/column cell value with a binary reference.  For example, the following statements, [QlikView script syntax, p.242]3, load data from the Parts and Suppliers tables that are stored in Excel files and reconstruct eleven unique columns and two read-only binary representation of these tables in memory.\nLOAD prtID, prtName, prtColor, prtWeight, prtUnit FROM [F:\\tmp\\SupplierPartCatalogue\\SuppliersPartsCatalogue.xlsx] (ooxml, embedded labels, table is Part); LOAD supID, supName, supAddress, supCity, supCountry, supStatus FROM [F:\\tmp\\SupplierPartCatalogue\\SuppliersPartsCatalogue.xlsx] (ooxml, embedded labels, table is Supplier); If two fields have the same name in two different tables (i.e. a relationship) then they have the same columnar binary representation. In order to resolve ambiguities and to associate over fields that have the same name, unique column naming is required. This is the case for our third associative, i.e. bridge, junction table. Field names catSID and catPID have already been loaded and represented with the columns supID and prtID. The next LOAD statement is using the alias operator (as) to handle unique column naming.\nLOAD catSID as supID, catPID as prtID, catPrice, catTotal, catDate, catChk FROM [F:\\tmp\\SupplierPartCatalogue\\SuppliersPartsCatalogue.xlsx] (ooxml, embedded labels, table is Catalogue);   QlikView Internal/Source Table View   Once the script is executed we can review the data table structure, Fig. 1, with the Table Viewer. The three tables are associated with two connectors that bidirectionally link them through their common fields. This layout is quite similar with the Entity-Relationship diagram of Microsoft Access database schema, Fig.5. A QlikView association resembles a SQL natural outer join. However, an outer join in SQL is unidirectional. An association always results in a full (bidirectional) linkage. In practice we have two completely different approaches. In a typical SQL join query we repeatedly search the index because of the join condition.\n QlikView associative engine (QIX) knows how every data point is associated, therefore it can effectively determine (infers) and flag all distinct column values and all rows in each data table upon user\u0026rsquo;s selection 2\n The Blind Spot Depending only on memory, QlikView can load many whole tables without joins, instead of a limited view from the main dataset. Other query-based BI tools usually aggregate an extracted subset of data and return it in the form of a result set. This result set is completely divorced from the original data set and this very act of extraction breaks associations. For example, find out how a piece of data contained in a query relates to another piece of data outside the query [(QlikView Whitepaper, October 2010, p.3)]4. You may think also of an internal combustion engine analogy . With the query-based paradigm, we would look at individual parts of the engine in isolation, (see the header image of our post). Using QlikView associative technology, we have access to a digital model of a complete working engine and we can tweak any part to see how that affects other parts and the engine on the whole.\nExplore/Filter Data via Selections In this section we will examine QlikView associative aspect from the user\u0026rsquo;s experience point of view. \u0026ldquo;Central to QlikView is the concept of a user-defined selection state. As users click around in a QlikView document, they indicate which subsets of data they are interested in analyzing and which subsets should be ignored, [(QlikView Whitepaper, September 2011, p.10)]5. To demonstrate the visual effect of associations, i.e. the relationship between a value in one field and a value in another, we arranged a number of [Sheet Objects, p.457]3 in our Main worksheet. We chose [Table Boxes, p.507]3 to present rows of data from our Tables and [List Boxes, p.459]3 to display a list of all possible values of a specific field. We have also added a [Current Selections Box, p.519]3 to list user\u0026rsquo;s selected field values and a [Search Object, p.569]3 for searching for information anywhere in the document, Fig.2.\n    QlikView Sheet Object in an unselected state with Table Boxes, Current Selections, and a Search Box on the left side and a Container with List Boxes for Fields representation on the right side   Now you can see visually what is associated and is not associated with any particular selection. For instance, [Fig.3]3 displays the state of our Worksheet when the user selected the Part item with ID value equal to 998. The List Box of the field (prtID) with the value 998 appears in green and it has also been added to the Current Selections list. In other List Boxes, unrelated values in all other fields appear in gray and those that are related appear in white. At the same time, when the user interacts with this particular List Box all the rows of Table Boxes are instantly filtered to reflect this new context.\n    Table Boxes on the left side are filtered and values of the List Boxes on the right appear in white or gray according to the current selection (green)   So far we have seen how we can get the resulting data after user\u0026rsquo;s selection in two possible formats, a list of values (List Box) for each field of the data Table, Fig.5, and a grid (Table Box) with tuples (records), Fig.4. You may also notice in our visual setup that we have a Derived Relation red grid with selected fields from all three Tables of our data set. This grid is automatically constructed with those tuples that appear in the other three grids (Catalogue Table Box, Part Table Box and Supplier Table Box). We should make it clear that the update of this Derived Relation under the hood is not performing any kind of Join (SQL) operation. The effect of tuples filtering and shading of list values is demonstrated with animated gif images in three states. There is the Unselected State, then there is the Part with ID value 998 selected state, and from those Catalog entries for this specific Part, (4 entries, one for each Supplier), we select the Supplier with the minimum Catalog price and that is our third state.\n    Animated Grids of Tuples       Animated Lists of Values from Table Fields   R3DM Hypergraph Representation With the Associative Data Modeling there can be a third way to present data. This is the one that engages the user with the visualization of network graphs. In the previous post of our series, we have drawn an R3DM Hypergraph, Fig. 14, and we described associations according to R3DM terminology. We have used exactly the same data of this case study example, i.e. find the Supplier with the minimum Catalog price for Part with prtID value 998, to draw Fig.2 , Fig.3 , Fig.4  and Fig.5 . This time we have redrawn hypergraph of Fig. 14 with the help of OrientDB Graph Editor, Fig.6. Every string label and numerical value of Fig. 14 has been replaced with a unique OrientDB record identifier, (RID - clusterID : clusterPosition). In effect, this is how we implemented R3DM/S3DM Sign layer. Each data item becomes an Atomic Information Resource (AIR) unit with a symbolic representation of a 2D vector (Entity/Attribute Type : Instance).\nAIR Units From Data Items in any structure (Table/Entity/Triple/JSON/XML) to data model reconstruction with Information Atoms\nAIR units can represent in a uniform way anything, i.e. Entities, Attributes, Values, Types, Databases, etc. Their vector form can be indexed, linked, retrieved, stored efficiently, and we can use AIR units to build associations and assimilate composite information structures such as records (tuples).\nTo visualize R3DM associations using AIR units we have color coded the graph and we added a legend at the left side, Fig.6. Entities are distinguished from attributes by the size of the disk and grouping of entities and attributes is depicted with different shades of a color (green for Suppliers, brown for Parts, purple for Catalog items). We can easily see four Catalog items (#70:7, #70:11, #70:12, #70:16) associations with the four Suppliers (#68:0, #68:1, #68:2, #68:3) and the Part (#69:7) with ID value 998 (#77:7) that is drawn in the center of the graph with the black disk around it. USA suppliers (#68:0, #68:1) share the value of their common supCountry attribute (#75:0). One of them (#68:1) has a Catalog entry (#70:11) with the minimum catalog price,catPrice, (#82:9). We can also see the formation of tuples for Supplier (4), Catalog (4) and Part (1).\n    R3DM Color Coded Associations with AIR units   Regarding to the immense advantage of using AIR units to reconstruct hierarchical, table, or graph structures, we can also refer to the following QlikTech patent. In the \u0026ldquo;Summary of the Invention\u0026rdquo; section we read:\n each different data element value of each data element type is assigned a binary code and the data records are stored in binary-coded form. On account of the binary coding, very rapid searches can be conducted in the tables. - Qliktech International AB Patent, May 20016\n Future Plans It is rather unfortunate that the basis of QlikView\u0026rsquo;s evolutionary associative technology has been confined to the market of proprietary software products. In HEALIS we have made the difference by opening up these database design key principles for discussion with experts of the field and we have made them part of our R3DM/S3DM conceptual framework.\nWe have gone a step further to implement our framework on top of OrientDB and Intersystems Cache DBMS and instead of writing SQL queries, we have abstracted the programming of a set of functional operations that match the selection and filtering of data. We plan to continue with the last part of this post series in order to fully demonstrate how we build our system and how we test it with the Suppliers-Parts-Catalogue data set.\nCross-References  LinkedIn - Published Posts LinkedIn - Semantic Web Research Group LinkedIn - Graph Databases Group LinkedIn - Data Warehouse \u0026amp; Business Intelligence Architects LinkedIn - Computational Semiotics LinkedIn - Semantic Technologies LinkedIn - Data Visualization LinkedIn - Database \u0026amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational LinkedIn - Database Developers and Architects Group LinkedIn - Linked Data Web LinkedIn - Update LinkedIn - Database Experts LinkedIn - QlikView Qlik Community - German User Group - Post Qlik Community - Discussion    D. English, \u0026ldquo;White Paper: Understanding QlikView\u0026rsquo;s Associative Architecture\u0026rdquo;, QlikTech International AB, May 2010\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n M. Ferguson, \u0026ldquo;White Paper: Interactive Data Exploration With An In-Memory Analytics Engine\u0026rdquo;, QlikTech International AB, May 2015 (pdf)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;QlikView Reference Manual v11.20 SR2\u0026rdquo;, QlikTech International AB, Lund, Sweden, 2013 (pdf)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;The Associative Experience QlikView\u0026rsquo;s Overwhelming Advantage\u0026rdquo;, QlikTech International AB, October 2010 (pdf)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;QlikView Architectural Overview\u0026rdquo;, QlikTech International AB, September 2011 (pdf)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \u0026ldquo;Method and Device for Extracting Information from a Database\u0026rdquo;, QlikTech International AB, May 2001\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1486771200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1486771200,"objectID":"0cd9497f4f4139043f961c872b7ce5c6","permalink":"https://healis.eu/en/post/20170211/","publishdate":"2017-02-11T00:00:00Z","relpermalink":"/en/post/20170211/","section":"post","summary":"Part 5/6 of the series Associative Data Modelling Demystified","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Qlik","Associative_entity"],"title":"Qlik Associative Model","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction to RDF RDF and Linked Data Association in RDF Associative Model Association in R3DM Discussion Acknowledgements Cross-References   Introduction to RDF In the previous post, Part-3, of this series we explored the Property Graph data model. It is now time to write about another Graph data model with a long history behind it, the Resource-Description-Framework (RDF). We will see how we can define an association in RDF and what are the differences with other data models that we analyzed in previous posts of our series.\nRDF is a graph-based data model that has been designed to represent information as a labeled directed graph. In RDF, a description of a resource, i.e. any type of thing, is represented as a number of triples. Each triple has a subject, predicate, and object. Alternatively if you want to think in terms of Entity-Relationship model, these three parts of the triple become the Entity-Attribute-Value. This is also known as the EAV model. For instance the Entity subject Part:998 of our Parts table in the example data set of our series can be serialized in Turtle syntax as :\nPart:998 rdf:label \u0026#34;Fire Hydrant Cap\u0026#34;@en ; schema:color \u0026#34;Red\u0026#34;@en ; schema:weight \u0026#34;7.2\u0026#34;^^xsd:double ; schema:unitText \u0026#34;lb\u0026#34;@en ; dc:identifier \u0026#34;998\u0026#34;^^xsd:int . These rdf:label, schema:color, schema:weight, schema:unitText, dc:identifier are attributes of this Entity instance and \u0026ldquo;Fire Hydrant Cap\u0026rdquo;, \u0026ldquo;Red\u0026rdquo;, \u0026ldquo;7.2\u0026rdquo;, \u0026ldquo;lb\u0026rdquo; and \u0026ldquo;998\u0026rdquo; are atomic values with an accompanied data type, see also Fig. 7.\nRDF and Linked Data But RDF is not like any other data model, it has been selected from W3C as one of the Web technologies, together with HTTP and URIs, to extend the hyperlinking of documents to a set of best practices for publishing and interlinking structured data on global scale. Today the term Linked Data refers to these standards, and the extension of the Web is also known as the Semantic Web. The predecessor of RDF, the Semantic Network Model, was formed in the early 1960s. The main difference is that arcs and nodes in RDF are identified using HTTP URIs and dereferenced (i.e., looked up) over the HTTP protocol. If we use N-Triples syntax to serialize the same resource Part:998 we take:\n\u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#label\u0026gt; \u0026#34;Fire Hydrant Cap\u0026#34;@en . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://schema.org/color\u0026gt; \u0026#34;Red\u0026#34;@en . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://schema.org/weight\u0026gt; \u0026#34;7.2\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#double\u0026gt; . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://schema.org/unitText\u0026gt; \u0026#34;lb\u0026#34;@en . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://purl.org/dc/elements/1.1/identifier\u0026gt; \u0026#34;998\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#int\u0026gt; . Notice that the object part of the triple is an RDF literal and datatypes are used to represent values such as strings, numbers and dates. These triples are called Literal triples and describe the properties of resources. In our example these literal triples describe five properties of the Part:998 resource. This type of RDF triples is distinguished from the other type which is RDF Links and describe the relationship between two resources. For example if we want to express with the same syntax all the vendors of Part:998 we will form these triples:\n\u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://www.wikidata.org/property/hasVendor\u0026gt; \u0026lt;http://example.org/spc/Supplier/1081\u0026gt; . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://www.wikidata.org/property/hasVendor\u0026gt; \u0026lt;http://example.org/spc/Supplier/1082\u0026gt; . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://www.wikidata.org/property/hasVendor\u0026gt; \u0026lt;http://example.org/spc/Supplier/1083\u0026gt; . \u0026lt;http://example.org/spc/Part/998\u0026gt; \u0026lt;http://www.wikidata.org/property/hasVendor\u0026gt; \u0026lt;http://example.org/spc/Supplier/1084\u0026gt; . This is also the equivalent result set at Fig. 1 presented in a compact form from the following SPARQL query:\n#Suppliers of Part 998 PREFIX Supplier: \u0026lt;http://example.org/spc/Supplier/\u0026gt; PREFIX Part: \u0026lt;http://example.org/spc/Part/\u0026gt; PREFIX xsd: \u0026lt;http://www.w3.org/2001/XMLSchema#\u0026gt; PREFIX wd: \u0026lt;http://www.wikidata.org/property/\u0026gt; PREFIX dc: \u0026lt;http://purl.org/dc/elements/1.1/\u0026gt; select ?prt ?p ?sup where { BIND(wd:hasVendor AS ?p) # Start with a ?prt that has id=998 ?prt dc:identifier \u0026#34;998\u0026#34;^^xsd:int . # Find all catalog items (?cat) with a reference to ?prt ?cat wd:hasPart ?prt . # For any catalog item (?cat) find the vendor that supplies ?prt ?cat ?p ?sup . }     Result set from SPARQL query to find the suppliers of Part:98   In Fig. 1 The URI with QName wd:hasVendor, in the predicate position defines the type of relationship between a subject with QName Part:998 and an object with any of these QNames (Supplier:1081, Supplier:1082, Supplier:1083, Supplier:1084). Both subject and object URIs are in the same namespace (http://example.org/spc/), these are called Internal RDF links.\nOne way to think these RDF links is as a labeled directed graph. Each triple is a directed arc that connects a subject, e.g. Part:998, with an object, e.g. Supplier:1084, and the predicate is the label of the arc, wd:hasVendor. For example the previous result set can be represented with the following graph in Fig. 2:\n    Suppliers of Part:998   But the graph for the data model of our example is slightly more complicated because there are intermediate nodes, i.e. inventory items that represent records from the Catalog table, that associate, bridge Suppliers with Parts Fig. 3.\n    Suppliers of Part:998 with intermediate Inventory Items nodes   Another distinction of RDF links to Outgoing and Incoming can be seen in Fig. 3. For example Part:998 has four incoming RDF links of type wd:hasPart and Item:7 has two outgoing RDF links of type wd:hasPart and wd:hasVendor respectively.\nIn fact the SPARQL query above has been written taking in consideration this graph. In order to traverse the nodes you must know both the type of RDF link and its direction. In RDF graph data model edges are unidirectional. In order to define bidirectional edges we have to define both outgoing and incoming RDF links for each node, i.e. two predicates Fig. 4.\n    RDF bidirectional   Association in RDF We can now compare these five associations of Part:998 with RDF links of the graph in Fig. 6. One of them is composed with all outgoing triples of Part:998, i.e. Part:998 is the subject of the triple Fig. 5. These literal triples describe five properties of Part:998 resource, yellow boxes of Fig. 6, and another RDF link is for the type of resource, i.e. Item (grey box).\n# Get all outgoing triples for a specific part PREFIX Part: \u0026lt;http://example.org/spc/Part/\u0026gt; select ?prt ?p ?o where { BIND(Part:998 AS ?prt) ?prt ?p ?o . }     Result set of all outgoing triples for Part:998   The resource Part:998 participates in four associations with Inventory resources, as the object of a triple. These are the four incoming RDF links of Part:998 in Fig. 3, Fig. 6 and Fig. 8.\n    Five associations of Part:998, four with the green boxes and one with the yellow boxes   We can write the following SPARQL query to ask for all the suppliers of Part:998 sorted by their catalog price.\n#Suppliers of Part 998 (Red Fire Hydrant Cap) sorted by their catalog price PREFIX xsd: \u0026lt;http://www.w3.org/2001/XMLSchema#\u0026gt; PREFIX wd: \u0026lt;http://www.wikidata.org/property/\u0026gt; PREFIX schema: \u0026lt;http://schema.org/\u0026gt; PREFIX rdf: \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#\u0026gt; PREFIX dc: \u0026lt;http://purl.org/dc/elements/1.1/\u0026gt; select ?sup ?supName ?supCountry ?catPrice ?catQuantity ?prt ?prtName ?prtColor ?cat where { # Start with a ?prt that has id=998 get its name and color values ?prt dc:identifier \u0026#34;998\u0026#34;^^xsd:int . ?prt rdf:label ?prtName . ?prt schema:color ?prtColor . # Find all catalog items (?cat) with a reference to ?prt get their price and quantity values ?cat wd:hasPart ?prt . ?cat schema:cost ?catPrice OPTIONAL {?cat schema:quantity ?catQuantity .} # For any catalog item (?cat) find the vendor that supplies ?prt get their name and the country of origin ?cat wd:hasVendor ?sup . ?sup rdf:label ?supName . ?sup schema:country ?supCountry } ORDER BY ASC(?catPrice) You may consider the analogy between this query and the result set at Fig. 7 and the equivalent OrientDB SQL query and the result set from a Property Graph data model. The main differences are that in Property Graph data model you can traverse edges in both directions, (incoming, outcoming), the filtering part (where) in SPARQL is significantly longer, and the starting point is represented in a different manner (edge vs link).\n  fig7  Suppliers of Part 998 (Red Fire Hydrant Cap) sorted by their catalog price       Associations of Part:998 with Suppliers and their Catalog prices   We can view a graph representation, Fig. 8, of this SPARQL query and its result data set Fig. 7. In the same screen capture, Fig. 8, a many-to-many relationship is modeled with RDF triples. Supplier:1082 is associated with three parts (Part:991, Part:997 and Part:998) and Part998 is associated with four suppliers (Supplier:1081, Supplier:1082, Supplier:1083, Supplier:1084), see also Fig. 9. From a semantic point of view, Parts and Suppliers participate in associations with Inventory items (green boxes - Catalog:7, Catalog:9, Catalog:10, Catalog:11, Catalog:12 and Catalog:16). In contrast with the binary relations between Suppliers and Parts represented with directed edges in a Property Graph, see here, instead of an edge type we have explicit intermediate (bridge) nodes and instead of outgoing head (out) and incoming tail (in) we have two outgoing directional links (wd:hasPart and wd:hasVendor) from this intermediate node, e.g. Catalog/Inventory item to Supplier and Part. In such as case these outgoing directional links (wd:hasPart and wd:hasVendor) look like roles in a Topic Map binary association.\n/* 4 Associations of catalog part no 998 with supplier Ids and catalog prices */ Catalog07( Part998:HasPart, Supplier1081:HasVendor, 11.7:Cost ) Catalog11( Part998:HasPart, Supplier1082:HasVendor, 7.95:Cost ) Catalog12( Part998:HasPart, Supplier1083:HasVendor, 12.5:Cost ) Catalog16( Part998:HasPart, Supplier1084:HasVendor, 48.6:Cost )     A Many-to-Many Relationship between Suppliers and Parts modeled with RDF triples   Associative Model Although it has not become mainstream, we see associative model of data as an effort to enhance RDF data model in a new kind of DBMS. The logical layer of Sentences associative database management system may be regarded as comprising of only two tables: one for Items that represent Entities, Entity Types, Values and Value Types and one for Links that represent among other things Associations and Association Types ([Fig. 15], [Fig. 16]). Both Items and Links also represent meta-types and instances, which perform various functions in the database. Thanks to this simple consistent form of Items and Links, it is easy to write generic code that is capable of working with every type of data. Recording schema changes and transactions, a type system [Fig. 15], associative queries in the form of a request tree, business rules, data provenance, automated default data entry forms [Fig. 16] and many other features of Sentences DBMS were designed and implemented based on this generic metacode programming.\n    Types, Association Instances and their Properties       Types, Entity Instances and Data Entry Forms   In fact along similar principles Freebase collaborative knowledge base, now known as Google\u0026rsquo;s Knowledge Graph, was serving its users.\nBoth Freebase and Sentences added also reverse edges to their model. In Freebase notation, [Fig. 10] we can see that /film/film is /directed_by a /film/director and a /film/director has directed (/film) a /film/film.\n    Movies Data Model in Freebase   Bidirectional links allow a 360° view of every data item in the database. Directed edges in Property Graph share the same concept, see here. In the following three figures (Fig. 11, Fig. 12, Fig. 13) we present three alternative schema views for our Supplier-Part-Catalog database that we built on Sentences DBMS. Fig. 11 illustrates that it is possible to add attributes on the link. Fig. 12 shows that Supplier, Catalog and Part entities are sharing common attributes while in Fig. 13 they are directly connected with bidirectional links.\n    Association in R3DM According to R3DM Hypergaph Terminology, the objects of RDF literal triples, i.e. values, are HyperAtoms and the resources of RDF links are HyperBonds. Thus the RDF graph of Fig. 8 can be redrawn as a hypergraph with red nodes that play the role of HyperAtoms and green nodes that play the role of HyperBonds, see Fig. 14.\n    R3DM Hypergraph   This R3DM hypergraph figure above, Fig. 14, has been created from the execution of the following Wolfram Language code. You will notice that HyperAtom sets such as ha2-(catcost) and ha5-(catqnt) are attribute sets with value members that take part in the formation of Catalog records with instances that are drawn from hb2 set. Supplier instances are drawn from the other HyperBond set (hb3) and ha3-(sname), ha4-(scountry) are attribute sets with value members that describe the Suppliers. Instances from these HyperBond sets may share common values or associated with the same HyperBond. For example we have two suppliers, Supplier:1082 and Supplier:1081 that are located in USA or Catalog:11 and Catalog:16 entries that are associated with Part:998 and they both have the same quantity, i.e. 200 pieces of this part.\nha1={998,\u0026#34;Fire Hydrant Cap\u0026#34;,\u0026#34;Red\u0026#34;,7.2`,\u0026#34;lb\u0026#34;}; ha2={11.7,7.95,12.5,48.6}; ha3={\u0026#34;Acme Widget Suppliers\u0026#34;,\u0026#34;Big Red Tool and Die\u0026#34;,\u0026#34;Perfunctory Parts\u0026#34;,\u0026#34;Alien Aircaft Inc.\u0026#34;}; ha4={\u0026#34;USA\u0026#34;,\u0026#34;USA\u0026#34;,\u0026#34;SPAIN\u0026#34;,\u0026#34;UK\u0026#34;}; ha5={\u0026#34;400\u0026#34;,\u0026#34;200\u0026#34;,\u0026#34;200\u0026#34;}; hb1={\u0026#34;Part:998\u0026#34;,\u0026#34;schema:item\u0026#34;}; hb2={\u0026#34;Catalog:7\u0026#34;,\u0026#34;Catalog:11\u0026#34;,\u0026#34;Catalog:12\u0026#34;,\u0026#34;Catalog:16\u0026#34;}; hb3={\u0026#34;Supplier:1081\u0026#34;,\u0026#34;Supplier:1082\u0026#34;,\u0026#34;Supplier:1083\u0026#34;,\u0026#34;Supplier:1084\u0026#34;}; vstyle=Join[Thread[Join[ha1,ha2, ha3,ha4,ha5]-\u0026gt;Red],Thread[Join[hb1,hb2,hb3]-\u0026gt;Green]]; data=Join[ {\u0026#34;Part:998\u0026#34;-\u0026gt;\u0026#34;schema:item\u0026#34;}, Thread[\u0026#34;Part:998\u0026#34;-\u0026gt;ha1],Thread[hb2-\u0026gt;ha2], Thread[hb2-\u0026gt;hb3],Thread[hb3-\u0026gt;ha3], Thread[hb3-\u0026gt;ha4],Thread[hb2-\u0026gt;\u0026#34;Part:998\u0026#34;], Thread[{\u0026#34;Catalog:7\u0026#34;,\u0026#34;Catalog:11\u0026#34;,\u0026#34;Catalog:16\u0026#34;}-\u0026gt;ha5]]; Graph[ data, VertexLabels-\u0026gt;\u0026#34;Name\u0026#34;, VertexSize-\u0026gt;{{\u0026#34;Nearest\u0026#34;,0.15}}, VertexStyle-\u0026gt;vstyle, EdgeShapeFunction-\u0026gt;GraphElementData[{\u0026#34;CarvedArrow\u0026#34;,\u0026#34;ArrowSize\u0026#34;-\u0026gt;.02}], EdgeStyle-\u0026gt;Thick, GraphLayout-\u0026gt;\u0026#34;SpringEmbedding\u0026#34;, ImageSize-\u0026gt;{400.,Automatic} ] We can rewrite now the following four associations :\n/* 4 Associations of catalog part no 998 with supplier Ids and catalog prices */ CatalogID( catpid, catsid, catqnt, catcost) Catalog07( Part998, Supplier1081, 400, 11.70 ) Catalog11( Part998, Supplier1082, 200, 7.95 ) Catalog12( Part998, Supplier1083, 12.50 ) Catalog16( Part998, Supplier1084, 200, 48.60 ) Associations in this form greatly resemble tuples of Catalog relation, see TSV format, where the heading of this relation is usually stored in a data dictionary and Null marker indicates that a data value is absent from the tuple. On the contrary in case of RDF literal triples the predicate position signifies the object part of the triple and in RDF links Instances/Type of resources at subject and object positions are also signified by predicates such as (rdf:type). But in R3DM associations there is not any label on the edge that connects HyperAtoms or HyperBonds. Therefore the denotation of resources and literals, i.e. what they stand for, cannot be seen on this graph, Fig. 14. For example in Catalog12 association instance we have to know that the literal meaning of the value 12.5 is the Catalog Cost. Generally speaking, this is the granularity of data problem. How we represent a piece of information at atomic level and how we construct higher structures. R3DM/S3DM unifies three perspectives, semantics at the conceptual layer, representation at the symbol layer and encoding at the physical layer, in such a way that they are separable. R3DM/S3DM conceptual framework is based on the natural process of semiosis where the signified, i.e. concept, entity, attribute and the signifier, i.e. value, are referenced through symbols, i.e. signs, at discrete layers. The main difference with RDF data model is that these references are not in the form of URIs but they resemble IPs. For example the value 12.50 can be referenced by a 4D vector of the form {2, 8, 262, 1} where the first dimension is the database, the second dimension is the table (Entity), the third dimension is the field (Attribute) and the last dimension is a member of an attribute set.\nDiscussion Although this is not the space or the time to elaborate more on R3DM/S3DM associations it is important to mention that it is possible to escape from the predicate logic (owl#sameAs) on how to identify that two URI aliases refer to the same entity. Moreover the alternative paradigm of R3DM/S3DM offers a more attractive and efficient approach on data integration and heterogeneous data representation than bridging between RDF vocabularies with mapping predicates such as owl:equivalentClass and owl:equivalentProperty.\nWe foresee that the Internet of things will use a protocol with numerical reference vectors for data communication in a similar fashion to IP addresses that are used for connecting devices in a computer network. Hopefully one day it will become clear that the predicate part of RDF data model is causing more harm than good in the semantic interpretation and information representation.\nLast but not least, SPARQL query mechanism is heavily dependent on namespace vocabulary terms, especially predicate terms that connect resources and literals. To answer such queries, care must be taken to devise a suitable mechanism of indexes (e.g. spo, sop, pso, pos, osp, ops) to support RDF triple structure. Besides indexing, RDF edges by default are not bidirectional, therefore 360 degrees view and nodes navigation is problematic. In contrast with RDF, in R3DM/S3DM everything is bidirectionally linked and referenced with 4D numerical vectors and these are naturally used for indexing purposes. Instead of writing queries there is a functional way, i.e. you learn a single command with a standard number of optional or mandatory parameters, to filter the data space and retrieve any piece of information.\nInteractive and associative data exploration is the key, unique feature of Qlikview/Qliksense, one of the best data visualization and business intelligence software in the market today. Behind the scenes, columnar, binary indexing capability is the foundation for QIX Associative Data Indexing Engine. In the next part of our series we will apply Qlik associative technology on our toy dataset and we will demonstrate how we build the domain model and how we filter our data.\nAcknowledgements We have serialized our Supplier-Part-Catalogue example in Turtle and N-Triples syntax. Then we used AllegroGraph and GraphDB triple-store to create a repository and run queries on their SPARQL interfaces. All graph-based images of this article were displayed and captured on Gruff, an RDF visual browser that displays a variety of the relationships in AllegroGraph.\nCross-References  LinkedIn Published Posts LinkedIn Semantic Web Group LinkedIn Graph Databases Group LinkedIn Data Warehouse \u0026amp; Business Intelligence Architects LinkedIn Computational Semiotics LinkedIn Semantic Technologies LinkedIn Data Visualization LinkedIn Database \u0026amp; Data Store Professionals ★ NoSQL ★ NewSQL ★ Relational LinkedIn Database Developers and Architects Group LinkedIn Linked Data Web LinkedIn Mathematica Users LinkedIn Database Experts DZone Article  ","date":1482192000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1482192000,"objectID":"0baa31630eb04d4da144308919bbed13","permalink":"https://healis.eu/en/post/20161220/","publishdate":"2016-12-20T00:00:00Z","relpermalink":"/en/post/20161220/","section":"post","summary":"Part 4/6 of the series Associative Data Modelling Demystified","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Resource_Description_Framework","Association_(object-oriented_programming)","Serialization"],"title":"Association in RDF Data Model","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Wolfram Language EntityPropertyAssociation  R3DM Hypergraph Terminology   Property Graph  Property Graph Nodes Property Graph with Directed Edges Property Graph with Bidirectional Links Property Graph and Object-Oriented database   Association vs Edge Join vs Edge Summary Cross-References   Introduction In previous posts of this series, (Part-1, Part-2), we have seen several representations of the association construct. In this article we continue our investigation with the Graph Data model. Despite its mere representation as nodes and edges, the structure of this model and its implementation details varies a lot in Graph Databases. There is still a strong controversy and perhaps confusion on what makes a database, a Graph database and many are not fully aware that there exist other types of Graph Databases apart from Property Graph Database. Things get more complicated because the engine of a Property Graph Database is not the same kind of engine with either an RDF store or engines based on Topic Maps or Relational data model. Property Graph data model is neither close to Object Model, a data model that is found in Object-oriented database management systems. There are significant differences of the Property Graph data model at both the logical and the physical level with all other models and it has not been established yet as a standard. Which brings us to the question whether there is indeed a necessity for another data model standard based on the association construct to fill the space of Property Graph databases and bridge also the gap with other Semantic Web technologies, especially JSON for Linking Data. This question will not be answered in this post, we will make an attempt instead to give a formal definition of the association construct using the mighty Wolfram Language and compare it with RDF and Property Graph components and this will prepare also the ground for introducing our R3DM data model later on.\nWolfram Language EntityPropertyAssociation Real-world entities are another kind of symbolic expression that exists in latest versions of the Wolfram Language. You can get the values of specific properties for an Entity, if it exists in Wolfram Knowledgebase, world\u0026rsquo;s largest and broadest repository of computable information according to Wolfram. But you do not write a query to fetch the data, you use a functional approach instead. The network delay for a first time search on specific values of EntityProperties is minimal. For example:\nSocrates=Entity[\u0026#34;Person\u0026#34;,\u0026#34;Socrates::dnz7w\u0026#34;]; EntityValue[ {Socrates}, {gender,date of birth,place of birth,parents,children}, \u0026#34;EntityPropertyAssociation\u0026#34;] Notice the third argument of the EntityValue function here, EntityPropertyAssociation will format the output, Fig. 1, of this calculation as an association in which the specified entity is the key, and value is another nested association of properties and EntityProperties values.\n    Wolfram Language EntityPropertyAssociation   A boxed word is the symbolic Wolfram Language Knowledge Representation of a named entity of any type, (e.g. Person, City, Property), that is used as a handler to access records of information about that Entity that are stored in Wolfram Knowledgebase. The reader should realize how important this symbolic representation is in data modeling. Although the developer/user may compute a solution with a boxed CommonName, e.g. Socrates, behind the scenes a canonical name, e.g. Socrates::dnz7w, is used as the unique identifier for the Entity to disambiguate and to interpret user\u0026rsquo;s instructions.\nThis EntityPropertyAssociation representation extends Wolfram Language fundamental Association construct, and it is in accordance with Topic Map Association serialization that we discussed in the second part of our series. The following figure, Fig. 2, is from a previous example that is included in Part 1 of our series and depicts three associations of this kind in a Wolfram Dataset. Each association represents an Entity type instance ($PartI, $SupplierJ and $CatalogK) and for each instance the entity type ($Item, $Organization, $Inventory) is embedded as a key value pair together with other EntityProperties key-value pairs.\n    Three Associations in a Named-Row Dataset   Contrast this with mere tuples from the three tables of our relational database, Supplier, Part, Catalog. Semantically speaking, the three tuples cannot stand alone without the header of the relation body and their relation type. In addition to that observation, each value of either an EntityPropertyAssociation or member of a tuple, is always dependent on their sibling nodes. Therefore values cannot be handled in isolation.\n{ {998, \u0026#34;Fire Hydrant Cap\u0026#34;, \u0026#34;Red\u0026#34;, 7.2, \u0026#34;gr\u0026#34;}, {1081, \u0026#34;Acme Widget Suppliers\u0026#34;, \u0026#34;1 Grub St., Potemkin Village, IL 61801\u0026#34;, \u0026#34;ILLINOIS\u0026#34;, \u0026#34;USA\u0026#34;, 10}, {1081, 998, 11.7, 400, \u0026#34;2014-9-10\u0026#34;, True} } R3DM Hypergraph Terminology     A Hyperbond hyperlinked to HyperAtoms   The figure on the left, Fig. 3, illustrates a single EntityPropertyAssociation of Part no. 998 with its properties and values. According to Hypergraph theory, red nodes are hypernodes and the green node is the hyperedge where here connects a set of hypernodes. In R3DM we use the following definitions and terminology.\nAn EntityPropertyAssociation can be defined as an Association of entity\u0026rsquo;s attributes (properties) with values. Each attribute-value pair is represented on the hypergraph by a hyperatom. Therefore the general form of a hyperatom is a key-value pair. Each hyperatom is always connected bidirectionally to a hyperbond with a hyperlink. Normally hyperlinks do not have labels or direction. A hyperbond represents a complex structure, such as a tuple of a relation or instance of a class. The role of a hyperbond is to connect a set of hyperatoms. A hyperbond to hyperbond connection is also possible.\nTwo important observations:\n  You can easily spot similarities between R3DM hypergraph paradigm and JSON documents. A JSON object can be represented with a hyperbond and a field-value pair (property) can be represented with a hyperatom.\n  Entities, attributes (variables), and values each has its own type system in R3DM. These type systems will be analyzed methodically in another post but you can get a taste of what they look like here.\n  Property Graph We defined EntityPropertyAssociation and we got familiar with the terminology of R3DM hypergraph. We can now proceed to examine the analogy with the Property Graph data model.\nRecall that a property graph has vertices and edges where :\n  each vertex has\n a set of outgoing edges. a set of incoming edges.    each edge has\n an outgoing tail vertex. an incoming head vertex. a label that denotes the type of relationship between its two vertices.    vertex and edge have\n a unique identifier a collection of properties defined by a map from key to value.    We built a property graph data model for our Supplier-Part-Catalog example in OrientDB, a very popular, open-source, and free multi-model database.\nProperty Graph Nodes OrientDB allows both schema-full and schema-less creation of classes. Each class represents either a type of nodes or a type of edges on the graph. In the manner of a relational schema, we can add properties of a class with OrientDB SQL commands.\nCREATE CLASS Part EXTENDS V; CREATE PROPERTY Part.pid INTEGER; CREATE PROPERTY Part.pname STRING; CREATE PROPERTY Part.pcolor STRING; CREATE PROPERTY Part.pweight DOUBLE; CREATE PROPERTY Part.punit STRING; ALTER CLASS Part SHORTNAME P; Then we can populate the class with records, e.g. create a vertex (an instance of type Part) that represents Part no. 998 (Red Fire Hydrant Cap)\nCREATE VERTEX Part CONTENT {\u0026#34;pid\u0026#34;:998,\u0026#34;pname\u0026#34;:\u0026#34;Fire Hydrant Cap\u0026#34;,\u0026#34;pcolor\u0026#34;:\u0026#34;Red\u0026#34;,\u0026#34;pweight\u0026#34;:7.2,\u0026#34;punit\u0026#34;:\u0026#34;lb\u0026#34;} Property Graph with Directed Edges Now comes the tricky part, we want to associate Suppliers with Parts. Notice that in Property Graph data model there is not an associative entity to resolve a many-to-many relationship. We only have the concept of a directed edge that links one vertex with another vertex. Let us define the type of edge first.\nCREATE CLASS inCatalog EXTENDS E; CREATE PROPERTY inCatalog.catsid INTEGER; CREATE PROPERTY inCatalog.catpid INTEGER; CREATE PROPERTY inCatalog.catprice DOUBLE; CREATE PROPERTY inCatalog.catqnt INTEGER; CREATE PROPERTY inCatalog.catdate DATETIME; CREATE PROPERTY inCatalog.catchk BOOLEAN; ALTER CLASS inCatalog SHORTNAME C; In this OrientDB DDL inCatalog.catsid and inCatalog.catpid are superfluous, we added them for comparison purposes with the relational model. Records of edge type inCatalog contain record identifiers for the outgoing tail vertex and the incoming head vertex Fig. 11. Secondly, it is not specified in the schema that this type of edge, inCatalog, connects Suppliers with Parts, neither is specified any direction on how to link these two types. These are defined during the creation of an edge.\nOne way of creating inCatalog instances is to read each Catalog record from the table, get OrientDB record identifiers (RIDs) for the specific Supplier and Part and then execute OrientDB CREATE EDGE SQL command to create a bidirectional edge. For example:\nCREATE EDGE inCatalog FROM #19:0 TO #18:7 CONTENT {\u0026#34;catsid\u0026#34;:1081,\u0026#34;catpid\u0026#34;:998,\u0026#34;catprice\u0026#34;:11.7,\u0026#34;catqnt\u0026#34;:400,\u0026#34;catdate\u0026#34;:\u0026#34;2014-09-10\u0026#34;,\u0026#34;catchk\u0026#34;:true} Newcomers can easily get confused with Property Graph edges. This is because although the outgoing tail and the incoming head of the edge implies a directed graph, in practice we can traverse the graph bidirectionally, i.e. start from any node to reach another node independent of the direction of the edge.\n    A Many to Many Relationship on a Property Graph   In this screen capture, Fig. 4, of OrientDB graph canvas one Supplier is associated with three Parts and one Part is associated with three Suppliers. We observe that inCatalog edges are always from a Supplier to a Part. This is because we created edges this way, we could have created them equally in the opposite direction. Semantically speaking, both Supplier and Part participate in a Catalog association and their binary relation is not directed. In such a case Property Graph edges look like Topic Map binary associations. The label of the edge is the type and the roles of its members are played by the outgoing head (out) and incoming tail (in), Fig. 5.\n    Directed Bidirectional Edge   Property Graph with Bidirectional Links Hence the bidirectional nature of the edge can be seen in two ways.\nFirstly the out and in links can be considered as one-to-one relationship of an edge with vertices. One Supplier/Part is referenced by Many Catalog items. The fields that are linked are the RID of Catalog with the RID of Part or Supplier, Fig. 11. This type of direct linking is similar to the many-to-many relationship with a join-table, Fig. 6.\n    Many-to-Many relationship with direct links on Associative Entity (edge)   Secondly, on the one side of the relationship, i.e. on the vertex we have the link set of outgoing/incoming edges, Fig. 8 and Fig. 9. For example, many Catalog items (LinkSet) have One Supplier/Part, Fig. 7.\n    Many-to-Many relationship with sets of direct links   The following query returns a list of both the outgoing edges for Big Red Tool and Die Supplier, see Fig. 4, and the list of associated Parts, Fig. 8.\nselect @rid As Supplier, out_inCatalog as Catalog, out() As Part, sid As supplierID, out().pid As partID, scountry, scity from 19:1     Set of Outgoing Edges for Supplier   In a similar fashion, we can ask for the list of incoming edges to Part no. 998, see Fig. 4, and the list of Suppliers that provide that Part, Fig. 9\nselect @rid As Part, in_inCatalog as Catalog, in() As Supplier, pid As partID, in().sid As supplierID, pname, pcolor from 18:7     Set of Incoming Edges for Part   The set of outgoing edges from the Supplier and the set of incoming edges to Part no. 998 have a common edge, 17:11, that connects this Supplier with this Part, see Fig. 4.\nProperty Graph and Object-Oriented database We could have implemented bidirectional edges on top of OrientDB Document data model using Link, Link list, Link set data structures and the CREATE LINK SQL command. If you take also into account its class inheritance, schema-full, and SQL methods features, that brings us pretty close to the object-oriented database model. Objects, in turn, may reference one another and therefore form a network graph. A relationship, in particular, is an association between two persistent objects, each of a specific type. In Intersystems Cache, relationships are binary, i.e. defined between two classes and bidirectional, i.e. both sides of a relationship must be defined by creating a pair of complementary relationship properties, one in each class. Two-way reference property in both classes, collection in \u0026ldquo;one\u0026rdquo; side and simple reference in \u0026ldquo;many\u0026rdquo; side are analogous to the link set of outgoing/incoming edges in a vertex and the out/in links in edge of Property Graph data model, Fig. 8, Fig. 9, Fig. 11.\nAssociation vs Edge If we take these \u0026ldquo;Three Associations in a Named-Row Dataset\u0026rdquo;, Fig. 2, and create a graph with analogy to the Property Graph data model, we can see that $PartI (green node), $CatalogK (red edge), and $SupplierJ (blue node) are hyperbonds, i.e. they are EntityProperty associations and they are connected with hyperlinks i.e. undirected bidirectional links, [Fig. 10].\n    Three Hyperbonds connected with Hyperlinks   There are three main advantages using R3DM hypergraph instead of a Property Graph:\n  There is a uniform treatment of records for both entities (nodes) and associative entities (edges). In R3DM these are symbolically represented by hyperbonds. Hyperlinking hyperatoms or hyperbonds is not the same as connecting property nodes with property edges.\n  Entities, attributes and values are completely separable. There is not an Entity-Attribute neither an Entity-Attribute-Value \u0026lsquo;Silo\u0026rsquo; structure. This will become clear at a later post on the associative characteristics of R3DM. Here it is enough to say that the collection of properties defined by a map from key to value are enclosed in the structure of property graph node/edge. On the contrary in data models such as RDF, Topic Map and our R3DM hypergraph each key-value pair (hyperatom) can be a single instance and the same value can be linked to more than one classes (hyperbonds) or instances of the same class, see the discussion here\n  Under the hood, in a Property Graph each regular edge between two nodes creates another record. You cannot link one node record directly to another node record, you must always cross the edge record either from its tail or from the head. But with a hyperlink things are different, you do not need to load any edge record to resolve the other part of the relationship, no edge document is created. Thankfully, OrientDB provides such a data structure, it is the Lightweight Edge. We have implemented R3DM in OrientDB using Lightweight Edges and it will be fully described in an upcoming post.\n  Join vs Edge Now, examine this relational database sql query here with the following comparable OrientDB Property Graph query:\n/* Suppliers of a Red Fire Hydrant Cap sorted by their Catalog price */ select out as supRID, out.sname as supName, out.scountry as supCountry, catprice as catPrice, catqnt as catQuantity, in as prtRID, in.pname as prtName, in.pcolor as prtColor, @rid as catRID from inCatalog where in.pid=998 order by catPrice     Suppliers of a Red Fire Hydrant Cap       Suppliers of a Red Fire Hydrant Cap on OrientDB Graph Canvas   This OrientDB SQL query is clearly more compact and with a faster performance, because there are no JOIN operations anymore. We can get back the result set represented with a Wolfram Dataset structure, Fig. 11. Instead of having supplier IDs and part IDs, these are now replaced with OrientDB record IDs (RIDs). We have also added another column at the end which is the RID of the edge record, i.e. Catalog record.\nCheck also this Topic Map graph representation. The main difference is that these Catalog relationships and the Part tuple are drawn explicitly on the Topic Map and all values of properties are visible on the same graph. In this Property Graph, Fig. 12, only one of the enclosed properties of any node or edge type is displayed.\nSummary We can summarize the critical points of our investigation in Property Graph data model:\n We introduced R3DM Hypergraph as the harbinger of R3DM associations. R3DM hypergraph is based on Wolfram EntityPropertyAssociations and extends Property Graph with hyperbonds that represent in a uniform way nodes and edges; while hyperatoms are hyperlinked to hyperbonds and are analogous to a property-value pair. From this perspective:   There is not an Entity-Attribute or Entity-Attribute-Value \u0026lsquo;Silo\u0026rsquo; structure. Hypelink, i.e. bidirectional edge without a record, can link directly hyperatoms to hyperbonds and hyperbond to hyperbond   In all the data models we have described so far in our series, every value is accessible only by knowing its context. Thus far, values are either dependent on a relation variable and attribute in a Relational model, or they come as field-value pairs in the object of a Document model / Object-Oriented model, or you have Topic Type and Topic Roles in Associations of Topic Map model, or they form property-value pairs that are enclosed in the node structure of Property Graph model. Even in the triplets of RDF model, that we will examine in the next article, you have an entity-property-value context.\n  Generally speaking, in Property Graph data model schema specifications for Node and Edge types are weak and it is not easy to define referential integrity and handling of many-to-many relationships. OrientDB object-oriented features alleviate that problem.\n  In a Property Graph data model edges are always directed but we can traverse them in both ways, i.e. they link bidirectionally nodes of the graph. In this sense, the label of the edge is comparable to the Topic type of a binary association in Topic Map data model; whereas, the labels out and in that signify the outgoing head and incoming tail are the roles of its members.\n  In object-oriented database model, it is possible to represent Property Graph edge with a two-way reference property in both classes, collection in \u0026ldquo;one\u0026rdquo; side and simple reference in \u0026ldquo;many\u0026rdquo; side.\n  There are no JOIN operations in Property Graph data model. The edge record associates each half of the relationship with direct links.\n  We will examine separately RDF data model, one of the W3C standards for the Semantic Web. From our perspective, RDF and Property Graph are in conflict for reasons that we will discuss in the next article of our series. It seems the rivalry of these two data models is in succession of an older one between RDF and Topic Map.\nCross-References  DZone Article LinkedIn Published Posts LinkedIn Topic Maps Community Group LinkedIn Graph Databases Group LinkedIn Database \u0026amp; Data Store Professionals Group LinkedIn MUMPS and Cache Development Group LinkedIn Mathematica Users Group LinkedIn OrientDB Users Group LinkedIn Semantic Web Research Group  ","date":1473724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1473724800,"objectID":"584a07134e62ec6ca34b4e74b93978da","permalink":"https://healis.eu/en/post/20160913/","publishdate":"2016-09-13T00:00:00Z","relpermalink":"/en/post/20160913/","section":"post","summary":"Part 3/6 of the series Associative Data Modelling Demystified","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity"],"title":"Association in Property Graph Data Model","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Associations in Topic Map Data Model  Tuples to Associations SQL to Topic Map Filtering Topic Map Serialization R3DM Type System in Wandora   Summary Cross-References   Introduction In the previous article of this series we examined the association construct from the perspective of Entity-Relationship data model. In this post we demonstrate how Topic Map data model represents associations. In order to link the two we continue with another SQL query from our relational database\nSELECT suppliers.sid, suppliers.sname, suppliers.scountry, catalog.catcost, catalog.catqnt, parts.pid, parts.pname, parts.pcolor FROM suppliers INNER JOIN (parts INNER JOIN [catalog] ON parts.pid = catalog.catpid) ON suppliers.sid = catalog.catsid WHERE (( ( parts.pid ) = 998 )) ORDER BY catalog.catcost;     This will fetch all the rows of a result set where we are looking for the minimum catalogue price of a Red Fire Hydrant Cap and who is the supplier that manufactures this part. The reader will notice that apart from the deficiensy of the nested JOINs, (see here), we had to formalize our search in SQL language in order to get back our result. Wouldn\u0026rsquo;t be nice if we could engage the user in a codeless style of search, independent of the business case. Let us see the difference with the Topic Map data model first.\nAssociations in Topic Map Data Model Perhaps there is not a better software tool out there to introduce you to Topic Maps than Wandora information management application, see how.\nTuples to Associations Our first step is to build a Topic Map data model from the SQL result set above. With Wandora this is easy thanks to its powerful set of extractors. Here we use an Excel adjacency list extractor to convert each spreadsheet row of this Excel file to a Topic Map Association.\n    Tuples of a Relation - Wandora Associations   In the right panel of the screen capture, you may see that we have four associations of type Tuple. They are all sorted by the catcost column. This is the role that cells of this column play in the Tuple association. In our example each Tuple is an instance of the Excel class with a maximum of 8 members and each member plays a role in the association. You may agree that this Topic Map model view of data looks already very familiar to the user that is accustomed with tables.\nBut behind the scenes Topic Map associations are notably different from the n-ary tuples of the relational model. In the left panel of our screen capture you can see all the data that are extracted from the spreadsheet. Notice that no data value is repeated. Each association is constructed from single instance values and this also means that associations are sharing values among them. We can visualize the network of associations by switching to Wandora\u0026rsquo;s Graph topic panel. From the left panel, we select the minimum price of the part, which is 11.7 and then we expand this node on the Graph topic panel. This way the first association will be drawn that includes as members all the other values that this cell is associated with. One of them is USA and plays the scountry role. We can right click on the value and expand again the nodes (associated members). Two associations are displayed now on the graph that share four common values between them.\n    Two Associations in the Graph Topic Panel of Wandora. Brown labels indicate the type (Tuple) of association and the role (sname) of one of its members   SQL to Topic Map Filtering Another important observation we should make at this point is that instead of writing any query to fetch those suppliers that are located in USA we simply filtered the table based on this value. We are able to do this, because Topic Map data model works with single instance values that are linked bidirectionally. Accordingly, data is always normalized and the main operations of the relational algebra such as set operations, selection and projection, can be performed. For instance, filtering associations that have USA member is equivalent to selecting rows from SQL. Moreover, the user can traverse interactively the graph starting from any value without writing a single line of code.\nTopic Map Serialization To understand better the underlying structure of data in the previous example, we have serialized a Topic Map in LTM format. Dropping this LTM file into an empty topic panel, we invoke the import function of Wandora. Then we expand the topic tree and double click on the 998 cell. The following screen capture looks pretty much the same as the one we have generated from extracting the Excel spreadsheet above. The main difference is that now we have two association types, one for Catalogue tuples and another for Part tuples. Part 998 participates in five associations (tuples) in total, four of them are from Catalogue table and one from Part table. We have also taken a minimum number of members, i.e. fields (columns), for our associations to keep it simple.\n/* 1 Association of catalog part no 998 with \u0026#34;Red\u0026#34; and \u0026#34;Fire Hydrant Cap\u0026#34; */ Prt( prtName08:pname, prtID08:pid, prtColorRed:pcolor ) /* 4 Associations of catalog part no 998 with supplier Ids and catalog prices */ Cat( prtID08:catpid, supPrice18:catcost, supID18:catsid ) Cat( prtID08:catpid, supPrice14:catcost, supID14:catsid ) Cat( prtID08:catpid, supPrice16:catcost, supID16:catsid ) Cat( prtID08:catpid, supPrice12:catcost, supID12:catsid )      Associations of part no. 998   Because of the single instance feature of Topic Maps, If we switch to Wandora\u0026rsquo;s Graph topic panel we can visualize these associations.     Associations of part no. 998   R3DM Type System in Wandora We expand our previous example with tuples from three tables and a rich type system, also known as Ontology or database schema.\n    Associations of part no. 998, Supplier Associations and Symmetric Binary Predicates   We start again our exploration from the data item with the value 998. There is one association, labeled Part8, representing a tuple from Part table (998, \u0026ldquo;Fire Hydrant Cap\u0026rdquo;, Red, 7.2, lb) and four of them, labeled Cat08, Cat12, Cat13, Cat17, representing tuples from the Catalogue table (see result set above). Further on, USA suppliers are expanded with two more associations, labeled Supplier1 and Supplier2. The two previous graphs are combined in a single one. We can also observe other associations with only two members, we call these symmetric binary predicates (SBP). SBPs are used to define a prototype for our R3DM type system. For example, the member value 7.2 of association Part8 is of type Part Weight (Instantiation Predicate) and Part Weight is hyponym of Weight (HyperHypo Predicate). The reader may compare this graph with this Entity-Relationship diagram and realize that we have both instances (values) and classes, i.e. Entities and Attribues, on the same graphics diagram. Not only that, but most important our type system is generic and we are able to merge and classify data from multiple datasets. Alternatively, Wandora\u0026rsquo;s Topics tree panel on the left part of the image displays a hierarchical structure for types and instances. Those that are expanded can also be seen on the graph panel.\nThis is a good place to introduce our R3DM type system. It is presented here for the first time and it will be fully analyzed in a forthcoming post of this series. In the next graph we have expanded several nodes of our hierarchical type system. For instance, Catalogue, Catalogue Part, Catalog Supplier are represented as groups (Grouping Predicate) of Wandora class which is the Root of the Topic Tree. Each of these groups is also a type (Instantiation Predicate) for a set of instances that represent associations. We have Cat01-16 for Catalogue associations, Part1-9 for Part associations, and Supplier1-4 for Supplier associations.\n  R3DM Type System in Wandora   We have defined six SBPs in total, these are grouped under the Symmetric Binary Predicates group. Five of them have been configured with special symbols to be used in Wandora\u0026rsquo;s Topic tree. Each one of them is expanded on Wandora\u0026rsquo;s graph panel to show the pair of its association members. The Holonomy-Meronomy Predicate has been used to connect association members to association type.\nWandora class has also five group members, we have already seen four of them. The fifth one is a Variable Type group and it has four sub-categories, Categorical Variable Types, Meta Variable Types, Numeric Variable Types and Time Variable Types. Each of these specialized types has instances and each instance can be further specialized. For example, starting from bottom to top :\ngr isInstanceOf Part Unit isHyponymOf Unit isInstanceOf Categorical Variable Type isHyponymOf Variable Type isMemberOf Wandora class\nIn this way all values are single instances of some type and they are hyperlinked to build associations (hyperedges). Each association is also an instance of some type.\nSummary We conclude our discussion of Association in Topic Map data model. Topic map data model is profound and at the same time powerful and simple to start building higher constructs to model real things. Association in Topic Map is a first class citizen. Here is a list of interesting features we discussed in this post :\n  We can define single instance Topics (and/or values) and then associate them.\n  Association is a bidirectional n-ary relation with Type and Roles embedded.\n  Because of 1. and 2. we can traverse the graph from any point to any other point simply by filtering nodes and edges.\n  We can display both Topic/Association types and instances on the same graph\n  Data from multiple data sets cab be merged with R3DM type system that is based on symmetric binary associations.\n  There are other powerful features of Topic Maps related to associations such as merging and information resources that are attached to topics, i.e. occurrences, we reserve time and space to highlight them in a forthcoming article.\nWe will continue our demonstration with the Catalogue-Part-Supplier example. This time we will examine how associations can be represented on the Graph Model of OrientDB DBMS.\nCross-References  LinkedIn Published Posts LinkedIn Semantic Web Research Group LinkedIn Topic Maps Community Data Science Central DZone - Database Section  ","date":1472774400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1472774400,"objectID":"d1510bf6970b8b223e844a3b0fdab877","permalink":"https://healis.eu/en/post/20160902/","publishdate":"2016-09-02T00:00:00Z","relpermalink":"/en/post/20160902/","section":"post","summary":"Part 2/6 of the series Associative Data Modelling Demystified","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Ontology_(information_science)","Topic_Maps","Serialization"],"title":"Association in Topic Map Data Model","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Supplier-Part-Catalogue Dataset The ER Data Model  Association and Associative Array Wolfram Language - Association JSON Serialization Association vs Relation Wolfram Language - Relation Data Redundancy Structured Query Language (SQL)   Summary Cross-References   Introduction In early 2009 an increasing number of non-relational DBMS started to appear on the scene. They were based on data models such as Column, Document, Key-Value, Graph and Multi-Model. At about the same time, big corporations in IT industry were concerned with data processing of large and complex data sets. Big data movement was a major driving force to re-examine whether current DBMS were sufficient to cope with the new requirements on data processing. More specifically the four V\u0026rsquo;s of Big Data, i.e. volume, variety, velocity and veracity, put an increasing demand in major companies and organizations. This had as a result a reinvestigation on what DBMS technology to apply. Many started realizing that physical representation of data on the disk or in memory and data modeling are key factors on how you build or integrate parts of your IT solution.\nWhile most players in the IT sector adopted Graph or Document databases and Hadoop based solutions, Hadoop is an enabler of HBase column store, it went almost unnoticed that several new DBMS, AtomicDB previous database engine of X10SYS, and Sentences, based on associative technology appeared on the scene. We have introduced and discussed about the data modelling architecture and the atomic information resource unit (AIR) of AtomicDB. Similar technology has been the engine power of Qlikview, a very popular software in Business Intelligence and Analytics, since 1993. Perhaps it is less known to the reader that the association construct is a first class citizen in Topic Map semantic web standard and it is translated to (RDF), the other semantic web standard. In other posts of this series we can see how it is possible to implement Associative Technology in multi-model graph databases such as OrientDB, in object-relational DBMS such as Intersystems Cache and Oracle or build the engine for in-memory processing with Wolfram Mathematica. In this article, we introduce the concept of association from the perspective of Entity-Relationship (ER) data model and illustrate it with the modelling of a toy dataset.\nSupplier-Part-Catalogue Dataset Our dataset is a collection of three related database tables. Two of the tables, Supplier ( TSV, XLSX ) and Part ( TSV, XLSX ), represent and describe Entity Types, i.e. Relations. The third one, Catalogue ( TSV, XLSX ) is the associative entity, a.k.a. bridge table, junction table, join table, etc. The typical case where data for the bridge table is captured is from a business inventory where each item is recorded with its unit price and a quantity in stock. Such information is stored in our Catalogue table, together with a date the item record was modified and a flag that indicates inspection of the stock.\nThe ER Data Model Quite often (ER) Data Model is confused with the Relational Data Model. The reader should become familiar with the following equivalent terminology.\n   ER Data Model Relational Data Model     Entity Type (Set) Relation (Table, Base relvar)    Heading - ordered set of attributes    Body - set of n-tuples, extension of a predicate   Entity\t(instance, member) Tuple (ordered set of attribute values)       Value Set Type name (data type)   Value Attribute value       Relationship set View (Result set or Derived relvar)   Relationship (association)        Attribute (function) Free variable of a predicate   mapping of Entity Set or Attribute name of the relation (column)   Relationship Set to Value Set ordered pair of attribute name and type name    In this classic paper, \u0026ldquo;The Entity-Relationship Model - Toward a Unified View of Data\u0026rdquo; Peter Chen defines relationship as an association among entities. In the same paper entity and relationship are illustrated as hypergraphs. In particular, Fig. 2 at page 13 and Fig. 3 at page 14 show how an instance from an Entity/Relationship set is linked to either values or other entities. Although Peter Chen did not describe these fundamental constructs of his data model with Hypegraph terms, it can be easily seen in these captured figures that a specific entity or relationship form hyperedges with other entities or values that play the role of hypernodes.\n    (Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges       (Emploee):Ei at Fig.2 and (PROJECT-WORKER):Ri at Fig.3 form hyperedges   Association and Associative Array We extend the definition of association in the (ER) data model to cover both Entities and Relationships. In the aforementioned paper, Chen formally defines attribute as a function which maps a given entity to a single value (or a single tuple of values). He also mentions that relationships have their own attributes whose meaning depends on the associated entities. The (key,value) pair of an Associative array, a.k.a. map, symbol table, or dictionary, captures this functional operation of attribute.\nWolfram Language - Association Wolfram Language is using Association fundamental construct to represent an associative array. The following three Wolfram Language associations represent a relationship of a Catalog instance with a Supplier instance and some Part instance from our toy dataset.\n(* Supplier Association *) \u0026lt;|supID-\u0026gt;1081, supName-\u0026gt;\u0026#34;Acme Widget Suppliers\u0026#34;, supAddress-\u0026gt;\u0026#34;1 Grub St., Potemkin Village, IL 61801\u0026#34;, supCity-\u0026gt;\u0026#34;ILLINOIS\u0026#34;, supCountry-\u0026gt;\u0026#34;USA\u0026#34;, supStatus-\u0026gt;10|\u0026gt; (* Part Association *) \u0026lt;|prtID-\u0026gt;998, prtName-\u0026gt;\u0026#34;Fire Hydrant Cap\u0026#34;, prtColor-\u0026gt;\u0026#34;Red\u0026#34;, prtWeight-\u0026gt;7.2, prtUnit-\u0026gt;\u0026#34;gr\u0026#34;|\u0026gt; (* Catalogue Association *) \u0026lt;|supID-\u0026gt;1081, prtID-\u0026gt;998, catPrice-\u0026gt;11.7, catQuantity-\u0026gt;400, catDate-\u0026gt;\u0026#34;Wed 10 Sep 2014\u0026#34;, catCheck-\u0026gt;True|\u0026gt; What we are missing in this representation are the hyperedges, i.e. the nexuses that link together hypernodes. According to hypergraph terminology, the edge that connects a hyperedge to a hypernode is called hyperlink or connector. You may think of these hyperlinks/connectors as hash fields but we need another identifier for the hash key, i.e. an identifier for the instance. We could have used supID, prtID or a combination of these two but we prefer to define new identifiers for hyperedges. The main reason for this is that in principle we want to design a uniform way of addressing and identifying both hyperedge and hypernode instances at a low-dimensional, e.g. (2D,3D,4D), space. If we encode this way, it is possible to avoid namespace problems. In this post we use names to compare the graph with figures from Peter Chen\u0026rsquo;s paper.\nWe may also connect hyperedges, e.g. we can add a \u0026ldquo;type\u0026rdquo; hyperlink that maps instances to classes, a \u0026ldquo;vendor\u0026rdquo; hyperlink that maps a Catalog instance to its Supplier instance and a \u0026ldquo;stockItem\u0026rdquo; hyperlink that connects Catalog instance to Part instance. In Wolfram Language it is relatively easy to make a graph of these Associations. We colorized the graph according to the different data types we have, i.e. hyperedges, strings, doubles, integers, dates, and booleans, Fig.4.\n    Hyperedges are displayed in red, strings are in grey, doubles in lightblue, integers in green, dates in lightgreen and boolean in black   JSON Serialization Another very popular representation for Association is JSON Serialization. Those associations we described above can be serialized with the following format.\n{ \u0026#34;$PartI\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;$Item\u0026#34;, \u0026#34;prtID\u0026#34;: 998, \u0026#34;prtName\u0026#34;: \u0026#34;Fire Hydrant Cap\u0026#34;, \u0026#34;prtColor\u0026#34;: \u0026#34;Red\u0026#34;, \u0026#34;prtWeight\u0026#34;: 7.2, \u0026#34;prtUnit\u0026#34;: \u0026#34;gr\u0026#34; }, \u0026#34;$SupplierJ\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;$Organization\u0026#34;, \u0026#34;supID\u0026#34;: 1081, \u0026#34;supName\u0026#34;: \u0026#34;Acme Widget Suppliers\u0026#34;, \u0026#34;supAddress\u0026#34;: \u0026#34;1 Grub St., Potemkin Village, IL 61801\u0026#34;, \u0026#34;supCity\u0026#34;: \u0026#34;ILLINOIS\u0026#34;, \u0026#34;supCountry\u0026#34;: \u0026#34;USA\u0026#34;, \u0026#34;supStatus\u0026#34;: 10 }, \u0026#34;$CatalogK\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;$Inventory\u0026#34;, \u0026#34;supID\u0026#34;: 1081, \u0026#34;prtID\u0026#34;: 998, \u0026#34;catPrice\u0026#34;: 11.7, \u0026#34;catQuantity\u0026#34;: 400, \u0026#34;catDate\u0026#34;: \u0026#34;2014-09-10\u0026#34;, \u0026#34;catCheck\u0026#34;: true } } Catalogue, Parts and Suppliers tables are also available in JSON format.\nAssociation vs Relation Although the logical view of Chen\u0026rsquo;s (ER) data model and his popular diagrammatic technique incorporates Entities, Relationships, Attributes and Values, at the physical layer of any relational DBMS we find records, i.e. Entities or Relationships are ordered tuples. A set of these ordered tuples that have the same heading, is called body. This header is another ordered tuple with attribute names. Theoretically speaking the body and the header of a table make the Relation. In practise the header is separated from the body and located at the database catalog together with other metadata for the schema of the database. SQL standard specifies a uniform mean to access this catalog.\nWolfram Language - Relation The List fundamental construct of Wolfram Language can be used to represent a Relation. An extensive analysis of various representations and transformations on the constructs of the Relational data model in Wolfram Language can be found here.\n(* Part Relation with a header and three tuples (body) *) { {\u0026#34;pid\u0026#34;, \u0026#34;pname\u0026#34;, \u0026#34;pcolor\u0026#34;, \u0026#34;pweight\u0026#34;, \u0026#34;punit\u0026#34;}, {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;Red\u0026#34;, 15.5, \u0026#34;lb\u0026#34;}, {992, \u0026#34;Smoke Shifter End\u0026#34;, \u0026#34;Black\u0026#34;, 3.75, \u0026#34;lb\u0026#34;}, {993, \u0026#34;Acme Widget Washer\u0026#34;, \u0026#34;Red\u0026#34;, 142.88, \u0026#34;kg\u0026#34;} } The reader will notice that in both Associative array and Relation representations, the cell of a table, i.e. the value of an attribute, is always functionally dependent on the description of Attribute and Entity/Relationship. It cannot stand on its own without these semantic references. Moreover, for the Relation representation, the exact order of values has to be maintained together with any missing (NULL) values.\nData Redundancy Relational databases are usually normalized to eliminate duplication of information and ensure referential integrity. This is especially recommended in one-to-many relationships. Normalization involves arranging attributes in tables, nevertheless in a relational database we cannot escape from data redundancy completely. For example if we take the unit attribute of the normalized Part table above we can see that values are still repeated. Most important the schema of a relational database is too rigid and cannot be easily modified without breaking normalization and compromising referential integrity.\nStructured Query Language (SQL) Performing queries of data in a relational database is highly dependent on these two factors we briefly mentioned above, the physical representation of data on the disk and the normalization procedure. One of the main bottlenecks with SQL is the natural join relational operator, counterpart of logical AND. An SQL Join is a means for constructing a result set combining columns from two (or more) tables by using values common to each. The more tables you join and the bigger the size of each table the more time it takes to consolidate the data of the view. On the contrary in many graph databases, connected nodes, i.e. record instances, are directly linked to each other. Each node, contains a list of pointers of its edges, therefore avoiding look-ups. In fact you are not searching for records, you are traversing connections instead. This may dramatically reduce the speed of constructing the result set of a query.\nFor demonstration and comparison purposes we provide such a JOIN sql query for our toy database together with an ER diagram of the database schema,Fig.5 and the result set on a Microsoft Access table view, Fig.6.\nYou may also download a Microsoft Access, accdb file format, database to experiment with.\n    Image illustrates the ER diagram of database schema       Image illustrates the ER diagram of database schema   SELECT Catalog . catsid , Catalog . catpid , Suppliers . sname , Parts . pname , Catalog . catcost , Catalog . catqnt , Catalog . catdate , Catalog . catchk FROM Suppliers INNER JOIN ( Parts INNER JOIN [Catalog] ON Parts . pid = Catalog . catpid ) ON Suppliers . sid = Catalog . catsid ORDER BY Suppliers . sname DESC , Catalog . catcost DESC ; One can immediately notice the complexity of SQL query language on the nested SQL Join constructs.\nSummary In this article we described several limitations of the ER model that we wish to overcome, in brief these are:\n Functional dependence of values Data redundancy Join operations  In the next article of our series we continue with an international industry standard for information management and interchange, the Topic Maps Data Model (TMDM). Associations in TMDM are similar to tuples but they have types. Each member of an association plays a role that is defined explicitly. In fact this is in full agreement with Chen\u0026rsquo;s Entity-Relationship diagrams (see Fig.1 and Fig.2 above). Chen discusses the role of an entity in a relationship and the role of an attribute in a relation and he considers distinct constrains on allowable values for a value set and constraints on permitted values for a certain attribute.\nTMDM view is edifying because it divides information space in two layers. At the conceptual level we have topics that can be associated and represent any subject that can be conceived by a human being. At the occurrence level we have addressable information resources that describe those subjects.\nCross-References  LinkedIn Published Posts LinkedIn Update Data Science Central DZone - Database Section  ","date":1472083200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1472083200,"objectID":"6ab37fbf4d1d6e6b91aa4105f27325cc","permalink":"https://healis.eu/en/post/20160825/","publishdate":"2016-08-25T00:00:00Z","relpermalink":"/en/post/20160825/","section":"post","summary":"Part 1/6 of the series Associative Data Modelling Demystified","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Entity–relationship_model","Serialization","Relational_model","Association_(object-oriented_programming)","Associative_array","Relational_database"],"title":"Relation, Relationship and Association","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction The Problem About Knowledge The Know-How is how you know The \u0026ldquo;I know something or someone\u0026rdquo; phrase The \u0026ldquo;I know this is true\u0026rdquo; phrase Epilogue Cross-References   Introduction Perhaps there is not a better phrase to start this post than the Socratic paradox,\n All I know is that I know nothing\n This is typical of the great gap that exists between Eastern and Western way of thinking about fundamental concepts such as information, knowledge and wisdom. In my opinion we have become too ignorant and arrogant boasting about our knowledge that we cannot even understand the basics of it. This is all too evident in Information/Computer Science fields. The well-known Data-Information-Knowledge-Wisdom (DIKW) pyramid has become a popular shorthand representation for the data to information to knowledge to wisdom transformation. As a result of this we, the information/computer scientists, often hear about knowledge representation and inference, knowledge extraction, knowledge management and knowledge organization.\n  Data-Information-Knowledge-Wisdom   The Problem This mechanized perception and realization of knowledge can easily lead people to believe that machines can become wise and they can become wise too by following this transformation process. The main appeal to this common belief is that we are completely ignorant on how these words, i.e. information, knowledge and wisdom were defined and used in the past by our ancestors. Most important is the fact that we have replaced their meaning and definition with other words that are inferior and subservient as symbols. An example of this phenomenon is the definition of the word information. Inform comes from the Latin verb informare, which literally means to give form, or to form an idea of. Where the ancient and modern Greek word for information is πληροφορία, which transliterates (plērophoria) from πλήρης (plērēs) “fully” and φέρω (phorein) frequentative of (pherein) to carry through1. You may realize how different becomes your thinking by using one or the other definition of the word and perhaps how narrow is your thinking if you are missing completely the older ancient Greek definition of the word information. But this was the subject of a previous post of mine.\nAbout Knowledge In this post we focus on knowledge. How do we define knowledge ? According to Stanford Encyclopedia of Philosophy:\n it is common in epistemology to distinguish among three kinds of knowledge. There\u0026rsquo;s the kind of knowledge you have when it is truly said of you that you know how to do something—say, ride a bicycle. There\u0026rsquo;s the kind of knowledge you have when it is truly said of you that you know a person—say, your best friend. And there\u0026rsquo;s the kind of knowledge you have when it is truly said of you that you know that some fact is true\n The Know-How is how you know The first definition of knowledge, i.e. the know-how, is most evident in our learning process. It is about acquiring knowledge through practicing and experiencing the difficulties and different situations that may arise. If you want to become, let\u0026rsquo;s say a neurosurgeon, reading books, watching videos and attending classes in a medical school is not going to make you a neurosurgeon. If you do not have hands-on practical training on a operating room with your colleagues, under the supervision of an experienced neurosurgeon, it is most probable that you are going to kill your first patient. Learning to perform a surgery simply means you know how to do it. Wikipedia definition on knowledge is very enlightening: \u0026ldquo;knowledge is a familiarity, awareness or understanding of someone or something, such as facts, information, descriptions, or skills, which is acquired through experience or education by perceiving, discovering, or learning\u0026rdquo;. Therefore, it seems we are are paying too much attention and we emphasize the awareness and understanding of facts and information part instead of focusing on the experience, education and learning part. Thus we are only informed about things, such as processes, events, organizations, people, but deeply inside we do not know anything about them, i.e. know how is how you know.\nThe \u0026ldquo;I know something or someone\u0026rdquo; phrase How you know him or this or that ? Most often we mean that it just happens, by coincidence, to meet him once in person, or we heard about something, or we read about this or that. And especially for people, I am sure that many of you think that they know someone well, until it comes the day you understand how wrong you are. This \u0026ldquo;know\u0026rdquo; perception of ours is what I was referring to as the inferior subservient purpose. This is also the case when information and computer scientists claim that they know how to extract or manage or organize knowledge. It just means they are capable of modeling, composing, structuring, storing, analyzing information in a clever way and they are simply aware of this fact. By analogy of our aforementioned statements information becomes degraded too. There is endless effort in our field on how to structure and model the data, i.e. what form to give the data, this is the core idea of information technology.\nThe \u0026ldquo;I know this is true\u0026rdquo; phrase Information technology is about Database Management Systems and digital libraries of information (data), and about building clever tools to do statistics and predictions. Let me take another example. Today we are able to browse a huge \u0026ldquo;Knowledge Base\u0026rdquo; such as Wolfram Alpha and ask what is the distance of Moon from Earth, to receive the current result of 399383 kilometers. But do I know anything about that distance except this number figure ? Have I traveled that distance ? Have I measured that distance ? What is the source of information ? Is it authoritative ? Why is there such a distance and is it constant ? What purpose it serves ? These are typical question just to make you think that stating a fact is only the tip of the iceberg. Take another example, financial instability, let us assume we can predict such a phenomenon, does this mean we know anything about it ?\nEpilogue We think we know, we know nothing, and even those that are in the process of knowing something, eventually they admit that they are still learning about it. The more you know something, the more you understand how deep your knowledge about this thing can become. Famous soloists are aware of this process. They are rediscovering day by day more about the quality of sound they can produce with their instrument. But it is not any more about the technical know-how, it is about knowing how to express themselves through the instrument and feel more the music they play. In my opinion knowledge is a very deep process that takes place inside of us. It can assist you to your search for the path to wisdom, but it will not make you wiser. I believe wisdom is part of the spiritual endeavor. We are fools if we believe our knowledge, not to say our technology, makes us wiser than our ancestors. Wisdom is about how you lead your life, how you live your life and depends on the utmost goal you strive to achieve in this life. For such a reason Socrates was a wise man and he really meant that \u0026ldquo;All I know is that I know nothing\u0026rdquo;.\nCross-References  LinkedIn - Published Post    The ancient Greek origin of the word information - Wikipedia Etymology section of the term Information was updated by HEALIS with the quoted text above on the 13th of June 2014\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1469750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1469750400,"objectID":"dbf516eca807be30e8887174f0163495","permalink":"https://healis.eu/en/post/20160729/","publishdate":"2016-07-29T00:00:00Z","relpermalink":"/en/post/20160729/","section":"post","summary":"Table of Contents  Introduction The Problem About Knowledge The Know-How is how you know The \u0026ldquo;I know something or someone\u0026rdquo; phrase The \u0026ldquo;I know this is true\u0026rdquo; phrase Epilogue Cross-References   Introduction Perhaps there is not a better phrase to start this post than the Socratic paradox,\n All I know is that I know nothing\n This is typical of the great gap that exists between Eastern and Western way of thinking about fundamental concepts such as information, knowledge and wisdom.","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array"],"title":"Know-How is How you Know","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Overview This is a new release of OrientDB RESTful API in Mathematica, enhanced with new commands such as addIndex, addInstance and addEdge used especially in Graph Database modeling. Most important the functional set of API commands is built in a concise and succinct way. Database operations are now grouped in four main categories, GET, UPDATE, DELETE, and ADD, a.k.a. (GUDA), that resemble Create, Read, Update, and Delete, a.k.a. (CRUD), major functions that are implemented in relational database applications. The number of functional arguments have been also significantly revised and classified as optional and mandatory depending on the command that they are applied.\nIt seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   The implementation of the package is based on the HTTP RESTful SQL commands of OrientDB. The Mathematica API project, can be extended to cover also the programming operations of other DBMS, in an analogy of the functional patterns and operations of this package.\nExamples These are a few CRUD examples that are transformed to GUDA in order to compare the functional with the declarative form of SQL operations.\n# Create bidirectional linking, i.e. association CREATE EDGE isOwnerOf FROM 12:0 TO 16:0 ODBapi[com-\u0026gt;\u0026#34;addEdge\u0026#34;, class-\u0026gt;\u0026#34;isOwnerOf\u0026#34;, from-\u0026gt;\u0026#34;12:0\u0026#34;, to-\u0026gt;\u0026#34;16:0\u0026#34;] # Read records with projection and filtering SELECT @rid, DOB FROM Person WHERE lastName=\u0026#34;Smith\u0026#34; ODBapi[com-\u0026gt;\u0026#34;getRecords\u0026#34;, prjkt-\u0026gt;\u0026#34;@rid, DOB\u0026#34;, class-\u0026gt;\u0026#34;Person\u0026#34;, propnam-\u0026gt;\u0026#34;lastName\u0026#34;, propval-\u0026gt;\u0026#34;Smith\u0026#34;] # Update with restrictions UPDATE Person set age=57 WHERE age\u0026lt;60 ODBapi[com-\u0026gt;\u0026#34;updValues\u0026#34;, class-\u0026gt;\u0026#34;Person\u0026#34;, propnam-\u0026gt;\u0026#34;age\u0026#34;, propval-\u0026gt;\u0026#34;57 where age\u0026lt;60\u0026#34;] # Delete all the records of a class (table, vertex, document, ....) DELETE VERTEX Person ODBapi[com-\u0026gt;\u0026#34;delRecords\u0026#34;, class-\u0026gt;\u0026#34;Person\u0026#34;, all-\u0026gt;\u0026#34;True\u0026#34;, construct-\u0026gt;\u0026#34;VERTEX\u0026#34;] Installation The DBAPI application project is open source and free. You are most welcome to contribute in the Github repository of the project that can be found here\n  Download the latest release of DBAPI from here\n  Download and run this Mathematica Notebook code to test the installation of the package\n  Testing The OrientDB API Package can be tested with Demo 1-Test API Commands and Demo 3-Schemaless vs Schemafull Operations Notebooks.\nConclusion This functional RESTful API can be served as a prototype for a uniform, universal treatment of data language (UDL) that will be independent of the DBMS implementation. Commands and parameters can become more efficient and execution can be simplified if we take on account the hierarchical relationship of Server, Database, Class, Property and Record containers. We foresee that it will be far more intuitive, user-friendly, and easier to program with a functional style than the declarative commands of its SQL ancestor.\nDocumentation Pages If you have already installed the DBAPI project, then you can search Wolfram Mathematica documentation for DBAPI. This is your starting point for browsing the documentation. For demonstration purposes, we have included here the following documentation pages in pdf format for the ODBapi\n","date":1455062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1455062400,"objectID":"6556c849ab39b447e2e36a45e6fab230","permalink":"https://healis.eu/en/post/20160210/","publishdate":"2016-02-10T00:00:00Z","relpermalink":"/en/post/20160210/","section":"post","summary":"SQL CRUD RESTful Transformations in Mathematica and OrientDB","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system"],"title":"From Declarative to Functional Database Operations","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Table of Contents  Overview Features Installation Testing Documentation Pages   Overview Packages in this project extend Wolfram Language with commands that are related to data management and especially generic database management. There is a basic Utilities Package that is used in transformations between Wolfram Language constructs such as List, Rule, Association, and Dataset, and external serialization standards such as JSON and comma-separated values (CSV) files. On top of that package we are porting RESTful APIs from various web services through URLFetch into Wolfram Language building commands with arguments that specify options with rules of the form name-\u0026gt;value. An example of such a RESTful API is the OrientDB HTTP API and the OrientDB package.\nFeatures  Enhanced OrientDB HTTP RESTful API functionality with powerful new commands for Mathematica users Fully documented functions and packages in the native documentation system of Wolfram Mathematica Build interactive demos, powerful presentations and applications in the vast environment of Wolfram Language with nearly 5,000 built-in functions at a fraction of time it would require to build, test, and support these, in other programming languages. Debug easily your applications by dynamic programming and interactive sessions Deploy your application anywhere thanks to Wolfram Universal Deployment System Create multiple visualization schemes, network topologies, data mining and search indexing algorithms powered by dynamically configured GUIs for the non-experienced user.  Installation  You can download the latest release of DBAPI from here Download and run this Mathematica Notebook code to test the installation of the package  Testing  The Transformations on Wolfram expressions Mathematica Notebook is a demonstration of functions in the Utilities package The OrientDB API Package can be tested with Demo 1-Test API Commands and Demo 3-Schemaless vs Schemafull Operations Notebooks  Documentation Pages If you have already installed the DBAPI project, then you can search Wolfram Mathematica documentation for DBAPI. This is your starting point for browsing the documentation.\nFor demonstration purposes, we have included here the following documentation pages in pdf format for the ODBapi and ODBgetFieldAttributes functions of the OrientDB Package\nIt seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!  \n","date":1451520000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451520000,"objectID":"0d7981cf0854d467a7c60e766874a338","permalink":"https://healis.eu/en/project/wolfram_apis/","publishdate":"2015-12-31T00:00:00Z","relpermalink":"/en/project/wolfram_apis/","section":"project","summary":"Wolfram Language packages that extend functionality for RESTful APIs. It has been fully tested and documented for OrientDB multi-model database.","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system"],"title":"RESTful API in Mathematica","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Overview The main function of this Mathematica package, ODBapi, is built on top of the URLFetch built-in function. OrientDB RESTful HTTP API commands are ported into Wolfram Language through URLFetch and then ODBapi commands are built with arguments that specify options with rules of the form name -\u0026gt; value. This package has also other utility functions especially implemented for OrientDB. OrientDB Package is part of the Wolfram API application project. Visit the official page of the project for installation and testing instructions.\nDiscussion OrientDB is a multi-model, NoSQL, DBMS based on 16 years of research. Orient Technologies, the company that supports the product, has published more than 60 releases and there is constant and frequent adaptation to user demand and the latest technology available. OrientDB is Open Source and FREE for any purpose. Good news are that this OrientDB Mathematica Package is also Open Source and Free.\nOrientDB is using an SQL-like programming language for managing data. We consider that this can be a turning point for innovation, adaptation, and extension of SQL language. Although SQL is widely used and familiar to many programmers, we argue that its use becomes complicated on graph data models. OrientDB SQL, i.e. OSQL, has been extended to cover operations on Graph Model, but with the cost of adding extra SQL commands. This level of detail can be hidden from the user, and a more abstracted language can be built to cover both the Graph Model and the underlying Document Model.\nMoreover, normally SQL consists of a Data Definition Language, Data Manipulation Language and Data Control Language. In OrientDB there are 34 different commands divided into six categories. Four of them are related to the manipulation of data structure (Graph,Schema,Index,Database) and two of them concern operations (Create-Read-Update-Delete and Utility).\nThere is some analogy of OSQL with the ODBapi function of the OrientDB Package. We are overloading the function with multiple definitions that are derived from the use of optional and mandatory arguments. This differentation is based on the commands (Add, Del, Get, Update, Import/Export, Login/Logout) and the various data structures (Server, Database, Class-Vertex-Edge, Property, Record, Document, Value). See the documentation page below for more information.\nWe argue that this effort to transform the OrientDB SQL set of commands to a function with parameters is a good start for a uniform, universal treatment of data language (UDL). Most important in such a design are: the parameter for the basic operation (ADD, DEL, GET, UPD, LNK, IRT, LOG), and the parameter for the type of construct e.g. Database, Class, Property, Record, and Value.\nWith that guideline in mind, SELECT becomes GET, INSERT and CREATE become ADD, TRUNCATE AND DELETE become DEL, UPDATE and ALTER become UPD. The current OrientDB package needs more programming effort to reach the state we described. But we foresee that it will be far more intuitive, user-friendly and easy to program than its SQL ancestor.\nConclusion Most of the functionality of OrientDB HTTP-JSON API is embedded in Mathematica. The user is able to work with OrientDB database in the native Wolfram Language environment. Wolfram API application project in general combines fundamental bult-in data structures, List, Rule, Association and Dataset of the Wolfram Language with the native JSON permanent storage, retrieval and manipulation mechanism of OrientDB database. The project is open source and free, therefore it can be downloaded from those interested in building Mathematica application projects and those interested in porting data from RESTful services and NoSQL databases into Mathematica.\nDocumentation Pages For demonstration purposes, we have included here the following documentation pages in pdf format for the ODBapi and ODBgetFieldAttributes functions of the OrientDB Package\nIt seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!  \n","date":1451433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451433600,"objectID":"06139f423f4059abafee053ca58ff1e3","permalink":"https://healis.eu/en/post/20151230/","publishdate":"2015-12-30T00:00:00Z","relpermalink":"/en/post/20151230/","section":"post","summary":"Overview The main function of this Mathematica package, ODBapi, is built on top of the URLFetch built-in function. OrientDB RESTful HTTP API commands are ported into Wolfram Language through URLFetch and then ODBapi commands are built with arguments that specify options with rules of the form name -\u0026gt; value. This package has also other utility functions especially implemented for OrientDB. OrientDB Package is part of the Wolfram API application project. Visit the official page of the project for installation and testing instructions.","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system"],"title":"OrientDB Mathematica Package","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Application_programming_interface"],"content":"Features  Enhanced AtomicDB current API functionality with powerful new commands for Mathematica users Build interactive demos, powerful presentations and application in the vast environment of Wolfram Language with nearly 5,000 built-in functions at a fraction of time it would require to build, test, and support these, in other programming languages. Debug easily your applications by dynamic programming and interactive sessions Create multiple visualization schemes, network topologies, data mining and search indexing algorithms powered by dynamically configured GUIs for the non-experienced user.  ADBM Demo Version Installation Here is some Mathematica Notebook code to test the installation of the package .dll\n Unzip .DLL file Check $LibraryPathand find out the exact location of $UserBaseLibrary Place the DLL file under $UserBaseLibrary Execute the rest of the code above.  If you succeed, a new window with the title \u0026ldquo;AtomicDB Output Window\u0026rdquo; will be opened. The API package has been loaded. You can close all the windows.\nADBM Demo Version Testing  Download and Run Mathematica Notebook Demo Version of ADBM or view the file in a pdf format That will open automatically another Mathematica Notebook file to output the result of computation. View the output file in a pdf format  ADBM Professional Version Comparison  Compare Mathematica Notebook Demo version testing file with the testing of ADBM professional version, view that file in a pdf format. Compare Mathematica Notebook Demo Output with that of ADBM professional output, view that file in a pdf format  AtomicDB AddOn Professional Version makes it a lot easier to get the same result; it boosts functionality and programmability !\nADBM Pro Version Includes  Full Set of API Primitive Instructions Powerful Enhanced Commands Output Commands for any type of AtomicDB API objects Transformation Commands for any type of AtomicDB API objects Type Checking of Commands with new Mathematica Test Predicates Get Data By Key or By Value from Native Mathematica Structures  Contact us to discuss your needs and learn more about the ADBM Pro version we use for our consultancy services and solutions we offer on top of this Add-On.\n","date":1444348800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1444348800,"objectID":"26fffa90579ebb64aca468de8e6d91c3","permalink":"https://healis.eu/en/post/20151009/","publishdate":"2015-10-09T00:00:00Z","relpermalink":"/en/post/20151009/","section":"post","summary":"AtomicDB API in Mathematica","tags":["Programming","Software","Wolfram_Language","Application_programming_interface","Database","Database_management_system"],"title":"AtomicDB Mathematica AddOn (ADBM)","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Quick History Review Summary of technology achievements  Database management system and data architecture The identity crisis solution Schema, Type System, Ontology Type Checking Included Types Disambiguation Mechanism Complex/Compound Value Types (CVTs) and Relationships Blobs Mechanism Full Access Control and Auditing mechanism Fully web-based user interfaces and applications MQL - The Metaweb Query Language   Conclusion   Introduction I have spent a lot of time studying in detail and experimenting with Freebase, and I am truly disappointed to see such a great collective effort to suddenly disappear from the software development scene without a good reason. I will justify this, but first let me discuss a bit about what is freebase for those that are not aware of the project.\nFreebase, in my opinion, is currently the best collaborative information management system ever built. According to Wikipedia, \u0026ldquo;It is an online collection of structured data harvested from many sources, including individual, user-submitted contributions. Freebase aims to create a global resource which allows people (and machines) to access common information more effectively\u0026rdquo;.\n  Quick History Review  In 2000 Danny Hillis first described his idea for creating a \u0026ldquo;knowledge web\u0026rdquo; which he called Aristotle ! In 2003 the project known as \u0026ldquo;The Metaweb\u0026rdquo; begins, inside Applied Minds On October 2006 the One True Graph is born On July 16th 2010 Metaweb is acquired by Google On 30th of June 2015 Google plans to shut down completely the service. It is already in read-only mode  Summary of technology achievements  Freebase counts twelve years of focused development effort by a strong dedicated team of experts. Freebase counts nine years of online editing with superb web-based client APIs and GUIs Freebase, Google, have defined and implemented state of the art technology in collaborative information management. Do consider the following topics just for a start :  Database management system and data architecture The most important IT asset is their proprietary Graphd database. Some information have been disclosed to the public in the past, but of course the database itself is not going to be released or opened for inspection.\nGraphd encodes everything as a tuple. Every structure and construct such as entity type, entity instance, property, data types, domain, namespace, ontology you name it, are constructed from tuples. The very first layer of abstraction that is created on top of this is the object-link that implements RDF kind of statements in Freebase. Every item in freebase is either a link or an object. And you can get ALL the links to or from any object. Defining a single primitive construct as a building block is one of my R3DM semiotic principles in data modelling abstraction. Topic Maps data model (TMDM) follow the same kind of logic, where everything is a topic and every other construct is built with topics. In RDF/OWL fundamental construct is the triplet, in Graph databases you have the node, in key-value stores you have the key-value primitive.\nThe identity crisis solution The identity crisis, that is still a problem in the linked-data world, has a fair solution in Freebase with not a single URL-based namespace identifier but with three kinds of identifiers that each plays a different role :\n Under the hood GUIDs that are written internally in Graphd database Long user friendly, human-readable, IDs Short Machine IDs that cover the whole lifecycle of anything recorded in the database, i.e. track changes, solve merging/splitting issues, etc.  Schema, Type System, Ontology A flexible generic schema, that covers any other ontology based on top of it with only four hierarchical containers.\nNamespace \u0026mdash;\u0026gt; Domain \u0026mdash;\u0026gt; Types \u0026mdash;\u0026gt; Properties This is the most generic, plain, T-Box you can define, with just four levels. Pause for a moment here and take a very careful read on the following. Are you familiar with the following fundamental hierarchies in Computer science ?\n Namespace - Package -Class -Object (OOP) Database - Schema -Table -Row (RDBMS) Domain - Type -Property -Instance (Ontologies and XML)  This is not a coincidence, and there is a very good reason that we naturally create abstractions based on this hierarchy. The very first person that came up with this astonishing observation is inventor Ron Everett and AtomicDB\u0026rsquo;s under the hood encoding structure (Environment, System, Context, Item) is the heart of their system. This is not the space or the time to cover that in more detail, it suffices that S3DM/R3DM semiotic conceptual model can offer an adequate explanation on the abstraction/reference mechanism behind the scenes.\nType Checking In freebase every property, i.e. bidirectional link between two items, by the way this is also a fundamental technology novelty of AtomicDB, stay tuned…., knows exactly what entity types to expect.\nIncluded Types They have implemented a kind of multiple inheritance mechanism, such that one type with its properties can automatically included within another type. Included types makes it possible to create any kind of hierarchical structure where it can be referenced. Most important you can easily create custom types based on previously defined types.\nDisambiguation Mechanism That is based on both the namespace and disambiguating properties in identifying similarly-named topics. A score is also calculated to rank the items in conflict\nComplex/Compound Value Types (CVTs) and Relationships You can define new data types, e.g. use a dated integer for measurements. You can also define mediator type of nodes between the source and target of the original simple relationship. No black nodes and other such RDF/OWL crap in freebase.\nBlobs Mechanism In freebase you can also store large objects, i.e. text/binary stream.\nFull Access Control and Auditing mechanism Every user action is recorded inside freebase. They have defined Unix like access control on anything, i.e. user, user group, permissions. It is possible to request a full history on any item that is inside the database\nFully web-based user interfaces and applications If you want to attract easily new, inexperienced, users, then you must have the best ever built user interface suited for your purpose and Freebase-Google have managed to do that. You can access everything with a few clicks of a button. You can view everything in a well-presented hierarchical or table like format. You can build your queries online and save them as objects in the database, then you can simply access them with a permanent, tiny URL. Likewise, you can program your applications and save them like objects in the database.\nMQL - The Metaweb Query Language Last but not least, get your hands dirty with a truly magnificent piece of programming art in Freebase, their MQL query/update mechanism. It is based on pattern matching. Programmers and even advanced, non-expert users can define easily a query pattern and take back result in popular JSON formatted string. You can limit or sort results, you can ask for ordered collection items, you can specify optional directives and constrains and pattern matching with operators. Finally results have a numerical relevancy score, this is another Google\u0026rsquo;s secret technology similar to the full implementation of page ranking technology. For example you can get a ranked list of the most notable topics with a given name.\nConclusion This is certainly not an exhausted list of best of breed Freebase features but I hope you have read enough about the technology to make your own judgement on why Google shuts down completely their freebase service. Their one page announcement does not say much about it. It is not signed by any Google-Freebase authority persons. In my opinion, the reason explained there to all of us that embraced that project is a sham and is asking for reproach. Most of us knows that Google\u0026rsquo;s knowledge graph, 2012, that enhances Google search engine with semantic information is based on Freebase.\n  Let met state clearly that I welcome Google\u0026rsquo;s decision to make contributions to Wikidata project but I do not understand why they have to shut down completely Freebase in doing that. It is going to take a long time to reach the level of experience that users already have with Freebase. And what about the curated data of many people and the projects they have built on top of it ? What about all these technological advances I described in this post, how one will be able to see how they operate and make a comparison with other projects ?\nFor a start, I think Wikidata is a new project, that is built on a far worse fundamental data architecture than Freebase. Nevertheless I acknowledge that there are many good ideas and efforts to share. But, it makes no sense to eradicate such a historical project as Freebase in order to continue development on a newcomer.\nSo, what other alternatives exist in this area ? One is the DBpedia project, purely RDF based linked-data project, that started in 2007. More recent proprietary systems are:\n Pool-Party semantic suite, also RDF linked-data based, Kamala a Topic-Map based web application, Siren Investigative Intelligent Platform  Neverthless I anticipate that sooner or later you should expect a unicorn in semantic based information management that will simply shutter and unify all the rest. The reason I believe this is going to happen is because none of these companies have an efficient underlying fundamental data architecture. In this other dimension, in the twilight zone, there is not any player in the market.\n  ","date":1433808000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1433808000,"objectID":"ca783bb9885f06c27a57a76b653c474c","permalink":"https://healis.eu/en/post/20150609/","publishdate":"2015-06-09T00:00:00Z","relpermalink":"/en/post/20150609/","section":"post","summary":"Freebase, the best collaborative information management system ever built","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array"],"title":"Why Google shuts down Freebase ?","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":null,"content":"Information The origin of the word information reveals its use. Inform comes from the Latin verb informare, which literally means to give form, or to form an idea. Form is the mold, the container, that is used to give shape, to molten the content. When computer scientists were designing and constructing the first digital computer, at the same time digital information was given birth and shape. Modern computers operate with memory chips and those are mere containers of storing sequences of 0s and 1s.\nPlērophoria The above interpretation and use of the word information is typical of western culture way of thinking. Although it is convenvient to keep things in boxes, Eastern philosophers used to think differently. The ancient and modern Greek word for information is πληροφορία, which transliterates (plērophoria) from πλήρης (plērēs) “fully” and φέρω (phorein) frequentative of (pherein) to carry through.\n It literally means \u0026ldquo;bears fully\u0026rdquo; or \u0026ldquo;conveys fully\u0026rdquo;. In modern Greek the word Πληροφορία is still in daily use and has the same meaning as the word information in English 1\n This contrasting use and interpretation of the word plerophoria traces its roots back to Socrates, Plato, and Aristotle’s theory of semiosis. In this regard every word plays the role of a symbol, i.e. sign that can be interpreted to communicate information to the one decoding that specific type of sign. There is an intimate and inseperable connection of the signified, i.e. the concept whose meaning the interpretant attempts to decode, with the signifier, i.e. sign’s physical form such as the sound of a word.\nEvery bit of digital information, i.e. 0 or 1 assimilates this triadic relationship. Bits are symbols signified as true or false taking the form of input voltage (signifier). The infinite combination of sequences of such symbols gives us the power to represent anything digitally. Their meaning depends on how we interpret these sequences, as numbers, letters, sounds, color, or anything else that can be encoded. The form of the signifier is not limited to that of a mere container that stores a sequence of 0s and 1s. It is a fully functional level of abstraction connected to higher and lower levels by applying recursively the theory of semiosis until we reach CPU’s binary level.\nThe Turing Machine One-tape Turing machine according to Hopcroft and Ullman can be formally defined as a 7-tuple. Elements of this tuple are members of three distinct sets. A non-empty set of tape alphabet symbols, e.g. {0, 1}, a non-empty set of states, e.g. {A, B, C, HALT} and a set of state transitions e.g. {L, R}. Turing machine reads the tape symbols and executes a sequence of instructions according to a state table. Although this is not the space and time to adapt the theory of semiosis on the Turing machine we can clearly see an analogy. The tape symbol plays the role of a sign, the signified instruction is executed according to the interpretation given by the state table, and there is the physical form it takes as a printed text symbol on a white square of a paper tape. You can apply the same logic to the set of states and the set of transitions because these are symbols (signs) too; they can be interpreted and realized in some other physical or non-physical form.\nR3DM/S3DM Abstraction Mechanism In digital representation of information we can define a chain of interpretations, representations and realizations that are built in a consecutive order. This chain of semiosis reveals the mechanism that we can use to build higher levels of abstraction. At each step the symbol that is used to link together the signifier with the signified can become a fundamental unit, i.e. signifier to build the next level of abstraction. Thus we can move in two directions, we can generalize or we can specialize.\nCross-References  LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria LinkedIn - 20150523 Article - Plerophoria vs Information    Wikipedia, the Etymology section of the term Information was updated by user Healis with the quoted text above on the 13th of June 2014\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1432339200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432339200,"objectID":"a7364af80cb6663a5748513a9140c1cb","permalink":"https://healis.eu/en/post/20150523/","publishdate":"2015-05-23T00:00:00Z","relpermalink":"/en/post/20150523/","section":"post","summary":"The ancient Greek origin of the word information","tags":["Data_model","Abstraction_(software_engineering)","Information"],"title":"Plerophoria vs Information","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Overview 1. Functional Representation of Number 3 - The Sign (Representation) 2. Interpretation of \u0026ldquo;three\u0026rdquo; or 3 - The Signified (Resource) 3. Storage of \u0026lsquo;3\u0026rsquo; - The Signifier (Realization) Mathematica Notebook Cross-References   Overview In Part 2 of this series we introduced the Atomic Information Resource (AIR) data model of the AtomicDB database management system. In this part we present a simple but extensive example on various representations of number three using the poweful Mathematica functions and the unique features of Mathematica notebooks. We relate these with the three-faceted abstraction mechanism in S3DM/R3DM.\n1. Functional Representation of Number 3 - The Sign (Representation) Functional representation is the core operation of R3DM. Everything is represented as a function that is mapping values from one domain to another. You may view functions, as transformations. This is also how they operate in Wolfram Language. They transform expressions from one symbolic form to another.\nIn this section we investigate the various forms that a symbol related to number \u0026lsquo;3\u0026rsquo; can take. In R3DM this is the sign that is used to signify something at a higher level and at the same time it is used to symbolize an internal representation, a realization.\n Display Format Internal Representation String vs Symbol Representation String vs Numeric Representation Entity Representation  2. Interpretation of \u0026ldquo;three\u0026rdquo; or 3 - The Signified (Resource) The Wolfram Language provides a uniform mechanism, the Interpreter function, for specifying how input of different types should be interpreted. Interpretations can involve either structural or semantic conversions. The strings that appear in $InterpreterTypes are the possible first arguments to Interpreter.\nGenerally speaking interpretation is closely related with the assignment of meaning to any expression or concept. But in computer science an interpreter is a computer program that executes instructions. In Wolfram Language the interpreter is involved in the evaluation of an expression. In R3DM any interpretation is directly linked to the signified, the semantics of any information resource. In this section we define our own interpretations:\n Interpretation of a unicode string e.g. \u0026ldquo;τρια\u0026rdquo; as 3 Interpretation of a numeral e.g. \u0026ldquo;III\u0026rdquo; as 3 String vs Interpretation Evaluation of an expression with user-defined interpretations  3. Storage of \u0026lsquo;3\u0026rsquo; - The Signifier (Realization) Finally in this section we elaborate on the analysis of data types and the encoding, decoding mechanisms to store various representations of \u0026lsquo;3\u0026rsquo;. First we will compare atomic and complex data types. We can view data types as containers of a specific type of content:\n The Container (Form) - Content (Value) Duality Encoding and Decoding of Container - Content  We present an Image container (symbol) realized in Mathematica as a raw array of bytes (visual representation), and a Sound container (symbol) realized in Mathematica as a list of sound amplitude levels samples (aural representation).\nMathematica Notebook Here is the full article printed from this Mathematica Notebook\nIt seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   Cross-References  LinkedIn - Published Article  ","date":1432339200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432339200,"objectID":"c32abb7ef8f1702592b8b55417b1a620","permalink":"https://healis.eu/en/post/20150523_part3/","publishdate":"2015-05-23T00:00:00Z","relpermalink":"/en/post/20150523_part3/","section":"post","summary":"Part 3/3 - Towards a New Data Modelling Architecture","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Interpretation_(model_theory)","Representation_(mathematics)"],"title":"The number '3' and The Three-Faceted Abstraction Mechanism in R3DM","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Preface Background Information  AtomicDB Evaluation   Entity-Attribute-Value \u0026lsquo;Silo\u0026rsquo; Structure  Table form XML Form JSON Form   Signified-Sign-Signifier Alternative Paradigm  AtomicDB Computational Semiotic Analysis in R3DM   An AtomicDB Working Example  Terminology Draw Model Add Model Get Model Add Concepts Get Concepts Add Collections Get Collections Add Data Values Get Data Values   Assimilation of a Table Review and Discussion Cross-References   Preface The content of this article is a mixture of these three LinkedIn posts, Towards a New Data Modelling Architecture - Part 2, Atomic Information Resource, and AtomicDB Architecture in R3DM. We also used the full content of the original source from this Mathematica notebook. It is worth mentioning that the term AtomicDB, at that time, was used to signify both the brand-name and the database engine of a company that is now re-branded as X10SYS. R3DM, a vendor-neutral conceptual framework for data modeling, is sharing several fundamental architectural design principles with AtomicDB.\nIn Part 1 of this series we talked about the main constructs of the Relational and Entity-Relationship data model. In this article we present a computational semiotic analysis of AtomicDB that is based on R3DM and we focus on explaining with an example the universal AIR unit that we will meet again on forthcoming posts of this series.\nBackground Information The AtomicDB data model we describe has a long history behind it. Searching at Google for patents with the title \u0026ldquo;Data base and knowledge operating system\u0026rdquo; or with the title \u0026ldquo;Data management architecture associating generic data items using reference\u0026rdquo; we find several documents that are filed in the year 2003 from the inventor Ron Everett. The same year a \u0026ldquo;proof of concept\u0026rdquo; for this invention was successfully demonstrated with a use case of managing a 50+ milion records of spare/repair part requirements for US Navy ships. Today AtomicDB is a fully fledged database management system that is based on Ron Everett\u0026rsquo;s patented associative data items architecture. According to the vendor several pilots are currently running under big corporations and University research establishments.\nAtomicDB Evaluation The author of this article has been an evaluator of AtomicDB with full access to test GUIs, APIs and web services of their system. In particular he explored their C# API functionality for developers. In order to make tests interactive and efficient most functions of their API have been ported to Wolfram Language using the NETLink C# interconnectivity package. Function calls and other expressions that you see here are based on AtomicDB Mathematica API that is not included with the publication of this article. The Wolfram Language notebook is included for reference purposes.\nEntity-Attribute-Value \u0026lsquo;Silo\u0026rsquo; Structure The Entity-Relationship model is universally accepted as the means to extend the relational model in order to give meaning to relationships. For our database example in Part 1 we can draw the following ER diagram.\n  Many-to-Many Relationship  depicts an association among the three entities of our database, Parts, Suppliers and Catalog, and shows the datatypes of their attributes. This is the classic many to many relationship between Parts and Suppliers where the Catalog is the associative entity, also known as the bridge table or join table. Primary and foreign keys are also specified for the names of the attributes that play that role   From a semantic point of view, similar diagrams are in need from users that want to express business processes. But when we reach the implementation stage software engineers have to marry business requirements with the technical constrains of the database system hence the ER diagram you see. This is known as \u0026ldquo;The Model\u0026rdquo;, a conceptual view of the user on data. The ER version of the model has several limitations, due to the architecture of RDBMS. One important consideration is that each attribute remains enclosed in the table structure; and in the case the same attribute appears in another table, it has to be repeated. In our example above, the primary key pid of Parts is repeated as a foreign key catpid in Catalog. The difficulties that arise in data aggregation due to this limitation are substantial.\nThe relational and the entity-relationship model made a huge impact in the IT world for nearly half a century. But during this long period of standardization it meant also one thing, everyone had to comply with the rules and requirements of the model. Everyone had to think in terms of Entity-Attribute-Value or Subject-Predicate-Object as it is known in the RDF semantic model. Programming languages have been affected too from this monolithic way of thinking. Although it proved to be advantageous to program with classes and objects, it created an artificial problem of how to map these onto persistent data structures on the disk, also known as the object-relational impedance mismatch problem.\nKnowledge representation frameworks did not escape from this path. Ontologies expressed in OWL followed the same paradigm with classes, attributes, and values. Serialization methods such as JSON (object-name-value) and XML (element-attribute-value) also came after the same rationale. We consider that this is one of the main reasons that noSQL databases appeared on the scene recently. Key-value store, hierarchical semi-structured documents, column based and graph-property data structures are all attempts to provide a solution to this problem. We include a few examples of characteristic forms with comments by Ron Everett in order to contrast them with the alternative data model of AtomicDB.\nTable form  When we attempt to use Tables as a storage paradigm for Information we discover that Tables are a namespace bound, non-dynamic, 2-D, structured storage paradigm that has a different structure for every Table in every Database. 1\n  Each application is developed with unique and special queries written to each specific database design, table layout and named tables, columns and keys.1\n Rows of Parts table from a Microsoft Access relational database that we have used in Part 1\n(partsList = SQLExecute[conn, \u0026#34;select pid,pname from Parts where pid\u0026lt;994\u0026#34;, \u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;True]) // TableForm Out: XML Form Rows of the table above serialized in XML\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;dataroot\u0026gt; \u0026lt;Parts\u0026gt; \u0026lt;pid\u0026gt;991\u0026lt;/pid\u0026gt; \u0026lt;pname\u0026gt;Left Handed Bacon Stretcher Cover\u0026lt;/pname\u0026gt; \u0026lt;pcolor\u0026gt;Red\u0026lt;/pcolor\u0026gt; \u0026lt;/Parts\u0026gt; \u0026lt;Parts\u0026gt; \u0026lt;pid\u0026gt;992\u0026lt;/pid\u0026gt; \u0026lt;pname\u0026gt;Smoke Shifter End\u0026lt;/pname\u0026gt; \u0026lt;pcolor\u0026gt;Black\u0026lt;/pcolor\u0026gt; \u0026lt;/Parts\u0026gt; \u0026lt;Parts\u0026gt; \u0026lt;pid\u0026gt;993\u0026lt;/pid\u0026gt; \u0026lt;pname\u0026gt;Acme Widget Washer\u0026lt;/pname\u0026gt; \u0026lt;pcolor\u0026gt;Red\u0026lt;/pcolor\u0026gt; \u0026lt;/Parts\u0026gt; \u0026lt;/dataroot\u0026gt;  Some have hailed XML (RDF and triple stores) as the means to solve the n-dimensional relationship problem, because with it, meta-information can be captured, but XML is plagued with other problems, not the least of which are namespace binding requiring semantic accord, massively replicated tags and data, the heavy overhead of text based processing, the necessity of searching and indexing all the text in every possible XML document for each and every key/ value-tag/data match sought and the distribution of the tagged datasets across innumerable XML documents, stored in 2-D table-referenced 2-D file structures. Add to that list the overhead imposed by using Semantic Web languages and ontologies and the PhD level specialists required to develop and maintain these \u0026lsquo;knowledge\u0026rsquo; oriented systems and you get even more namespace entrenchment and hence specialization of the applications developed with it all 1\n JSON Form { \u0026#34;dataroot\u0026#34;: { \u0026#34;Parts\u0026#34;: [ { \u0026#34;pid\u0026#34;: \u0026#34;991\u0026#34;, \u0026#34;pname\u0026#34;: \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;: \u0026#34;Red\u0026#34; }, { \u0026#34;pid\u0026#34;: \u0026#34;992\u0026#34;, \u0026#34;pname\u0026#34;: \u0026#34;Smoke Shifter End\u0026#34;, \u0026#34;pcolor\u0026#34;: \u0026#34;Black\u0026#34; }, { \u0026#34;pid\u0026#34;: \u0026#34;993\u0026#34;, \u0026#34;pname\u0026#34;: \u0026#34;Acme Widget Washer\u0026#34;, \u0026#34;pcolor\u0026#34;: \u0026#34;Red\u0026#34; } ] } } Signified-Sign-Signifier Alternative Paradigm Entity-Attribute-Value bondage highlights the fact that three perspectives, semantics at the conceptual layer, representation at the symbol layer and encoding at the physical layer are mixed in such a way that it is very hard to separate and work with them at distinct levels of abstraction. The R3DM/S3DM conceptual framework is based on the natural process of semiosis where the signified, i.e. concept, entity, attribute and the signifier, i.e. value are referenced through symbols, i.e. signs, at discrete layers. The same philosophy is shared in the architecture of AtomicDB system.\nFrom Data Items in Table to Information Atoms with NO Table\n Every table is a silo. Every cell is an atom of data with no awareness of its contexts, or how it fits in to anything beyond its cell. It can be located by external intelligence but on its own it' s a \u0026ldquo;dumb\u0026rdquo; participant in the system - the ultimate disconnected micro - fragment accessible only by knowing the column and the record it exists in. 1\n  The alternative is to replace the data elements with information at the atomic level of the system. Instead of a data atom in a table, we have an information atom with no table. Information atoms exist in a multi-D vector space unbounded by data structures and know their context, such as a \u0026ldquo;customer\u0026rdquo; or a \u0026ldquo;product\u0026rdquo;, just like atoms in the physical world \u0026ldquo;know\u0026rdquo; they are nitrogen or hydrogen items and behave accordingly. Information atoms also know when they were created, when they were last modified, and what other information atoms of other types are associated with them. They know their parents, their siblings, and their workplace associates. They are powerful little entities and most certainly NOT fragments. Nor are they triple statements requiring endless extraneous indexing 1\n AtomicDB is datatype and namespace agnostic, always fully contextualized, and structure free.\nAtomicDB Computational Semiotic Analysis in R3DM   AtomicDB Architecture in R3DM  illustrates the architecture of AtomicDB system according to R3DM framework. In particular, there are three layers that enable a computational semiotic analysis on AtomicDB; the semantic (S3), the sign (S2) and the storage (S1). An alternative notation and terminology is information resources (IRes-R3), representations (IRep-R2) and realizations (IRea-R1)   Each layer plays a distinct role and it is clearly separable from the other two. This serves fully the trilateral principle in R3DM. Storage-Realization layer, depicted with green boxes, portrays how AtomicDB system is implemented with .NET framework at the API level. The AtomicDB Core Key-Value primitive data structure is used to build successive nested List Class containers and association types, see [Fig. 3]. This is how the AIR of AtomicDB is realized at (S1).\n  AtomicDB Association Types  different kinds of linking (AIR) units   At the Sign layer (S2), [Fig. 2], the AIR receives its symbolic representation. A mere list of four integer numbers is adequate to represent efficiently any piece of information. It is the golden ratio in postmodern era data modeling. It can represent types, instances, and properties, and associate these in a hypergraph network. It is truly a web of information resources based on the power of semiosis, with a reference mechanism not built with character strings (URL) but similar to Internet Protocol address (IP). This AIR information representation serves two principal functions; information resource identification and location addressing, i.e. dereferencing and retrieval, but it does not suffer from the identity problem crisis of the RDFised web. The various forms of KeyVector that correspond to the nested data structures at layer (S1) are depicted with purple boxes.\nFinally (S3) layer, [Fig. 2], depicted with blue boxes, put information resources in their semantic perspective and order with a four level hierarchical structure of containers. It is the kind of logic that developers use to manage classes, properties and objects (OOP), or tables, records and fields (RDBMS), or objects, keys and values (XML-JSON) and subject, predicate, objects (RDF). But Ron Everett\u0026rsquo;s approach differs substantially from previous data models. Information resources are not handled by name, they are always represented and function as meaningful 4D number vectors. We escape from the namespace entanglement and alleviate the complexity of linked information by smart (AIR) information resource units that are represented in a uniform way and their digital form can be processed, retrieved and stored efficiently and/or combined to create composite information structures.\nAn AtomicDB Working Example In order to understand better the difference between a Namespace bounded DBMS vs an AIR based DBMS we exemplify key points of AtomicDB architecture in R3DM. But before we start unfolding our example we present AtomicDB terminology.\nTerminology   Data Item is a particular type of item that holds an atomic piece of data (an atomic value).\n  Collection (data set) is a generic container for data items with no duplicates. A collection is similar to the notion of attribute (column) data set in the relational model.\n  Nexus item is a special type of data item whose role is to keep associations with the other data items in a record. Nexus item plays a similar role to that of a record in the relational model.\n  Nexus Collection is a special type of collection which holds nexus items only. Nexus collection act similarly to the primary key column in the relational data model.\n  Record is a set of data items from different collections each associated to the same nexus item (exactly one per record)\n  Group refers to several collections and associates them. The group is not a container for collections. Each group has one and only one nexus collection.\n  Bridge Collection is a certain type of collection that can be associated with more than one group. Bridge collection act similarly to the foreign key column in the relational data model\n  Concept is a special type of item that represents uniquely one collection of items. A collection can have one or more representative concepts. A concept can be thought as a reference to collection.\n  Model is a generic container for unique concepts that are associated to form higher constructs and relations. Model is similar to a database schema, or view.\n  Draw Model We start by designing a simple concept map using the CMAP Tools that corresponds to the ER diagram of [Fig 1.] above.\n  Schema with CMAP Tools   Entities in this diagram, (Groups - cyan square boxes), are formed by grouping Attributes, i.e. Collections. One or more Attributes (Concepts - oval shape) are shared between two or more Entities and form bridge collections. This is the equivalent notion of the bridge table in relational and entity-relationship theory. A closer examination of the links reveals that they all have the same type, i.e. isRelatedTo, and Attributes are always connected to Entities with that operator. According to R3DM we are examining information resources at (S3) layer.\nAdd Model We can import this concept map or alternatively we can create a new Model programmatically by passing its name as a parameter to the addModel function. Then we can use getModelByName function to get back a Key-Value Rule representation of the Model we added to the system:\nmodelName = \u0026#34;Parts-Suppliers Catalog Model\u0026#34;; addModel[modelName] Out: «NETObject[System.Collections.Generic.List`1 [System.Collections.Generic.List`1 [IAMCore_SharpClient.Core_KeyValuePair]]]» Get Model (model = getModelByName[modelName]) // printKVP Out: {0, 3, 13, 256}-\u0026gt;\u0026#34;Parts-Suppliers Catalog Model\u0026#34; The key {0, 3, 13, 256}, i.e. Sign (S2/R2 - IRep), is a reference 4D vector that we use to access the Model item and the value is the string we assigned as the name of the Model. Everything that is stored in AtomicDB has a key with four dimensions (Environment, System, Context, Item) and a value. Each dimension can be semantically interpreted in a different way, but they are always connected hierarchically. This makes AtomicDB fully symmetrical in terms of values, structures and relationships.\nAdd Concepts We continue by adding the Concepts of the Model programmatically. The two arguments of function addConceptsByName are the name of the Model and a list of Concept names. The first name in the list signifies a Nexus concept that is used to associate the rest of the concepts in the list.\ncatalogConceptNames = {\u0026#34;NX_Catalog\u0026#34;, \u0026#34;SupplierIdentifier\u0026#34;, \u0026#34;PartIdentifier\u0026#34;, \u0026#34;PartCost\u0026#34;}; partConceptNames = {\u0026#34;NX_Part\u0026#34;, \u0026#34;PartIdentifier\u0026#34;, \u0026#34;PartName\u0026#34;, \u0026#34;PartColor\u0026#34;}; supplierConceptNames = {\u0026#34;NX_Supplier\u0026#34;, \u0026#34;SupplierIdentifier\u0026#34;, \u0026#34;SupplierName\u0026#34;, \u0026#34;SupplierAddress\u0026#34;}; (catalogConcepts = addConceptsByName[modelName, catalogConceptNames]) // printKVPL2 Out: {2,1025,256,1}-\u0026gt;NX_Catalog {2,1025,256,2}-\u0026gt;SupplierIdentifier {2,1025,256,3}-\u0026gt;PartIdentifier {2,1025,256,4}-\u0026gt;PartCost (partConcepts = addConceptsByName[modelName, partConceptNames]) // printKVPL2 Out: {2,1025,256,5}-\u0026gt;NX_Part {2,1025,256,3}-\u0026gt;PartIdentifier {2,1025,256,6}-\u0026gt;PartName {2,1025,256,7}-\u0026gt;PartColor (supplierConcepts = addConceptsByName[modelName, supplierConceptNames]) // printKVPL2 Out: {2,1025,256,8}-\u0026gt;NX_Supplier {2,1025,256,2}-\u0026gt;SupplierIdentifier {2,1025,256,9}-\u0026gt;SupplierName {2,1025,256,10}-\u0026gt;SupplierAddress The first thing you should notice is that the numbering of dimensions for Concepts does not follow the previous pattern with the Model 4D vector. Semantically this means we have a different system that can be interpreted in the following way:\nThere are three Groups with four Concepts each added to our Model. Notice that the first three dimensions of the keys remain constant but the last dimension varies to denote instances of Concepts that belong to the same Model. In this case, the Item dimension of the reference key plays the role of the Concept and the Context dimension plays the role of the Model. The other two dimensions are related possibly to the kind of repository, i.e. we are storing information about models, and our localhost database development environment. Contrast this representation with the previous vector {0, 3, 13, 256} where the Item dimension plays the role of the Model. This indicates that reference vectors in AtomicDB are cleverly inter-related; notice the position of number 256 that signifies always the Model in these 4D vectors.\nAnother critical observation is that PartIdentifier and SupplierIdentifier Concepts are members of more than one Group. These are the Bridge Concepts and play the same role as the primary and foreign keys in relational data sets. But one of the main differences and a great advantage of this approach is that this time data sets are not duplicated. The same Collection of items, i.e. data set of an attribute, can be referenced by many Concepts.\nGet Concepts Verify that all the concepts have been added to our Model\ngetConceptsFromModelName[modelName] // printKVPL2 Out: {2,1025,256,1}-\u0026gt;NX_Catalog {2,1025,256,2}-\u0026gt;SupplierIdentifier {2,1025,256,3}-\u0026gt;PartIdentifier {2,1025,256,4}-\u0026gt;PartCost {2,1025,256,5}-\u0026gt;NX_Part {2,1025,256,6}-\u0026gt;PartName {2,1025,256,7}-\u0026gt;PartColor {2,1025,256,8}-\u0026gt;NX_Supplier {2,1025,256,9}-\u0026gt;SupplierName {2,1025,256,10}-\u0026gt;SupplierAddress Add Collections With the following addCollectionsAutoMapGroupByName function Collections are automatically associated with the Concepts and a Group is added. Notice that both Collections and Models have been created with the same Environment and System dimensions, it is the third dimension Context that differentiates the type of instances, i.e. items.\n(catalogCollections = addCollectionsAutoMapGroupByName[modelName, catalogConceptNames]) // printKVPL2 Out: {0,3,15,257}-\u0026gt;NX_Catalog {0,3,15,258}-\u0026gt;SupplierIdentifier {0,3,15,259}-\u0026gt;PartIdentifier {0,3,15,260}-\u0026gt;PartCost (partCollections = addCollectionsAutoMapGroupByName[modelName, partConceptNames]) // printKVPL2 Out: {0,3,15,262}-\u0026gt;NX_Part {0,3,15,259}-\u0026gt;PartIdentifier {0,3,15,263}-\u0026gt;PartName {0,3,15,264}-\u0026gt;PartColor (supplierCollections = addCollectionsAutoMapGroupByName[modelName, supplierConceptNames]) // printKVPL2 Out: {0,3,15,265}-\u0026gt;NX_Supplier {0,3,15,258}-\u0026gt;SupplierIdentifier {0,3,15,266}-\u0026gt;SupplierName {0,3,15,267}-\u0026gt;SupplierAddress And bridging is achieved by having Bridge Collections, {0,3,15,259} and {0,3,15,258} that are equivalent to Bridge Concepts.\nGet Collections Verify that we have added all the collections to the system:\ngetCollectionsFromModelName[modelName] // printKVPL2 Out: {0,3,15,257}-\u0026gt;NX_Catalog {0,3,15,258}-\u0026gt;SupplierIdentifier {0,3,15,259}-\u0026gt;PartIdentifier {0,3,15,260}-\u0026gt;PartCost {0,3,15,262}-\u0026gt;NX_Part {0,3,15,263}-\u0026gt;PartName {0,3,15,264}-\u0026gt;PartColor {0,3,15,265}-\u0026gt;NX_Supplier {0,3,15,266}-\u0026gt;SupplierName {0,3,15,267}-\u0026gt;SupplierAddress Add Data Values Our next step is to add values into a separate system, at the same Environment with that of Concepts using the Item numbers from the Collections above. First we read relational datasets with SQLSelect function and we form Records that are represented with the List built-in symbol of Wolfram Language.\ncatalogDataSet=SQLSelect[conn,\u0026#34;Catalog\u0026#34;,\u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;False]; partDataSet = SQLSelect[conn,\u0026#34;Parts\u0026#34;,\u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;False]; supplierDataSet=SQLSelect[conn,\u0026#34;Suppliers\u0026#34;,\u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;False]; Then we add records with the addRecordsByName command of our AtomicDB API passing three arguments; the name of the Model, Concept names, and the body of relational dataset that we read in the previous step.\nThese are the items added to the NX_Catalog nexus collection\naddRecordsByName[modelName, catalogConceptNames, catalogDataSet] // printKVPL2 Out: {2,7,257,1}-\u0026gt;1 {2,7,257,2}-\u0026gt;2 {2,7,257,3}-\u0026gt;3 {2,7,257,4}-\u0026gt;4 {2,7,257,5}-\u0026gt;5 {2,7,257,6}-\u0026gt;6 {2,7,257,7}-\u0026gt;7 {2,7,257,8}-\u0026gt;8 {2,7,257,9}-\u0026gt;9 {2,7,257,10}-\u0026gt;10 {2,7,257,11}-\u0026gt;11 {2,7,257,12}-\u0026gt;12 {2,7,257,13}-\u0026gt;13 {2,7,257,14}-\u0026gt;14 {2,7,257,15}-\u0026gt;15 {2,7,257,16}-\u0026gt;16 {2,7,257,17}-\u0026gt;17 These are the items added to the NX_Part nexus collection\naddRecordsByName[modelName, partConceptNames, partDataSet] // printKVPL2 Out: {2,8,262,1}-\u0026gt;1 {2,8,262,2}-\u0026gt;2 {2,8,262,3}-\u0026gt;3 {2,8,262,4}-\u0026gt;4 {2,8,262,5}-\u0026gt;5 {2,8,262,6}-\u0026gt;6 {2,8,262,7}-\u0026gt;7 {2,8,262,8}-\u0026gt;8 {2,8,262,9}-\u0026gt;9 These are the items added to the NX_Supplier nexus collection\naddRecordsByName[modelName, supplierConceptNames, supplierDataSet] // printKVPL2 Out: {2,9,265,1}-\u0026gt;1 {2,9,265,2}-\u0026gt;2 {2,9,265,3}-\u0026gt;3 {2,9,265,4}-\u0026gt;4 Get Data Values In order to read back the data values, we use Concepts and the getItemsFromConceptNames function.\nFor example to get data Items from the Part Concepts we pass the name of the Model and the Concept names for the Part Group:\ngetItemsFromConceptNames[modelName, partConceptNames] // printKVPL2 Out: {2,8,262,1}-\u0026gt;1 {2,8,262,2}-\u0026gt;2 {2,8,262,3}-\u0026gt;3 {2,8,262,4}-\u0026gt;4 {2,8,262,5}-\u0026gt;5 {2,8,262,6}-\u0026gt;6 {2,8,262,7}-\u0026gt;7 {2,8,262,8}-\u0026gt;8 {2,8,262,9}-\u0026gt;9 {2,259,259,1}-\u0026gt;991 {2,259,259,2}-\u0026gt;992 {2,259,259,3}-\u0026gt;993 {2,259,259,4}-\u0026gt;994 {2,259,259,5}-\u0026gt;995 {2,259,259,6}-\u0026gt;996 {2,259,259,7}-\u0026gt;997 {2,259,259,8}-\u0026gt;998 {2,259,259,9}-\u0026gt;999 {2,263,263,1}-\u0026gt;Left Handed Bacon Stretcher Cover {2,263,263,2}-\u0026gt;Smoke Shifter End {2,263,263,3}-\u0026gt;Acme Widget Washer {2,263,263,4}-\u0026gt;I Brake for Crop Circles Sticker {2,263,263,5}-\u0026gt;Anti-Gravity Turbine Generator {2,263,263,6}-\u0026gt;Fire Hydrant Cap {2,263,263,7}-\u0026gt;7 Segment Display {2,264,264,1}-\u0026gt;Red {2,264,264,2}-\u0026gt;Black {2,264,264,3}-\u0026gt;Silver {2,264,264,4}-\u0026gt;Translucent {2,264,264,5}-\u0026gt;Cyan {2,264,264,6}-\u0026gt;Magenta {2,264,264,7}-\u0026gt;Green Check that although we have nine records, i.e. nine identifiers for Parts and nine Nexuses respectively, we have only seven color values or seven Part names. This is because in relational data model certain values of a column/attribute are repeated but in Associative Data Model are single instances\nIn a similar way, to get data Items from the Catalog Concepts we pass the name of the Model and the Concept names for the Catalog Group:\ngetItemsFromConceptNames[modelName, catalogConceptNames] // printKVPL2 Out: {2,7,257,1}-\u0026gt;1 {2,7,257,2}-\u0026gt;2 {2,7,257,3}-\u0026gt;3 {2,7,257,4}-\u0026gt;4 {2,7,257,5}-\u0026gt;5 {2,7,257,6}-\u0026gt;6 {2,7,257,7}-\u0026gt;7 {2,7,257,8}-\u0026gt;8 {2,7,257,9}-\u0026gt;9 {2,7,257,10}-\u0026gt;10 {2,7,257,11}-\u0026gt;11 {2,7,257,12}-\u0026gt;12 {2,7,257,13}-\u0026gt;13 {2,7,257,14}-\u0026gt;14 {2,7,257,15}-\u0026gt;15 {2,7,257,16}-\u0026gt;16 {2,7,257,17}-\u0026gt;17 {2,258,258,1}-\u0026gt;1081 {2,258,258,2}-\u0026gt;1082 {2,258,258,3}-\u0026gt;1083 {2,258,258,4}-\u0026gt;1084 {2,259,259,1}-\u0026gt;991 {2,259,259,2}-\u0026gt;992 {2,259,259,3}-\u0026gt;993 {2,259,259,4}-\u0026gt;994 {2,259,259,5}-\u0026gt;995 {2,259,259,6}-\u0026gt;996 {2,259,259,7}-\u0026gt;997 {2,259,259,8}-\u0026gt;998 {2,259,259,9}-\u0026gt;999 {2,260,260,1}-\u0026gt;36.1 {2,260,260,2}-\u0026gt;42.3 {2,260,260,3}-\u0026gt;15.3 {2,260,260,4}-\u0026gt;20.5 {2,260,260,5}-\u0026gt;124.23 {2,260,260,6}-\u0026gt;11.7 {2,260,260,7}-\u0026gt;75.2 {2,260,260,8}-\u0026gt;16.5 {2,260,260,9}-\u0026gt;0.55 {2,260,260,10}-\u0026gt;7.95 {2,260,260,11}-\u0026gt;12.5 {2,260,260,12}-\u0026gt;1. {2,260,260,13}-\u0026gt;57.3 {2,260,260,14}-\u0026gt;22.2 {2,260,260,15}-\u0026gt;48.6 Notice that values for the PartIdentifier Bridging Concept are not duplicated but they are referenced instead by the same 4D key vectors whether we are in Catalog Group or Part Group.\nAssimilation of a Table So far so good, but in practice everyone is accustomed to the use of tables. Table is the favorite manageable structure and convenient medium of exchanging-exporting/importing datasets. Therefore the challenge is that any alternative solution on data architecture should provide the means to view and handle data in tables with the minimum effort no matter what is the underlying structure. For this reason we continue our example with a comparison of how we retrieve records from a relational table and assimilate this operation to a Group of items that are represented with a nested List of Rules.\nA. Relational\nSQLExecute[conn, \u0026#34;select * from Parts\u0026#34;, \u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;True] // TableForm Out: B. Associative\n(nexusMemberItems = getItemsFromConceptNames[modelName, \u0026#34;NX_Part\u0026#34;]) // printKVPL2 Out: {2,8,262,1}-\u0026gt;1 {2,8,262,2}-\u0026gt;2 {2,8,262,3}-\u0026gt;3 {2,8,262,4}-\u0026gt;4 {2,8,262,5}-\u0026gt;5 {2,8,262,6}-\u0026gt;6 {2,8,262,7}-\u0026gt;7 {2,8,262,8}-\u0026gt;8 {2,8,262,9}-\u0026gt;9 partConcepts[0] // printKVPL2 Out: {2,1025,256,5}-\u0026gt;NX_Part {2,1025,256,3}-\u0026gt;PartIdentifier {2,1025,256,6}-\u0026gt;PartName {2,1025,256,7}-\u0026gt;PartColor records = getAnything[ model, partConcepts[0], nexusMemberItems, setType-\u0026gt;enGridType] Out: « NETObject [System.Collections.Generic.List`1 [System.Collections.Generic.List`1 [IAMCore_SharpClient.Core_KeyValuePair]]]» res = coreKVPL1ToRules /@ records@ToArray[]; res // TableForm Out:   Key/Value records of Part Items   Review and Discussion How do we design a data model, how do we connect data, how do we represent information, how do we store or retrieve them ? These are all fundamental questions in data modeling but there is a common key to unlock them. You have to start by defining a primitive information resource, and then understand how one can build complex information structures on top it. And this is because everything in nature or systems follow this kind of abstraction from the simple to the most sophisticated. There are patterns that recur at progressively smaller scales. There are fundamental building blocks that can build higher-order structures.\nFor more than thirty years, the data modeling world is dominated by records. Records in the form of a row in a table, or in a form of hierarchically structured XML/JSON documents, or in the form of property-graph nodes. Many consider the fundamental structure of RDF triplet, Subject-Predicate-Object, but this can be seen too as a form of a record that confines you to think in terms of a function-functor that maps information resources from a domain set to information resources of a range set. Neither the nature or reference mechanism of these resources, nor their linkage type are defined in a sufficient or efficient manner.\nAn alternative view on data modeling that can extend and enrich RDF is introduced in this article. It is based on AIR, analyzed with R3DM framework, and exemplified with AtomicDB. AIR is the oxygen that makes this database technology breath. It makes it alive and kicking.\n  AIR fits perfectly to the duality principle of R3DM conceptual model and the Everything is Represented with a Symbol corollary. There is no better example to think about this than digital representations as sequences of binary digits in the internal memory state of our machines. In a digital computer, everything is represented and addressed at the machine level with sequences of 0s and 1s. In order to represent information, Ron Everett managed to conceive in a similar way at a higher abstracted level an identification and addressing schema of information units. He wrapped atomic data types, such as a string or number, and made them the core of these units and he used a four-dimensional space to uniformly address, identify, bind and encode AIRs. Thus in AtomicDB each AIR unit is a self-referenced and uniquely identified item in a 4D space with sets of 4D references to other AIRs for classification purpose, and embedded data values for querying purpose.\nAccording to R3DM we have three layers of abstraction, the semantic, the sign, and the storage-data layer. The 4D reference type of AIR is the implementation of sign layer and it is bridging the semantic with the storage layer in the most semiotic way. This is a fully apprehensive act of responding to the fact that atomic data types and data structures cannot play sufficiently both the role of encoding and that of representing information. You have to make these two roles distinct. This is exactly what we manage in a beautiful way with these references. The symbolic layer is created in this 4D space and instead of having dissimilar atomic data types and abstract complex data types, you have uniform AIR units and aggregates of them e.g. collections, records, sets and multi-sets that are referenced in exactly the same way .\nThis is a completely, new, radical perspective on data modeling. It is a turning point and there has to be ample evidence to support claims that DBMS based on this are superior than their counterparts. We are determined to investigate, enhance, and apply that kind of database technology and connect it to the overall semiotic perspective of R3DM conceptual framework. It is possible that R3DM based on AIR can assimilate all other SQL and noSQL and SPARQL queries and data models in a simpler, more intuitive, faster, more secure, highly consistent, and in a large scale. This uniform structural symmetry based on AIR, both in terms of value representation and bi-directional relationships is perhaps the most innovative feature and what will hopefully make AIR the universal atomic information unit in the whole information science field. If not, I am sure that many other similar paradigms in data modeling will be based on this model, because a whole new unexplored path is now open and unimaginable applications of this technology can be turned into a reality.\nCross-References  LinkedIn Published Posts LinkedIn Published Posts LinkedIn Published Posts    Ron Everett in \u0026ldquo;Introduction to Associative Information Systems - (N) Normal Form\u0026rdquo; post by Jean-Michelle Letennier\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1426809600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1426809600,"objectID":"d688e97bf75394ebcbdbf691b0d65e12","permalink":"https://healis.eu/en/post/20150320/","publishdate":"2015-03-20T00:00:00Z","relpermalink":"/en/post/20150320/","section":"post","summary":"Part 2/3 - Towards a New Data Modelling Architecture","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Associative_model_of_data","Association_(object-oriented_programming)","Associative_array"],"title":"Atomic Information Resource (AIR)","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Relational Constructs  Product Type Tuple (Record/Row) Attribute (Field/Column) Relation (Base relval) View (Derived relvar / Result set) Database   Entity-Relationship (ER) Constructs  Record Representations Table Representations Constraints   Cross-References   Introduction In this series we introduce progressively the art of a new innovative, exhilarating, data modeling methodology that is based on R3DM conceptual framework. We want to engage software developers, architects, data model designers and everyone interested in learning the advantages of applying this method and the main differences from the data models of the past. We start with terms and constructs that most of us are familiar with from the relational database management systems and we dive into some detail of the Atomic Information Resource unit at Part 2. For coding purposes, we picked Wolfram Language, the 25+ years of development programming language of Mathematica. Wolfram Language combines symbolic, functional and rule-based programming with a vast library of built-in functions, a computational knowledge engine (Wolfram alpha) and a huge database of curated data.\nRelational Constructs The entity-relational data model (ERDM) is still the most popular data model in database management systems. You can think many reasons for this fact but from the user perspective the main reason is the simple and natural way of managing data in tables with rows (records) and columns (attributes). On top of that, SQL is a very powerful and easy to learn programming language that covers completely the relational operators on data sets. In this article various methods of representing the basic constructs of the relational model are demonstrated with Wolfram Language powerful transformations. You may download our Wolfram Notebook and try our examples in Wolfram Programming Lab or Wolfram Development Platform. The structured data for our example can be found at our Github repository\nProduct Type  In programming languages and type theory, a product of types is another, compounded, type in a structure. The \u0026ldquo;operands\u0026rdquo; of the product are types, and the structure of a product type is determined by the fixed order of the operands in the product. An instance of a product type retains the fixed order, but otherwise may contain all possible instances of its primitive data types. The expression of an instance of a product type will be a tuple, and is called a \u0026ldquo;tuple type\u0026rdquo; of expression. A product of types is a direct product of two or more types - Wikipedia, Product type\n Example: Integer x String x Colour\nIn Wolfram Language an instance of such a type is represented with the built-in List symbol:\nIn: partInstanceAsList = {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, Red} Out: And to check/verify the type for each element of the List we map the function Head\nIn: Head /@ partInstanceAsList Out: {Integer, String, RGBColor} Tuple (Record/Row)  A tuple is a finite ordered list of elements. In mathematics, an n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer. In computer science, tuples are directly implemented as product types in most functional programming languages. More commonly, they are implemented as record types, where the components are labeled instead of being identified by position alone. This approach is also used in relational algebra.\n  In database theory, the relational model uses a tuple definition similar to tuples as functions, but each tuple element is identified by a distinct name, called an attribute, instead of a number; this leads to a more user-friendly and practical notation. A tuple in the relational model is formally defined as a finite function that maps attributes to values. In this notation, attribute-value pairs may appear in any order - Wikipedia, Tuple\n In Wolfram Language record abstract data structure is usually represented with the Association function, i.e. a symbolically indexed list of Rules (key-value pairs).\nIn: partInstanceAsAssociation = Association[ partID -\u0026gt; 991, partName -\u0026gt; \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, partColor -\u0026gt; Red ] Out: \u0026lt;| partID-\u0026gt;991,partName-\u0026gt; \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, partColor-\u0026gt;Red |\u0026gt; In: Values[partInstanceAsAssociation] Out: {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, Red} In: partInstanceAsAssociation // Normal Out: {partID-\u0026gt;991, partName-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, partColor-\u0026gt;Red} Attribute (Field/Column)  The basic relational building block is the domain or data type, usually abbreviated nowadays to type. A tuple is an ordered set of attribute values. An attribute is an ordered pair of attribute name and type name. An attribute value is a specific valid value for the type of the attribute. This can be either a scalar value or a more complex type. A domain describes the set of possible values for a given attribute, and can be considered a constraint on the value of the attribute. Mathematically, attaching a domain to an attribute means that any value for the attribute must be an element of the specified set. Constraints make it possible to further restrict the domain of an attribute - Wikipedia, Relational_model\n In our example, two of our attributes partID is of integer data type and partName is of string data type. They both take scalar values. But the partColor attribute is of complex type and is defined in Wolfram Language with the function RGBColor.\nIn: Apply[Rule, Thread[ {Keys[partInstanceAsAssociation], Head /@ partInstanceAsList}], {1}] Out: {partID-\u0026gt;Integer, partName-\u0026gt;String, partColor-\u0026gt;RGBColor} Attribute can be seen as a mapping function. It maps a tuple to a value. We can define a function where we pass a single argument which is the association representation of the tuple and we return the specific value of the key. For example:\nisIdentifierOf[assoc_]:=assoc[partID] isNameOf[assoc_]:=assoc[partName] isColorOf[assoc_]:=assoc[partColor] { isIdentifierOf[partInstanceAsAssociation], isNameOf[partInstanceAsAssociation], isColorOf[partInstanceAsAssociation] } Out: {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, Red} Relation (Base relval)  In the relational model, a relation is a (possibly empty) finite set of tuples all having the same finite set of attributes.This set of attributes is more formally called the sort of the relation, or more casually referred to as the set of column names. A tuple is usually implemented as a row in a database table. The fundamental assumption of the relational model is that all data is represented as mathematical n-ary relations, an n-ary relation being a subset of the Cartesian product of n domains. In the mathematical model, reasoning about such data is done in two-valued predicate logic, meaning there are two possible evaluations for each proposition: either true or false (and in particular no third value such as unknown, or not applicable, either of which are often associated with the concept of NULL). Data are operated upon by means of a relational calculus or relational algebra, these being equivalent in expressive power.\n  A relation is defined as a set of n-tuples. In both mathematics and the relational database model, a set is an unordered collection of unique, non-duplicated items. A table is an accepted visual representation of a relation; a tuple is similar to the concept of a row. It is a set of tuples sharing the same attributes; a set of columns and rows. A relvar is a named variable of some specific relation type, to which at all times some relation of that type is assigned, though the relation may contain zero tuples - Wikipedia, Relation_(database)\n  Predicates and the closed world assumption   A relation consists of a heading and a body. A heading is a set of attributes. A body (of an n-ary relation) is a set of n-tuples. The heading of the relation is also the heading of each of its tuples. The body of a relation is sometimes called its extension. This is because it is to be interpreted as a representation of the extension of some predicate, this being the set of true propositions that can be formed by replacing each free variable in that predicate by a name (a term that designates something). There is a one-to-one correspondence between the free variables of the predicate and the attribute names of the relation heading. Each tuple of the relation body provides attribute values to instantiate the predicate by substituting each of its free variables. The result is a proposition that is deemed, on account of the appearance of the tuple in the relation body, to be true. Contrariwise, every tuple whose heading conforms to that of the relation, but which does not appear in the body is deemed to be false. This assumption is known as the closed world assumption: it is often violated in practical databases, where the absence of a tuple might mean that the truth of the corresponding proposition is unknown - Wikipedia, Relation_(database)\n In: SQLSelect[conn, \u0026#34;Parts\u0026#34;, \u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;True] // TableForm Out: In: SQLSelect[conn, \u0026#34;Parts\u0026#34;, \u0026#34;ShowColumnHeadings\u0026#34; -\u0026gt; True] Out: { {\u0026#34;pid\u0026#34;, \u0026#34;pname\u0026#34;, \u0026#34;pcolor\u0026#34;}, {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;Red\u0026#34;}, {992, \u0026#34;Smoke Shifter End\u0026#34;, \u0026#34;Black\u0026#34;}, {993, \u0026#34;Acme Widget Washer\u0026#34;, \u0026#34;Red\u0026#34;}, {994, \u0026#34;Acme Widget Washer\u0026#34;, \u0026#34;Silver\u0026#34;}, {995, \u0026#34;I Brake for Crop Circles Sticker\u0026#34;, \u0026#34;Translucent\u0026#34;}, {996, \u0026#34;Anti-Gravity Turbine Generator\u0026#34;, \u0026#34;Cyan\u0026#34;}, {997, \u0026#34;Anti-Gravity Turbine Generator\u0026#34;, \u0026#34;Magenta\u0026#34;}, {998, \u0026#34;Fire Hydrant Cap\u0026#34;, \u0026#34;Red\u0026#34;}, {999, \u0026#34;7 Segment Display\u0026#34;, \u0026#34;Green\u0026#34;} } View (Derived relvar / Result set)  In a relational database, all data are stored and accessed via relations. Relations that store data are called \u0026ldquo;base relations\u0026rdquo;, and in implementations are called \u0026ldquo;tables\u0026rdquo;. Other relations do not store data, but are computed by applying relational operations to other relations. These relations are sometimes called \u0026ldquo;derived relations\u0026rdquo;. In implementations these are called \u0026ldquo;views\u0026rdquo; or \u0026ldquo;queries\u0026rdquo; - Wikipedia, Relation_(database)\n queryString = \u0026#34; SELECT Catalog.catsid, Suppliers.sname, Catalog.catpid, Parts.pname, Parts.pcolor, Catalog.catcost FROM Suppliers INNER JOIN (Parts INNER JOIN [Catalog] ON Parts.pid = Catalog.[catpid]) ON Suppliers.sid = Catalog.[catsid] WHERE (((Catalog.catpid)=998)) ORDER BY Catalog.catcost; \u0026#34; SQLExecute[conn, queryString, \u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;True] // TableForm Out:Database  Each database is a collection of related tables; these are also called relations, hence the name \u0026ldquo;relational database\u0026rdquo;. Each table is a physical representation of an entity or object that is in a tabular format consisting of columns and rows - Wikipedia, Relation_(database)\n In: SQLTableNames[conn] Out: {\u0026#34;Catalog\u0026#34;, \u0026#34;Parts\u0026#34;, \u0026#34;Suppliers\u0026#34;} In: SQLTableNames[conn, \u0026#34;TableType\u0026#34;-\u0026gt;SQLTableTypeNames[conn]] Out: {\u0026#34;MSysAccessObjects\u0026#34;, \u0026#34;MSysAccessXML\u0026#34;, \u0026#34;MSysACEs\u0026#34;, \u0026#34;MSysIMEXColumns\u0026#34;, \u0026#34;MSysIMEXSpecs\u0026#34;, \u0026#34;MSysNameMap\u0026#34;, \u0026#34;MSysNavPaneGroupCategories\u0026#34;, \u0026#34;MSysNavPaneGroups\u0026#34;, \u0026#34;MSysNavPaneGroupToObjects\u0026#34;, \\ \u0026#34;MSysNavPaneObjectIDs\u0026#34;, \u0026#34;MSysObjects\u0026#34;, \u0026#34;MSysQueries\u0026#34;, \u0026#34;MSysRelationships\u0026#34;, \u0026#34;Catalog\u0026#34;, \u0026#34;Parts\u0026#34;, \u0026#34;Suppliers\u0026#34;, \u0026#34;View998Suppliers\u0026#34;, \u0026#34;ViewAll\u0026#34;} In: SQLTableInformation[conn, \u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;True] // TableForm Out:Entity-Relationship (ER) Constructs  ER data model is a systematic way of describing and defining a business process. The process is modeled as components (entities) that are linked with each other by relationships that express the dependencies and requirements between them. Entities may have various properties (attributes) that characterize them. Diagrams created to represent these entities, attributes, and relationships graphically are called ER diagrams\n  Enhanced Entity Relationship (EER)   The EER data model includes all of the concepts introduced by the ER model. Additionally it includes the concepts of a subclass and superclass (Is-a), along with the concepts of specialization and generalization. Furthermore, it introduces the concept of a union type or category, which is used to represent a collection of objects that is the union of objects of different entity types - Wikipedia, Entity–relationship_model\n Record Representations 1. List\nYou need to maintain two ordered lists, one for the data values and another one for the semantics, i.e. the attribute/column names.\nIn: partInstanceAsList Out: {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, Red} In: attributes={\u0026#34;pid\u0026#34;,\u0026#34;pname\u0026#34;,\u0026#34;pcolor\u0026#34;} Out: {pid, pname, pcolor} You can combine the two lists in one list of Rules with the following command\nIn: Thread[Rule[attributes, partInstanceAsList]] Out: {\u0026#34;pid\u0026#34;-\u0026gt;991, \u0026#34;pname\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;-\u0026gt;Red} A Rule is the equivalent of a key-value pair, but it is more powerful because in Wolfram Language it is the basic mechanism that is used in transformations. Nevertheless for lookup operations and updating Wolfram researchers added a more powerful construct that is called Association, see below.\n2. Triples\nLet us call a specific part instance partXYZ, if we represent this as the subject resource of a triplet, the list of attributes as the predicates and the list of values as the objects we can take the following triplets\nsubject = Table[\u0026#34;http://example.org/resource/partXYZ\u0026#34;, {3}]; predicate = StringJoin[\u0026#34;http://example.org/attribute/\u0026#34;, #] \u0026amp; /@ attributes; object = partInstanceAsList; Transpose[{subject, predicate, object}] // TableForm Out: 3. Directed Graph\n4. Tree\nWolfram Language functions are tree data structures that are created in the memory as a contiguous array of pointers, the first to the head and the rest to its successive elements. Take for example the List we defined, we can present it in a tree form with the command :\nIn: {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, Red} // TreeForm Similarly we can represent this row of data as a function with three arguments that take values from the Integer, String, and Color domain, e.g. :\nIn: partFunction[991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, RGBColor[1,0,0]] // TreeForm Out: 5. Association\nAssociations in Wolfram Language are very similar to the Association Type construct of the Topic Map data model. Each defined association is an instance of an association type. The keys of the association, association role types according to Topic Maps terminology, describe the role type of each value in the association instance. The values of the association, association role players according to Topic Maps terminology, describe the particular instance of the association type.\nThe command to perform the association of attributes with their values is the following\nIn: AssociationThread[attributes-\u0026gt;partInstanceAsList] Out: \u0026lt;|\u0026#34;pid\u0026#34;-\u0026gt;991, \u0026#34;pname\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;-\u0026gt;Red|\u0026gt; In: Keys@\u0026lt;|\u0026#34;pid\u0026#34;-\u0026gt;991, \u0026#34;pname\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;-\u0026gt;Red|\u0026gt; Out: {partID, partName, partColor} In: Values@\u0026lt;|\u0026#34;pid\u0026#34;-\u0026gt;991, \u0026#34;pname\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;-\u0026gt;Red|\u0026gt; Out: {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, Red} Association is a relatively new fundamental construct in Wolfram Language, it acts like a symbolically indexed list. The main reason for using it is to allow highly efficient lookup and updating and also build complex hierarchical structures and other datasets.\n6. List of Rules\nYou can easily convert an Association to a List of Rules\nIn: \u0026lt;|\u0026#34;pid\u0026#34;-\u0026gt;991, \u0026#34;pname\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;-\u0026gt;Red|\u0026gt; //Normal Out: {\u0026#34;pid\u0026#34;-\u0026gt;991, \u0026#34;pname\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;pcolor\u0026#34;-\u0026gt;Red} 6. Hypergraph\nIn the following hypergraph representation we keep separate the schema from the data, i.e. the types from instances.\nIn this hypergraph the $Part plays the role of the hyperedge (red color) that connects three hypernodes that represent the attributes pid, pname, and pcolor (black color). Similarly for the values we have:\nIn this hypergraph the $Part991 plays the role of a hyperedge (green color) that connects three hypernodes that represent the values 991, \u0026ldquo;Left Handled\u0026hellip;.\u0026rdquo;, RED (blue color).\nWe defined two hyperedges, one at a layer of concepts to represent the head of the record, and another at the data layer to represent the body of the record.\n7. EntityPropertyAssociation\nIn: Association[$Part991-\u0026gt; \u0026lt;|\u0026#34;partID\u0026#34;-\u0026gt;991, \u0026#34;partName\u0026#34;-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;partColor\u0026#34;-\u0026gt;Red|\u0026gt; ] Out: \u0026lt;| $Part991 -\u0026gt; \u0026lt;|partID-\u0026gt;991, partName-\u0026gt;\u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, partColor-\u0026gt;Red|\u0026gt; |\u0026gt; Table Representations 1. List of Lists\nIn: partsList = SQLSelect[conn, \u0026#34;Parts\u0026#34;, \u0026#34;ShowColumnHeadings\u0026#34;-\u0026gt;True] Out: { {\u0026#34;pid\u0026#34;, \u0026#34;pname\u0026#34;, \u0026#34;pcolor\u0026#34;}, {991, \u0026#34;Left Handed Bacon Stretcher Cover\u0026#34;, \u0026#34;Red\u0026#34;}, {992, \u0026#34;Smoke Shifter End\u0026#34;, \u0026#34;Black\u0026#34;}, {993, \u0026#34;Acme Widget Washer\u0026#34;, \u0026#34;Red\u0026#34;}, {994, \u0026#34;Acme Widget Washer\u0026#34;, \u0026#34;Silver\u0026#34;}, {995, \u0026#34;I Brake for Crop Circles Sticker\u0026#34;, \u0026#34;Translucent\u0026#34;}, {996, \u0026#34;Anti-Gravity Turbine Generator\u0026#34;, \u0026#34;Cyan\u0026#34;}, {997, \u0026#34;Anti-Gravity Turbine Generator\u0026#34;, \u0026#34;Magenta\u0026#34;}, {998, \u0026#34;Fire Hydrant Cap\u0026#34;, \u0026#34;Red\u0026#34;}, {999, \u0026#34;7 Segment Display\u0026#34;, \u0026#34;Green\u0026#34;} } 2. List of Associations\nhead = partsList[[1]]; body = partsList[[2 ;;]]; AssociationThread[head -\u0026gt; #] \u0026amp; /@ body { \u0026lt;|pid-\u0026gt;991,pname-\u0026gt;Left Handed Bacon Stretcher Cover,pcolor-\u0026gt;Red|\u0026gt;, \u0026lt;|pid-\u0026gt;992,pname-\u0026gt;Smoke Shifter End,pcolor-\u0026gt;Black|\u0026gt;, \u0026lt;|pid-\u0026gt;993,pname-\u0026gt;Acme Widget Washer,pcolor-\u0026gt;Red|\u0026gt;, \u0026lt;|pid-\u0026gt;994,pname-\u0026gt;Acme Widget Washer,pcolor-\u0026gt;Silver|\u0026gt;, \u0026lt;|pid-\u0026gt;995,pname-\u0026gt;I Brake for Crop Circles Sticker,pcolor-\u0026gt;Translucent|\u0026gt;, \u0026lt;|pid-\u0026gt;996,pname-\u0026gt;Anti-Gravity Turbine Generator,pcolor-\u0026gt;Cyan|\u0026gt;, \u0026lt;|pid-\u0026gt;997,pname-\u0026gt;Anti-Gravity Turbine Generator,pcolor-\u0026gt;Magenta|\u0026gt;, \u0026lt;|pid-\u0026gt;998,pname-\u0026gt;Fire Hydrant Cap,pcolor-\u0026gt;Red|\u0026gt;, \u0026lt;|pid-\u0026gt;999,pname-\u0026gt;7 Segment Display,pcolor-\u0026gt;Green|\u0026gt; } 3. Dataset\nhead = partsList[[1]]; body = partsList[[2 ;;]]; AssociationThread[head -\u0026gt; #] \u0026amp; /@ body //Dataset Constraints  Constraints provide one method of implementing business rules in the database. SQL implements constraint functionality in the form of check constraints. Constraints restrict the data that can be stored in relations. These are usually defined using expressions that result in a boolean value, indicating whether or not the data satisfies the constraint - Wikipedia\n  Constraints can apply to single attributes, to a tuple (restricting combinations of attributes) or to an entire relation. Since every attribute has an associated domain, there are constraints (domain constraints). The two principal rules for the relational model are known as entity integrity and referential integrity - Wikipedia\n Cross-References  LinkedIn Published Posts Wolfram Community  ","date":1426550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1426550400,"objectID":"1ea77c2653d856faa5578ed78d24408e","permalink":"https://healis.eu/en/post/20150317/","publishdate":"2015-03-17T00:00:00Z","relpermalink":"/en/post/20150317/","section":"post","summary":"Part 1/3 - Towards a New Data Modelling Architecture","tags":["Abstraction_(software_engineering)","Information","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Associative_model_of_data","Data_model","Semantics","Database","Database_management_system","Graph_database","associative_semiotic_hypergraph","Computational_semiotics","Associative_entity","Entity–relationship_model","Product_type"],"title":"Relational/ER Constructs in Wolfram Language","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  The Variable-Value Pair (VVP) VVP and the identity crisis on the web Conceptual Model vs Data Model Data and Metadata A Computational Semiotics Explanation  Realization Representation Reference Resource     The Variable-Value Pair (VVP) Recently, 5th of November 2013, another serialization of RDF, JSON-LD was proposed by W3C. This made me think over about the fundamental data representation in computing systems and applications. It is the name–value pair, key–value pair, field–value pair or attribute–value pair according to Wikipedia.\nProfessional IT developers will recognise it also as the variable-value pair in programming, as the (Object, Attribute), Value pair in OOP, as the field-value in RDB databases, as the key-value in no-SQL databases, as the query string in URL, as the (SP)-O in RDF and as the attribute-value pair in the most popular data interchange format in our days the JSON open standard format. This demonstrates how powerful this \u0026ldquo;pair\u0026rdquo; is. Two fundamental observations arise from this comparison.\nFirst, there is an emergent need to describe any kind of relation between two things in a natural, human readable way. And second, there is the power of using it as the cornerstone to build on top of it. Everything has to be expressed as VVP in a semantic layered approach, similar to what the Topic Map data model proposed, i.e. distinguish between associations between concepts and occurrences for the representation of them. In my opinion, this is where the semantic web stack fails as it has mixed the syntax, with retrieval of information and representation of it.\nWhat I propose in R3DM data model is a clear separation of Information Realization (IREA), i.e. literals, data types, I call them DataIR or DIR (Data Information Resources) from Information Representation (IREP), i.e. image, web page, quantity, number, etc. I call them BinIR or BIR (Binary Information Representation).\nCollectively I call all of them Information Resources (IRES), or Term Information Resources, TermIR or TIR for simplicity. This definition includes concepts from our daily life like humans, cars, trees and sky.\nIn order to avoid confusion on the definition of all these terms and for identification purposes, Information Reference (IREF), i.e. authority, user, host, domain, etc. has to be added as an extra dimension on the representation of information. I also call this term RefIR or RIR (Reference Information Representation).\nAs a reminder, one can easily arrive in the following memorable formula:\nIRES = IREF + IREP + IREA  Information Resource = Information Reference + Information Representation + Information Realization\nOr expressed in terms of things\nTermIR = RefIR + BinIR + DataIR  And in an even simpler form as\nTIR = RIR + BIR + DIR  In fact, the U1R3DM, Unified Information Resources with Reference, Representation, Realization Data Model proposes a new information theory that is based on the hypothesis that any information resource can be computed and represented as the unity of three components that happen to occur naturally in the description of Aristotle\u0026rsquo;s semiotic triangle. This is exactly what is illustrated in this post.\nVVP and the identity crisis on the web The more I am re-searching the subject of data modeling the more I understand the confusion that arises from the use of the variable-value pair, I am calling it VVP for short. Many of you will recognize that this is the fundamental unit of construction in computer hardware/software architecture including databases, i.e. Storage and retrieval mechanism. Nevertheless many fail to grasp the semantics behind this simple assignment statement of the VVP, i.e. VAR = VAL. Pointer logic in computer programming is very helpful here. Or think about a post box (container) with a street address and an envelope (content) inside. It\u0026rsquo;s also important to think about the type of container (post box) and the type of content (envelope).\nWhat is the analogy with R3DM an identifier to (R)epresent the variable name, a.k.a container a literal to (R)ealize (materialize) the value, a.k.a content a memory address to (R)eference / De-Reference its content\nRepresentation + Realization + Reference  You can see Variable from three perspectives, as an identifier, as an address and as a container with a type (data type). In the current semantic web of linked-data URI is overloaded with many roles, i.e. dereferencing, identification, serialization (Relational, Topic, Graph, JSON-XML). Is there a way to combine all these different perspectives in R3DM ? I think perhaps there is one.\nConceptual Model vs Data Model RDF triplet, (Subject, Predicate, Object) or (Entity, Attribute, Value), strictly speaking, is neither a conceptual (information) model, nor a data model.\nBy definition conceptual model, is about concepts. It is about how I can deliver some message, I have in my head to someone else. Normally we use natural language, words, sentences, speech as the vehicle to convey that message. But that is not the only medium we use, think about art, figures, pictures, photos, diagrams, tactile feedback, music, video, and many others that are not based on words, that are not based on natural language.\nSo, let us assume for a moment that we focus on only textual representations. Is that SPO adequate as a constructing unit to model observations, data sets, or relations ? If yes, is there a standard way to structure concepts and relate instances ? Think about the components of SPO. Predicative units can become attributive and the opposite, object can take the position of a subject and the other way around, relations can be inverted.\nBut perhaps the most annoying of all is the abuse of that conceptual model to use it at the same time as a data model. That means to link values, such as numbers, strings and dates and binary objects. And of course everybody raises his hands when you ask the question, what exactly that value or that object represents. Or how about thinking the classic coding distinction in passing arguments. Are you calling by value or by reference ? Do you embed objects, are you building complex data types, how do you model the multi-value properties ? If you think there is a standard way to answer all these questions, think again because there is not one.\nSo, here comes R3DM into the game to make things more clear, Reference, Representation and Realization. Think about realization the encoding of 0s and 1s you have stored in memory. This is the only \u0026ldquo;real thing\u0026rdquo; you have stored. That is the lowest level of representation that computer understands. Then we have another level of representation, the highest one that we are familiar with, the conceptual level, it is about terms that we naturally think, that we naturally construct in our brains. And the third level of representation is an intermediate one. It is connecting the two worlds, the human one with the computer one. That is a vehicle, a medium we use to convey the message, the information according to semiotic triangle. We can use text, images, sound, video, etc to achieve this as long as we can digitize media.\nResource = Reference + Representation + Realization  the three levels of representation are unified as one and one is seen in three. That is the beauty of R3DM.\nData and Metadata One of the main obstacles in data modeling is that we try to understand the mechanism of abstraction. In fact we are trying to model abstraction, to model the machine that creates models ! Recall at this point what is metadata. It is data about data. So you see how easily you can fall into a loophole.\nThink about the \u0026ldquo;name\u0026rdquo; term. It is one of the most essential concepts we use to model, to reason, to refer, to identify. It is so hard to escape from naming and change everything to an alphanumeric id. Who is doing the naming, what does he mean, in what natural language ?\nName is just one of the many \u0026ldquo;signs\u0026rdquo; we use according to \u0026ldquo;semiosis\u0026rdquo; to carry the message, a piece of information. Think about any kind of programming paradigm, or any kind of data model or information model. You draw a flowchart, a nice diagram, to describe your model and at the same time you use symbols and words-terms to enhance it. All these are different kind of signs we use. So, do we have a model of the signs and how we use them to construct information and store, retrieve and update our data ? Not, at the moment I think.\nLet\u0026rsquo;s move now to a term that apparently has become so popular in NoSQL movement, schemaless databases. That does not mean, there is not a schema. It means the database you use allows you to construct any kind of schema dynamically. In a sense we are talking about a database that has a generic kind of schema that enables you to produce any kind of schema.\nAre you getting the picture now, data-metadata, schemaless-schema, data model - abstract model. It is an abstract machine, think about Turing machines, finite state machines, recursive functions, and lambda calculus and you get closer to it.\nA Computational Semiotics Explanation Resource = Reference + Representation + Realization  Realization The following Wikipedia pages are related to realization, you may open and read about:\n Data type : en.wikipedia.org/wiki/Data_type Data structure : en.wikipedia.org/wiki/Data_structure Class : en.wikipedia.org/wiki/Class_(computer_programming) Object : en.wikipedia.org/wiki/Object_(computer_science)  You read the content of the web page with a specific presentation format suitable for the user and with at least three levels of encoding at the back for machine processing purposes.\n wiki encoding : Wiki data type (interpretation of bits) html encoding : HTML data type (interpretation of bits) machine code : Series of bits  To keep things simple, encoding is about the format you give for various purposes, for data storage, for human reading, for human listening, for execution of machine instructions, and many more. If you started thinking about file types, and serialization formats like RDF and JSON I must say you are on the right path. We are at the data level where everything is centred around the encoding of the content. If we apply recursion to reach the machine encoding level, we have to think about a base case. For example, you can encode an integer as a 16bit binary number or 32bit binary number.\nRepresentation How do we represent an integer. In programming we call it an identifier, the name of a variable. This is our entry level to the world of semantics. According to semiotics, it is about signs we use to represent information about an entity. To continue our example, if we want to encode and use a salary figure we can write:\nSalary = $150000\nThe left part (and the dollar sign) is the (R)epresentation (container) and the right part is the value (content). It is the (R)ealization of a monetary value. Such identifiers in computer programming are many, property names, class names, method names, and relations.\nReference Speaking about computer programming, the following Wikipedia pages are related to reference:\n Pointer : en.wikipedia.org/wiki/Pointer_(computer_programming) Reference : en.wikipedia.org/wiki/Reference_(computer_science) Key : en.wikipedia.org/wiki/Unique_key Identifier : en.wikipedia.org/wiki/Identifier  The concept of reference must not be confused with other values (keys or identifiers). In the previous example\n \u0026ldquo;Salary\u0026rdquo; is an identifier, a (R)epresentation of an integer value \u0026ldquo;Salary\u0026rdquo; is a reference, a (R)epresentation of the memory address where we encode the integer value.  To avoid that confusion, programmers defined another term, the pointer. Pointer (R)epresents a memory address. We dereference pointer to read the value, we use pointer to access memory block and store the value. The same idea is behind the dereferencing mechanism of WWW and the URL. But the URL reference has been overloaded:\n URL denotes the source of information, e.g. Wikipedia. URL is used to disambiguate terms, e.g. Object in object-oriented_programming. URL is used to fetch the html content of the web page  Resource The way we view information resources in our model is mainly through the use of terms (Term Information Resource - TermIR). If you take any of the previous web addresses, you have the term, the realization of the term (DatumIR), the representation of the term (SignIR) and a reference (RefIR) to the content. These are three concepts in one, and one concept in three.\nTIR = RIR + SIR + DIR  ","date":1383609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1383609600,"objectID":"213138b3ec862b26fb2896d6b57063a8","permalink":"https://healis.eu/en/post/20131105/","publishdate":"2013-11-05T00:00:00Z","relpermalink":"/en/post/20131105/","section":"post","summary":"Discussion on the variable-value pair and the identity crisis on the web","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier"],"title":"S3DM/R3DM vs RDF","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  R3DM in brief Examples in TMDM  Example 1 Example 2 Example 3   Comparison of R3DM with TMDM  Granularity Abstraction levels and units Address (Referencing) Relationships (R3DM) - Associations (TMDM)   Cross-References   R3DM in brief Any information Resource can be explicitly defined as a Binary Information Resource BIR or Term Information Resource TIR and it may have one or more References, Representations and Realizations hence the name of the new data model (R3DM). Think about resources as nodes in a graph, each resource is represented with a node. There are nodes that represent digital assets or concepts that exist in the digital world (computer/web) such as files and web documents, and there are nodes that represent things on our world such as persons, objects, and abstract entities.\nRepresentations and Realizations are referenced differently. For example, take the \u0026ldquo;Programming Language\u0026rdquo; concept. You may use the \u0026ldquo;Wikipedia\u0026rdquo; reference work, see (REF), to check for a definition or do the same with the \u0026ldquo;Free Dictionary Vocabulary\u0026rdquo;. In general you may have multiple references for the same entity. On the other hand once you reach at the realization stage, you have access of the value of the specific representation. In that case the URL address of the web/computer resource (aka realization) serves as the primary mechanism to retrieve or update that value. It is exactly the same analogy with the use of variables in computer programming to access the content of a memory storage and manipulate the value there.\nExamples in TMDM  Instance of PERSON type with observations   The table shows that for an instance of type PERSON (TIR), we may have several observations of properties of type AGE and HEIGHT. For each one of these observations we can have one or more realizations.\nExample 1 Athanassios (p1) is 44 years old and his first name in Greek is Αθανάσιος\nOccurrences with scope\n {p1, AGE, \u0026ldquo;44\u0026rdquo;} /YEAR /INTEGER /PRESENT /NUMERIC /LITERAL {p1, AGE, \u0026ldquo;Athanassios is 44 years old\u0026rdquo;} /STRING /PRESENT /TEXT /ENGLISH /LITERAL {p1, AGE, \u0026ldquo;== Athanassios is 44 years old\u0026rdquo;} /STRING /PRESENT /WIKI /ENGLISH /LITERAL  Occurrences without scope\n hasProp(p1:PERSON, a1:AGE)  {a1, VAL, \u0026ldquo;44\u0026rdquo;} {a1, DTYPE,\u0026ldquo;INTEGER\u0026rdquo;} {a1, UNIT, \u0026ldquo;YEAR\u0026rdquo;} {a1, TIME, \u0026ldquo;PRESENT\u0026rdquo;}    Associations ONLY\n  hasProp (p1:AGENT, a1:AGE)\n hasReal (a1:AGE, INT:DTYPE, val03:VAL, NOW:TIME, YR:UNIT) hasReal (a1:AGE, STR:DTYPE, val04:VAL, NOW:TIME, HTML:ENC, EN:LANG)    hasProp (p1:AGENT, n1:FNAM)\n hasReal (n1:FNAM, STR:DTYPE, val09:VAL, TXT:ENC, GR:LANG) hasReal (n1:FNAM, STR:DTYPE, val00:VAL, TXT:ENC, EN:LANG)     Visualization of Example 1 in Wandora application using ONLY associations   Example 2 Athanassios (p2) was 1 m high at the age of four\nOccurrences with scope\n {p1, AGE, \u0026ldquo;4\u0026rdquo;} /YEAR /INTEGER /PAST /NUMERIC /LITERAL {p1, HEIGHT, \u0026ldquo;1\u0026rdquo;} /m /INTEGER /NUMERIC /LITERAL  Associations ONLY\n hasProp (p1:AGENT, a2:AGE, h1:HEIGHT)  hasReal (a2:AGE, INT:DTYPE, val07:VAL, PAST:TIME, YR:UNIT) hasReal (a2:AGE, TXT:DTYPE, val08:VAL, PAST:TIME, STR:ENC, EN:LANG) hasReal (h1:HEIGHT, INT:DTYPE, val05:VAL, cm:UNIT) hasReal (h1:HEIGHT, TXT:DTYPE, val06:VAL, STR:ENC, EN:LANG)     Visualization of Example 2 in Wandora application using ONLY associations   Example 3 Athanassios (p1) and Aki (p2) are now taller than 1m\nAssociations ONLY\n hasProp(p1:AGENT, h2:HEIGHT) hasProp(p2:AGENT, h2:HEIGHT)  hasReal (h2:HEIGHT, INT:DTYPE, val01:VAL, NOW:TIME, cm:UNIT) hasReal (h2:HEIGHT, STR:DTYPE, val02:VAL, NOW:TIME, TXT:ENC, EN:LANG)     Visualization of Example 3 in Wandora application using ONLY associations   Comparison of R3DM with TMDM Granularity TMDM: \u0026ldquo;Everything is a Topic\u0026rdquo; R3DM: \u0026ldquo;Everything is a Resource\u0026rdquo;\nAbstraction levels and units There are three abstraction levels united in one\nResource = Reference + Representation + Realization and respectively define basic information resource (IR) units at each level\nTerm IR (TIR) = Reference IR (RIR) + Signal IR (SIR) + Datum IR (DIR) In TMDM you have Topic and Topic characteristics where Topic name, Topic Occurrence, Topic Role = Signal Information Resource (SIR)\nAddress (Referencing) In TMDM there are addressable and non-addressable subjects. This IS THE point of major confusion in many models. In R3DM addressing is dependent on the abstraction level.\nIn DIR the content of the datum is accessed by reference, ONLY. You MUST know the subscript of the multidimensional array. In R3DM everything is stored in a multidimensional array and there are projections in every other kind of data structure including Tables in RDBMS, Documents and Graph in NoSQL.\nIn RIR addressing means referencing in a broader sense and that includes modelling of many concepts here, context, scope (see TDMD), and provenance.\nIn SIR it is about construction of Signs (e.g. identifiers, names, labels, etc\u0026hellip;.)\nRelationships (R3DM) - Associations (TMDM) There is another hot topic that of Relations-Relationships again the same tactics are followed like addressing. It depends on the abstraction level we are discussing\nFor example in TIR we have relationships among Terms and in DIR we are discussing about data structures.\nWhat I consider fundamental in both models is that everything has to be based on a common unit of information processing, i.e. Topic in TMDM vs UniformIR in R3DM. Another absolutely critical similarity is the explicit definition of an abstraction level that models concepts, i.e. subjects according to TMDM or TermIR according to R3DM. Another distant similarity can be traced at the Sign level, S2 of R3DM compared to the level of occurrences in TMDM. Needless to say that in R3DM all types of identifiers are treated equally at S2.\nCross-References  LinkedIn - 20130724 Topic Maps Community LinkedIn - If we were to redesign Topic Maps - Topic Maps Community Comments Wandora - Forum Post LinkedIn - 20130920 Topic Maps Community LinkedIn - 20140417 Topic Maps Community - First brief comparison of R3DM and TMDM LinkedIn - 20140617 Topic Maps Community - R3DM Formalization v2 quick comparison with TMDM  ","date":1380672000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1380672000,"objectID":"ba01d4d2f678f31e362f5c8e213b41a4","permalink":"https://healis.eu/en/post/20131002/","publishdate":"2013-10-02T00:00:00Z","relpermalink":"/en/post/20131002/","section":"post","summary":"Examples of R3DM illustrated with Topic Map Data Models","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier"],"title":"S3DM/R3DM in TMDM","type":"post"},{"authors":null,"categories":null,"content":"","date":1380585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1380585600,"objectID":"f41e3fc3284a52c539f116757a1ff657","permalink":"https://healis.eu/en/s3dm/","publishdate":"2013-10-01T00:00:00Z","relpermalink":"/en/s3dm/","section":"","summary":"R3DM (Resource-Representation-Realization) or S3DM (Signified-Sign-Signifier) is a conceptual model of an information processing system based on semiosis.","tags":null,"title":"R3DM/S3DM","type":"widget_page"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction Computational Semiotic Triangle The Core Terms of S3DM/R3DM  STerms RTerms Other Terms Trilateral Relations S3DM/R3DM Dogma   S3DM/R3DM Formalization v2.0  Memorizing the formula   S3DM/R3DM Formalization v1.0  The Trilateral Principle Symbol\u0026rsquo;s Duality Principle   The Threefold Tower of Babel in Information Technology Cross-References   Introduction S3DM/R3DM is a conceptual framework that formalizes the architectural design of data modeling process in software engineering. It is founded on the concept of Sign from Ancient to Modern Semiotics. S3DM/R3DM framework is based on the powerful theory of the semiotic triangle, a.k.a triangle of reference. We use numerical vectors (signs), to encode abstract things in our mind (signified) to which the sign refers, e.g. Person, name, Car, model. We associate these with data containers-forms that the sign takes for the storage of data values (signifier), i.e. primitive data types (see wikipedia Signified and Signifier article). This trilateral principle of S3DM/R3DM framework permits a uniform treatment of semantics, syntax and storage of information based on a symbolic representation. Next we define a fundamental, atomic information resource unit, (AIR). Those units, in turn, can be easily shaped to form any tabular, hierarchical, or graph data structure in a unified way. Data granularity can be also deeply connected and related to the definition of a fundamental unit of processing.\nComputational Semiotic Triangle        First illustration with porsche Second illustration with  information resources information representation information realization   Third illustration with  concepts code computer storage   Illustration with real-world object (green leaves) Illustration with an event (traffic lights)  The Core Terms of S3DM/R3DM There are two sets of base terms one starting with the letter \u0026lsquo;R\u0026rsquo; and the other with the letter \u0026lsquo;S\u0026rsquo; that we can use in order to convey the fundamental principles of R3DM. Both of the sets are outlined hierarchically into three levels. Each level is described with one or more characteristic words that are useful for memorizing and recapitulating the distinguishing features of R3DM.\nSTerms   S3 : Signified, Sense, Semantic - Signify\n Signified, in Greek \u0026ldquo;σημαινόμενον\u0026rdquo;, to mean something    S2 : Sign, Symbol, Syntax, Structure - SymbolizeS2 : Sign, Symbol, Syntax, Structure - Symbolize\n Sign, in Greek \u0026ldquo;σημείο\u0026rdquo;    S1 : Signifier, Storage (String) - Store\n Signifier, in Greek \u0026ldquo;σημαίνον\u0026rdquo;    RTerms   R3 : Information Resource - InfoRes (Enity) - Originate\n  R2 : Information Representation - InfoRes (Symbol) - Represented\n  R1 : Information Realization (Datum) - Realized\n  Other Terms There are also other terms that are often used when we describe relations, operations and features in R3DM these are:\n Referenced Interpreted Formatted Expressed Decoded Encoded Parsed  Trilateral Relations The trilateral schema of relations between R1, R2 and R3 or equally between S1, S2, S3 defines the core mechanism of semiosis. We will use the terms we defined in previous section to build simple sentences that convey the full meaning. We will also use three prepositions \u0026ldquo;from\u0026rdquo;, \u0026ldquo;through\u0026rdquo; and \u0026ldquo;in\u0026rdquo; that accompany RTerms and STerms in a specific order that signifies the left to right direction of abstraction\n  Direction from S1 through S2 in S3\n Data from S1 are Symbolized through S2 and Signified in S3 Data from S1 are Decoded through S2 and Interpreted in S3 Realization from S1 is Parsed through S2 and Interpreted in S3    Direction from S3 through S2 in S1\n Information Resources from S3 are Represented through S2 and Realized in S1 Information Resources from S3 are Represented through S2 and Encoded in S1 Information Resources from S3 are Represented through S2 and Formatted in S1    An Interpretation from S3 is Symbolized through S2 and Formatted in S1    Information Resources from S3 are Symbolized through S2 and Stored in S1    S3DM/R3DM Dogma With the term dogma we want to bring together a set of R3DM principles laid down by an authority as incontrovertibly true. R3DM dogma serves as part of the primary basis of R3DM modelling system, and it cannot be changed or discarded without affecting the very system\u0026rsquo;s paradigm. R3DM is serving one purpose to become the paradigm of paradigms, the metamodel of metamodels.\nS3DM/R3DM Formalization v2.0   S3DM/R3DM is a conceptual model of an information processing system based on semiosis. S3DM/R3DM fundamental construct is the uniform information RESOURCE (UIR), i.e. a parent class of the following three derived subclasses :\n  A Term Information Resource (TIR) models any concept, subject, topic, idea at a highest level, S3, i.e. sense, context level, of abstraction. TIR is also called the signified information resource\n  On the next, intermediate level, S2 - sign level, a Sign Information Resource (SIR), models the notion of the sign in semiotics. Therefore (TIR) is REPRESENTED by (SIR).\n  Finally at level, S1, i.e. data level, (SIR) conveys information that are encoded inside a data container, i.e. Datum Information Resource (DIR), signifier. The content inside (DIR), i.e. data, is expressed with an atomic or complex data structure and REALIZED with operations on data. Therefore (SIR) is REALIZED by (DIR).\n  In all the levels, S3, S2, S1 of abstraction references are created and maintained for the context of the signified concept (S3), the construction of signs (S2), and for the addressing of containers and the indexing of content that express signifiers (S1). Thus, information resources are REFERENCED differently depending on the level of abstraction by a Reference Information Resource (RIR).\n  There is also a hidden level S0, machine-system level, where everything is encoded and expressed with a sequence of binary digits but this currently out of our scope.\n Memorizing the formula In a concise way S3DM/R3DM can be described in any of the following memorable ways\n  S3DM/R3DM Edges - Duality of Sign\n Any Sign at level S2 is correlated to a Signifier at level S1 and the Signified at level S3    S3DM/R3DM Nodes - Triadic Relationship\n Any information RESOURCE at level S3 can be REPRESENTED at level S2 and REALIZED at level S1 using a different REFERENCE mechanism at each level.    S3DM/R3DM Nodes - Triadic Relationship\n Information RESOURCES are REPRESENTED, REALIZED and REFERENCED    S3DM/R3DM Nodes - Triadic Relationship\n Information RESOURCES are originated FROM level S3, are represented THROUGH level S2 and encoded IN level S1    S3DM/R3DM Formalization v1.0 In fact it occurs that this formalization is also the first attempt to formalize the notion of the word “plerophoria”, i.e. information translated in Greek, using Aristotle’s semiotic triangle of meaning.\nS3DM/R3DM models any concept C at a highest level, L2, of abstraction.\nInformation RESOURCES about that concept are REPRESENTED and consequently encoded using a combination of signs S at an intermediate level, L1, into a message M.\nThen at the lowest level, L0, the content of M is expressed with a complex data structure D and REALIZED with operations on data containers.\nIn all L0, L1, L2 levels of abstraction, we maintain REFERENCES for the context (L2), for the construction of signs (L1), and for the addressing of containers and the indexing of content (L0).\nThe Trilateral Principle Resource, symbol and data, each plays a distinct role but they are united with a trilateral relationship and act as one thing. They are present at every level of R3DM as\n  Signified - Sign - Signifier   or  Resource - Representation - Realization    In fact you cannot separate these three things in any computer engineering architecture, the signifier (the concept, semantics), the symbol (serialization, syntax), and the signified (storage, data form, i.e. strings, numbers, bits). They stay together from the lowest level of abstraction, to the highest level. You can only link these meaning triangles side by side and move in two directions, specialization or generalization, Sowa Ontology, Metadata, and Semiotics.\nSymbol\u0026rsquo;s Duality Principle EVERYTHING is represented with a symbol  There is a duality on the characteristics of a sign. Symbols play two roles at the same time that of a container and content. These roles cannot be separated, they always come in pairs. You may think in terms of how computer memory works to understand this. In digital computers EVERYTHING is represented with a sequence of bits, but this sequence is stored in an array of memory cells. Therefore any such fundamental construct, i.e. data structure, that can be build at a higher level should comply with a symmetrical design, i.e. Types, Instances, Values, and Relations-Associations all of them have to be constructed from these atomic fundamental constructs.\nThe Threefold Tower of Babel in Information Technology A concise synopsis of the chaotic situation that is present in information technology is this:\nThe user is experiencing a threefold Tower of Babel\n in semantic web and linked data - conceptual modelling, in computer programming - symbolic modelling in persistent or temporary storage and retrieval of information - data modelling.   Cross-References  HEALIS - 20120920 Ignite Athens 2012 LinkedIn - 20130920 Topic Maps Community LinkedIn - 20130920 Linked Data Web LinkedIn - 20130920 Semantic Technologies LinkedIn - 20130920 Database Developers and Architects Group LinkedIn - 20130923 Linked Data Web LinkedIn - 20130925 Semantic Web Research - URI Identity Crisis LinkedIn - 20130927 Semantic Web Research LinkedIn - 20131129 Computational Semiotics - The Variable-Value Pair LinkedIn - 20131129 Semantic Web Research - The Variable-Value Pair LinkedIn - 20131129 Topic Maps Community - The loss of interest in Topic Maps LinkedIn - 20131205 Semantic Web Research - About a better layered semantic structure LinkedIn - 20131212 Semantic Web Research - How about a noSPARQL and noLinked Data movement LinkedIn - 20131213 Semantic Web Research - Linked Data, an unnecessarily complicated technology LinkedIn - 20131213 NoSQL - How about a noSPARQL and noLinked Data movement LinkedIn - 20131213 Chief Information Security Officer - How about a noSPARQL\u0026hellip;. LinkedIn - 20131213 Graph Databases - How about a noSPARQL and noLinked Data movement LinkedIn - 20131219 Semantic Web Research - Retrofitting, the reality, (CubeWeb) LinkedIn - 20140109 Semantic Web Research - The best debate ever in computer science LinkedIn - 20140109 Topic Maps Community - The best debate ever in computer science LinkedIn - 20140307 Semantic Web Research - R3DM All right, All right, All right LinkedIn - 20140307 Semantic Web Research - Data and metadata LinkedIn - 20140416 Semantic Web Research - R3DM Conceptual Model Explained LinkedIn - 20140416 Semantic Web Research - R3DM a glimpse from the future LinkedIn - 20140417 Computational Semiotics - R3DM A computational semiotics interpretation LinkedIn - 20140428 Computational Semiotics - R3DM An explanation of the identity crisis LinkedIn - 20140428 Semantic Web Research - R3DM An explanation of the identity crisis LinkedIn - 20140430 Semantic Web Research - Something very big is coming Wolfram Language LinkedIn - 20140509 Semantic Web Research - Linked Data vs Linked Documents LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria LinkedIn - 20140613 Computational Semiotics - First Attempt to Formalise R3DM LinkedIn - 20140613 Semantic Web Research - R3DM Formalization v1 LinkedIn - 20140617 Semantic Web Research - R3DM Formalization v2 LinkedIn - 20140617 Computational Semiotics - R3DM Formalization v2 LinkedIn - 20140617 Functional Programming - Best paradigm for implementing R3DM LinkedIn - 20140629 Semantic Web Research - Crossroad of Database, Functional Programming and Semantics LinkedIn - 20140802 Semantic Web Research - The Threefold Tower of Babel in Information Technology LinkedIn - 20140802 Mathematica Users - The Threefold Tower of Babel in Information Technology LinkedIn - 20140802 Artificial Intelligence - The Threefold Tower of Babel in Information Technology LinkedIn - 20140802 Topic Maps Community - The Threefold Tower of Babel in Information Technology LinkedIn - 20140802 Computational Semiotics - R3DM perspective on Wolfram Technology LinkedIn - 20140802 Greek IT Network - The Threefold Tower of Babel in Information Technology LinkedIn - 20141010 Topic Maps Community - R3DM: A new paradigm on data modelling LinkedIn - 20141010 Semantic Web Research - R3DM: A new paradigm on data modelling LinkedIn - 20141010 Mathematica Users - R3DM: A new paradigm on data modelling LinkedIn - 20141023 Mathematica Users - The Role of Mathematica in semantic technology LinkedIn - 20141027 Semantic Web Research - Semantic Web Research in a poetic style LinkedIn - 20141030 Semantic Web Research - AtomicDB LinkedIn - 20141103 Semantic Web Research - Connecting values at an atomic level LinkedIn - 20141103 Chief Information Security Officer - New paradigm for data modelling in the NoSQL world LinkedIn - 20141103 Semantic Web Research - An unusual criticism on RDF LinkedIn - 20141104 Semantic Web Research - RDF is that the most basic data model you can think about LinkedIn - 20141104 Mathematica Users - Symbolic expressions in mathematica and the RDF model LinkedIn - 20141105 NoSQL - Direct linking of two nodes with bidirectional pointers LinkedIn - 20141124 Computational Semiotics - The core terms of R3DM from two perspectives LinkedIn - 20141124 Computational Semiotics - R3DM Trilateral Relations LinkedIn - 20141124 Computational Semiotics - R3DM Principles The Dogma LinkedIn - 20141124 Semantic Web Research - R3DM The core mechanism of abstraction LinkedIn - 20141230 Semantic Web Research - R3DM What do we really miss in data modelling field LinkedIn - 20170317 Computational Semiotics - S3DM/R3DM Triangle of Meaning  ","date":1380585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1380585600,"objectID":"cf1230fa86c5900a71da1875e8cef774","permalink":"https://healis.eu/en/project/r3dm/","publishdate":"2013-10-01T00:00:00Z","relpermalink":"/en/project/r3dm/","section":"project","summary":"S3DM (Signified-Sign-Signifier) or R3DM (Resource-Representation-Realization) is a conceptual model of an information processing system based on semiosis.","tags":["Upper_ontology","Semantic_Web","Topic_map","Formal_ontology","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Information","Computational_semiotics"],"title":"S3DM/R3DM","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Q\u0026amp;A session on R3DM/S3DM  What is information What is an information resource What kind of information resources we have What is an information reference What is information representation What is information realization Why semantic models like RDF/OWL and TMDM are not sufficient for the semantic web Is there an analogy of your model with the object-oriented programming paradigm where you have reusable and composable structures Semantic web or the web of linked data is using URIs to identify and to address information resources, is there a difference in your model What is the outmost objective with your R3DM data model Domain Independent Abstraction and Kinds of Relations   Cross-References   Q\u0026amp;A session on R3DM/S3DM What is information In Greek we call it, (plērophoria) from πλήρης (plērēs) \u0026ldquo;fully\u0026rdquo; and φέρω (phorein) frequentative of (pherein) to carry through. It means to carry, to convey a message thoroughly, exhaustivelly, in a complete way. It is strongly related to the formation of the message, it depends on the sign vehicle we use to transmit the message.\nWhat is an information resource It is a container of information. In the computer world a data container such as a blog, a web address, physical memory, computer hard disk. In the physical world any object can be an information resource.\nWhat kind of information resources we have A binary information resource (BIR) is a container of information about concepts related to the computer world, such as a web page, a file, an email, a database record, a programming variable. A term information resource (TIR) is a more generalized concept than BIR. TIR is extended to cover any term in general including those we use in our daily human to human communication. Both BIR and TIR represent abstract concepts. These are constructs that we use at the semantic, ontological layer of R3DM.\nWhat is an information reference An information reference is the source of information resource. It is where it gets its meaning, it is the place it was originally conceived or defined. Any BIR or TIR is conceived in the human mind in the process of thinking. Therefore it follows naturally that they are referenced accordingly. Human concepts are presented from the sender in a verbal, oral, visual, or written way and are perceived from the receiver. Regarding to the meaning, the semantics of the transmitted information, there is strong connection between the interpretant and the sign vehicle used to carry information. The sign vehicle is strongly dependent on the information reference, i.e. the interpretant. We can have more than one interpretations for the same sign, and likewise any sign is referenced in many ways.\nWhat is information representation Let us take things from the beginning. We have a concept in a human mind. The concept is presented in some perceivable way with symbols, icons, words, spoken sounds, etc. This represents an object of the real world that we want to talk about. In a computer we use metaphores: for example the desktop environment with files and folders on it. In fact any object of the real world can be represented in many ways on a computer screen: characters, numbers, images, sounds, books.\nWhat is information realization Everything that is represented in a computer is in fact encoded in a binary format. Any content, such as text for example, can take many forms but at the end it is stored or transmitted in a binary format. In computers, this is the lowest level of information, it is the data level.\nWhy semantic models like RDF/OWL and TMDM are not sufficient for the semantic web First let me make something clear. Semantic web is not the web of linked data, it is simply an approximation. In Web 1.0 and 2.0 we were linking documents, e.g. web documents, files. What is different now, is that we also link structured data, from relational databases, from RDF databases. But we are still in the data level. In my opinion Web 3.0 has to be differentiated from the current web, it has to create a distinct layer on top of the existing linked data layer with its own referencing scheme that can be resolved with the current URI scheme. This will have its own way to define and handle terms, concepts, relations, axioms, rules, the structural components of an ontology. The semantic web, is an ontological web. Everything else should revolve around it, data population, ontology enrichment, subject indexing, searching, matching, sharing.\nWe can not make a significant progress on the \u0026ldquo;semantic web\u0026rdquo;, because there is not a model that combines the three main models of information architecture:\n The database model (data level - Information Realization), The programming model (symbol level - Information Representation) and The semantic model (human level - Information Referencing).  Indeed, there is ongoing research on RDF data model towards a semantic object framework, to bridge the gap between RDF and object-oriented programming and there are also researchers that investigate the mismatch of RDF with graph models and graph databases, especially property graph databases. R3DM is looking into combining those two interpretations of RDF by utilizing a post-relational database and a native object script language.\nIs there an analogy of your model with the object-oriented programming paradigm where you have reusable and composable structures I think the first question that has to be answered, is how we define the fundamental unit of information processing. Remember, in Topic-Maps Data Model everything is a topic. In our writing system, word-lexeme-morpheme, is our fundamental unit. The current progress with graph databases, and the long research with RDF triplets indicate, that indeed, we can define such a unit. Let us call this information node (iNode). The new question you should ask is how exactly these nodes are related. How do we represent relations ? The encoding of information into triplets has started long time ago, both with the Entity-Attribute-Value databases and now with the linked data movement. Although OWL is supposed to bridge the gap between programming and semantic relations, in practise this has never been achieved! A new programming language that will be based on a transparent handling of semantic relations and the corresponding data management is absent. This new programming language must be closely connected to the database layer.\nSemantic web or the web of linked data is using URIs to identify and to address information resources, is there a difference in your model We are trying to develop a new, semantic web, layer on top of the previous one, where the document, i.e. web page, file, etc is the basic unit of information. The two layers can communicate with the current web addressing infrastructure but the new layer MUST have its own referencing scheme. A scheme that will be used both for retrieving and updating purposes. The naming/identification issue is also of critical importance here.\nWhat is the outmost objective with your R3DM data model The current www is based on content (data) and addressing (hypelinks) and the main founder and visioner of the Web Tim Berner\u0026rsquo;s Lee cries out \u0026ldquo;put the data on the web\u0026rdquo;. But the point is how to represent and link the human knowledge on the web, things like concept maps (Novak), conceptual graphs (Sowa) and these are based on linking concepts, not data. I would like to see the web of linked concepts. I see an obsession in many for machine readable data. The point is how our technology can assist us in making fast and smart decisions, in solving extremely complicate problems of interdisciplinary nature and machine readable data is just part of it.\nDomain Independent Abstraction and Kinds of Relations I think it is fundamental for the improvement of this kind of “Semantic Web”, LinkedData Web, if there is going to be some effort to describe and represent abstraction and relation types. We would not have to deal with such a chaos of alignment and mapping on predicates if there was some generally acceptable template, formula on what kind of Domain Independent Abstractions exist and how we can formulate them.\nPart of my R3DM data model and the work in it, is to define such a schema. I will give you a flavour here with an example that is characteristic of the confusion that exists between two specific generic relation types, (1) inheritance-subtyping and (2) hypernymy-hyponymy. Consider the following:\n  (1)\tMusic composition \u0026mdash;- isBroaderThan \u0026mdash;\u0026gt; Sonata\n  (1)\tSonata \u0026mdash;- isNarrowerThan \u0026mdash;\u0026gt; Music Composition\n  (2)\tMusic Instrument \u0026mdash;- isHypernymOf \u0026mdash;\u0026gt; Wind Instrument\n  (2)\tWind Instrument \u0026mdash;- isHyponymOf \u0026mdash;\u0026gt; Music Instrument\n  Notice that both relations are symmetric and we need to define both directions. Each entity plays also a specific role in that relation. Now, if we can find a consistent way to describe relations that will make life much easier for both the developers and the researchers in “Semantic Web” area.\nIn my opinion, we can define three broad classes of hierarchical relations that create all kinds of taxonomies (read more about them in other recent posts in this group).\n  Generalization-Specialization expressed with the predicates nulon:isBroaderThan and nulon:isNarrowerThan and the roles Superior, Subordinate\n  Hyponymy-Hypernymy expressed with the predicates nulon:isHypernymOf and nulon:isHyponymOf and the roles Hypernym, Hyponym\n  Holonymy-Meronymy expressed with the predicates nulon:isWholeOf and nulon:isPartOf and the roles Whole, Part\n  Triples can be seen as binary predicates, but n-ary relations is a very natural way of thinking about many things such as events. This is exactly the point of a big divergence among TopicMapDM, RelationalDM, GraphPropertyDM, Freebase DM, Associative DM, RDF/OWL DM and others.\nI think modelling n-ary relations is not the root of the problem. The mother of all problems in data modelling is the bootstrap mechanism of creating types and the absence of a single universal Upper Level Ontology as the gold standard to define core basic types. Take Freebase for example, they have defined from scratch their own type system.\nThis again cannot be seen in isolation of the data structures, a low level issue, that one is using to permanently store or process the data. This is why I insist that software engineers have to think in at least three perspectives of R3DM semiotic data model, i.e. the semantic, the symbolic and the storage.\nCross-References  LinkedIn - 20130403 Greek IT Network LinkedIn - 20130920 Topic Maps Community LinkedIn - 20130927 Semantic Web Research LinkedIn - 20131129 Computational Semiotics LinkedIn - 20131227 Semantic Web Research - Domain Independent Abstraction and Kinds of Relations LinkedIn - 20131229 Semantic Web Research - Taxonomy Relations - My perspective LinkedIn - 20131129 Computational Semiotics - About Binary and N-ary relations  ","date":1380585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1380585600,"objectID":"032851fd6764d1ac2b7def60b58cc05a","permalink":"https://healis.eu/en/post/20131001/","publishdate":"2013-10-01T00:00:00Z","relpermalink":"/en/post/20131001/","section":"post","summary":"Old wiki pages on R3DM ported from neurorganon.org","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Information"],"title":"S3DM/R3DM Q\u0026A","type":"post"},{"authors":["Athanassios I. Hatzis, PhD","Robert Ford"],"categories":null,"content":"Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://healis.eu/en/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Information Resources and Real-World Objects Origins of a new theoretical framework on information representation Cross-References   Information Resources and Real-World Objects  The distinguishing characteristic of these resources is that all of their essential characteristics can be conveyed in a message. We identify this set as information resources 1\n Assume we accept this definition for \u0026ldquo;information resources\u0026rdquo;. Let us take a real apple. Then we ask ourselves, is that apple an information resource according to the previous definition. In my opinion, the answer is No. Because we cannot convey all the essential characteristics of an apple in a message, even if the message is transmitted through conventional human to human communication channels. If someone has not tasted an apple before then you cannot convey that characteristic in a message. One has to eat the apple to learn about that characteristic and many more.\nIn addition to that, many will be familiar with pictures like the following one from artist Rene Magritte showing a pipe and underneath a text message in French saying \u0026ldquo;this is not a pipe\u0026rdquo;.\nWell this is not a pipe indeed, it is an information resource about a pipe. To be more specific this is a visual representation (image encoding) of a pipe. Or you may also say we present graphically, we draw a pipe. It is something that refers to a real pipe, but it is not the pipe. In fact, no matter what is the volume of information you are going to use about a real pipe, you will never manage to convey the true or full meaning of what a pipe is. But enen in the case we approach a very detailed description of something, then the main obstacle is the interpretant and the interpretation of the message.\nIn a more recent effort of W3C to distinguish between digital information resources and real-world object it uses URIs to identify both of them.\n On the Semantic Web, URIs identify not just Web documents, but also real-world objects like people and cars, and even abstract ideas and non-existing things like a mythical unicorn. We call these real-world objects or things 2\n This is part of a bigger problem due to the inherited weak logic, theory and definitions that support RDF data model. The reader can search for many of these discussions that have appeared on the web under the search term \u0026ldquo;web identity crisis\u0026rdquo;. I believe the root of the problem lies on the inadequate meaning of word information as it is expressed in English. Linguists are aware of the distinction between signifier and signified and Greek language is serving well that purpose as the word \u0026ldquo;plērophoria\u0026rdquo; (signifier) conveys better the meaning of the word \u0026ldquo;information\u0026rdquo; (signified).\n The ancient Greek word for information is πληροφορία, which transliterates (plērophoria) from πλήρης (plērēs) \u0026ldquo;fully\u0026rdquo; and φέρω (phorein) frequentative of (pherein) to carry through. It literally means \u0026ldquo;bears fully\u0026rdquo; or \u0026ldquo;conveys fully\u0026rdquo;. In modern Greek the word Πληροφορία is still in daily use and has the same meaning as the word information in English. In addition to its primary meaning, the word Πληροφορία as a symbol has deep roots in Aristotle\u0026rsquo;s semiotic triangle. In this regard it can be interpreted to communicate information to the one decoding that specific type of sign. 3\n Origins of a new theoretical framework on information representation We propose a new theoretical framework that will cover RDF/OWL and Topic Map data models, the EAV model in RDBMS and the object-attribute-value model in OOP. So far there have been very weak attempts to bridge the gap among the Semantic Web, the Relational Databases world, the Object-Oriented programming community and recently the NoSQL Databases arena. All these need a solid theoretical framework that unifies them and an implementation that exhibits that these technologies are simply different perspectives of the same approach to information representation.\nCross-References  LinkedIn - 20130403 Greek IT Network LinkedIn - 20130403 Topic Maps Community  LinkedIn - 20130403 Semantic Technologies  LinkedIn - 20130403 Semantic Web Research LinkedIn - 20130403 Database Experts LinkedIn - 20140613 Computational Semiotics - Information vs Plerophoria LinkedIn - 20150523 Article - Plerophoria vs Information    Architecture of the WWW, W3C Recommendation 15/12/2004, section 2.2 URI/Resource Relationships\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Cool URIs for the Semantic Web, W3C Interest Group Note 3/12/2008, section 3 URIs for Real-World Objects\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Wikipedia, the Etymology section of the term Information was updated by user Healis with the quoted text above on the 13th of June 2014\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1364947200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1364947200,"objectID":"9e7b99991b6125d7dbca008b219b66be","permalink":"https://healis.eu/en/post/20130403/","publishdate":"2013-04-03T00:00:00Z","relpermalink":"/en/post/20130403/","section":"post","summary":"The problem of defining, representing and identifying an information resource","tags":["Semantic_Web","Topic_map","Sign_(semiotics)","Triangle_of_reference","Signified_and_signifier","Information"],"title":"Origins of a new theoretical framework on information representation","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Visit Demo Site Introduction Neurorganon Upper Level Ontology (NULON) is a top-level ontology also known as a foundation ontology. It includes a list of very general terms grouped in ontological distinct categories , such as address , agent, artifact, device, document, space, time and many others. These categories determine the most fundamental and the broadest classes of information resources. In NULON members of each class, i.e. vocabulary terms, preserve the same meaning across more specific knowledge domains and other reference work. In that aspect it is similar to a thesaurus because it groups together terms in disjoint collections of mostly similar concepts and it is like a dictionary because it can also include multiple, multi-lingual definitions. It is also an ontology because it defines relations and properties that describe how the terms can be linked together or bind them to web, computerized information resources. NULON recent version, numbers more than 500 core vocabulary terms grouped in 47 maximally disjoint categories. All these terms have been consistently mapped to standard definitions from at least two major reference works in the realm of semantically linked data; OpenCyc and Wikipedia. Respectively their information resources are used as identifiers and references for NULON terms. Most important, at this stage of architectural design what makes NULON really different from other Upper-Level Ontologies is the kind of grouping of the terms and the categories included and described in the οntology. This is the result of a big effort, the whole year, from a single person, to discover and organize efficiently most terms related to information technology, including abstraction, management, computer programming, data storage, metadata, data modeling, identity, reference, design patterns, web use, digital resources and devices to name a few of them.\nFrom NEURON to NULON  A computer is a general purpose, programmable electronic device, for storing and processing data. From the era of personal computers to the age of mobile devices, we are storing data into files and web pages. We are processing electronic documents with myriads of formats. We organize our file collections into hierarchies with folders. We use them to share information. So far the digital document is the main vehicle of information exchange and at the same time the obstacle for effective management of information and interconnection of information systems. Information technology industry is still waiting for the promised revolution in terms of web software and services.\nThis partly happened with Web 2.0, the social collaborative user environment that made the need to escape from the document centric computing more urgent. The published content has to be independent of the container so that it can be viewed in many alternative ways and combined easily in many forms. In all these years of computing evolution, there is very little that has been achieved to bridge the gap that exists between the presentation of information to the user and the storage of information on the computer.\nBut what if we could unify and standardize the processing of information from the lowest level of storing data up to the highest level of consuming the data as interconnected pipeline services. Then the flow of information, the interoperability of services and the communication among users can be achieved by defining a new kind of data abstraction that will enhance and gradually replace the electronic document. This is the information resource/reference (IR) a term that is so confused and obscure in Semantic Web technologies.\nYou can now start drawing the analogy from computer networks to neural networks. IR is the fundamental unit of processing similar to “neuron”, and the Neurorganon project has already implemented IR in NULON (Neurorganon Upper Level Ontology), a solid theoretical framework that is the foundation for linking concepts together and attaching binary information resources (BIRs). With NULON we can model any kind of data as a graph with nodes (IRs) and edges (associations) and store permanently the network of information in state of the art database management systems that are also based in graphs, the perfect marriage for data modeling.\nMost important, with NULON it is now possible to reuse, redesign, repurpose, recombine and interconnect existing software tools for extraction, integration, transformation and visualization of information. Tools will be commercialized, or offered for free, as services and will be used to connect NULON to Web Browser Applications and Graph databases. Eventually we foresee the empowerment of a user with a decentralized network of services that will place him or his community group in charge of a personalized, specialized knowledge graph that will be tailored to his needs.\nFinally, with respect to organized information, new browsing methods will appear on the web. These will be present in the form of linked autonomous networks of concepts that will be either automatically created or semi-automatically designed by the expert user again with the help of software as a service. There has to be control for the level of detail and the depth of information, as well as a highly interactive environment to experiment with the visualization of data and the various templates that will assist in the dissemination of information from and to the user.\nArguably the most challenging aspect on this kind of megaproject is to make the user to feel in a natural and comfortable way as it is most often the case when he is browsing the internet or when he sends an email to a friend. One has to experience the new environment and the services in relation to other internet users and tasks that he/she is already accustomed to accomplishing.\nThe team behind the Neurorganon/NULO project will be aligned with that scope in mind, and the experience and skills of the members involved will eventually guarantee a mature and viable technology and methodology that will lead the development of new generation products and services in the information technology industry.\n","date":1354579200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1354579200,"objectID":"8554b6353dae011fe41b35cc996f37c6","permalink":"https://healis.eu/en/project/nulon/","publishdate":"2012-12-04T00:00:00Z","relpermalink":"/en/project/nulon/","section":"project","summary":"Neurorganon Upper Level Ontology is an attempt to define the core ontology of Web 3.0 in a practical, well defined, standardized and consistent way.","tags":["Upper_ontology","Semantic_Web","Topic_map","Formal_ontology","Namespace","Abstraction_(software_engineering)","Type_system"],"title":"NULON","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Semantic_Web"],"content":"Table of Contents  Introduction About Ignite Talk  Rehearsal Live performance Presentation     Introduction In computers, information is always encoded in binary data format and it is processed accordingly. But the presentation of information to humans is dependent on the use of it. This becomes most evident when we compare a computer programmer to the end-user of an application or the web. A programmer can read and understand code in many programming languages, he can process the content of a file in many different formats. He uses various forms of symbol representation to manage information and interact with the machine. Indeed, in the history of computer science there are numerous examples of handlers that play such a role, e.g. file and folder referring to data stored permanently, URL addresses referring to web resources, primary and foreign keys referring to tables of data, names for classes of objects and their instances referring to the encapsulated data and methods.\nIn all cases the common ground for representation of information, the vehicle of information communication, appears to be some symbol, a\u0026quot;sign\u0026quot; according to Peirce theory, that represents the actual thing itself. Fortunately that \u0026ldquo;sign\u0026rdquo; has already been modelled in a standard way that of Topic Maps ISO/IEC 13250. Nevertheless what has not been realised so far in computer systems is the concept, i.e. topic, centric use of applications. Within this perspective there is a clear distinction between an existing digitised information resource, e.g. web document, and the abstract notion of a concept, e.g. wikipedia, where the first is linked to the second. Instead of that, proponents of semantic web contemplate linking everything as a resource. As a result we are still revolving around web documents with metadata that describe them. We can escape from this fallacy. Imagine a global network of linked topics and a tour guide from WWW to GGG, from the world of linked documents to the world of linked concepts and subjects. You journey has just begun.\nAbout Ignite Ignite is a fast-paced geek event started by Brady Forrest, Technology Evangelist for O’Reilly Media, and Bre Pettis of marketbomb.com, formerly of MAKE Magazine. Ignite is a global event, organized by volunteers, where participants are given five minutes to speak about their ideas and personal or professional passions, accompanied by 20 slides. Each slide is displayed for 15 seconds, and slides are automatically advanced. The following presentation is my talk as a pitcher, at the first Ignite event in Athens, Greece.\n  Talk Rehearsal This is a rehearsal of the talk I gave at Ignite Athens. You may watch it on youtube, or see the slides below for a transcription of my talk. Clicking on the content of any slide you will be transfered at that point in time of the corresponding youtube video\n  Live performance   Presentation  ","date":1348099200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597449600,"objectID":"60fc879f939191c3d142ee7f8b470a8a","permalink":"https://healis.eu/en/talk/ignite_athens_2012/","publishdate":"2012-09-20T00:00:00Z","relpermalink":"/en/talk/ignite_athens_2012/","section":"talk","summary":"In the history of human mankind, map has always been of primary importance for any kind of human exploration. From the era of great maritime explorers to the era of brain and genome mapping, cartography has continually changed in order to meet the demands of map users. Nevertheless semantic and concept mapping of data on two or three dimensions has several challenging problems to attack. Naming and complexity of objects on the map, representation of relations, layout and presentation, navigation and editing, are among a few to consider. Despite the difficulties that arise on the visualisation part of information architecture, the central issue lies elsewhere. We argue, that the cornerstone for building the next generation of information systems, including the internet, is a well defined and standardised unit that will be human readable for measurement and exchange of information. The equivalent notion of an information unit for machines is indeed one of the most impressive characteristics of our digital information age and it is based on the power of abstraction we apply to a series of two digits only, 0 and 1, in order to conceptualize visually and aurally human information processing. Files and documents, databases and programming languages, web applications and services, email and digital media, enhance the way we communicate with others. Our perceptibility for the world around us is strengthened.","tags":["Upper_ontology","Semantic_Web","Topic_map","Formal_ontology"],"title":"From WWW, the Uncharted World Wide Web, To GGG, the Charted Giant Global Graph","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Table of Contents  Definition At A Glance Target Group Clinical Features Technical Features Advantages Screen Captures Documentation NeuroHEALIS vs MEDILIG Cross-References   Definition MEDILIG – Medical Life Guard: An Electronic Health Record (EHR) / Electronic Medical Record (EMR) cross-platform software for the design, implementation, and use of autonomous, open, database models for multilingual medical knowledge management systems from primary care to continuing care.\nAt A Glance Fully tested, fully operational open-platform EHR/EMR software for health professionals and IT developers. The main feature of the project is the extensive continuous health care record schema of the database built into popular and robust relational database management systems, Microsoft SQL Server and MySQL server, with multilingual, international health coding standards. Create entry forms, catalogues, and reports with a minimal effort from rapid application development environments such as Microsoft Office – Access and OpenOffice – Base. Connect to web hosting services and/or use email to exchange and share medical information with others.\nTarget Group MEDILIG can be easily adopted to the workflow of a clinic or the practise of a physician. It may also customised as a personal health record to include all the data from patient encounters.\nClinical Features  Supports the management of patient’s administrative and clinical data including:  admissions visits demographics history operations labs imaging medical transcription multimedia documents   Fully tested and operational on the neurosurgery domain with a lot of data  Technical Features  It can be tailored quickly to cover precisely the needs of any medical specialty or physician It can be linked easily to other databases An extensive database schema for continuous health care that follow standard clinical practice terms with an easy nomenclature for developers Complete separation of the database schema from the presentation layer, independent development of the database layer Visualization of MEDILIG schema as an ontology in Protege or as a graph in DBVisualizer Multilingual look-up tables with international health care coding standards (ICD10, OPCS44, NHS, LOINC, SNOMED) for the encoding of information Microsoft Technology platform version based on popular SQL Server and Access products Linux open software platform version based on MySQL Server and OpenOffice Base products Truly rapid application development thanks to the powerful integrated environment of SQL Server – Access and/or MySQL – OpenOffice No coding for creation of catalogues, reports, entry forms and navigation through them Secure and easy database administration with Microsoft SQL Server or MySQL server  Advantages  MEDILIG is open software therefore it has all the advantages of open software such as non-exclusive support from a community of technical users and developers. HEALIS is coordinating MEDILIG support, development and dissemination of information to the users MEDILIG is distributed freely without any charge MEDILIG is a collaborative software tool and it can be part of a collaborative software platform for health professionals MEDILIG is ideal for research and education thanks to the open database architecture MEDILIG maintenance is a relatively easy task and can be automated for the non-expert, non-technical user  Screen Captures              Documentation The full documentation of the project can be accessed on [this post][19].\nNeuroHEALIS vs MEDILIG NeuroHEALIS was the precursor of MEDILIG, a health information system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use.\nCross-References   SourceForge – MEDILIG Project Official Repository\n  Crunchbase - MEDILIG - Medical Life Guard - HEALIS Product\n  Microsoft CodePlex Open Source Community – MEDILIG Project registered\n  Medical Free/Libre and Open Source Software (MEDFLOSS) – MEDILIG Project registered\n  Medical Free/Libre and Open Source Software (MEDFLOSS) - MEDILIG listed and ranked by popularity\n  Free and Open Source Software for Health - MEDILIG Listed in eHealth Applications\n  Greekmeds - Post about MEDILIG Project\n  Thomas Karopka EFMI LIFOSS WG at Google - MEDILIG Project\n  Health Informatics Forum - Comment about MEDILIG\n  Herb Lainchbury Blog - Open Data vs Open Source - Comment about MEDILIG\n  LinuxMedNews - MEDILIG Project Posted\n  50 Awesome Open Source Apps You\u0026rsquo;ve (Probably) Never Heard Of - MEDILIG Listed\n  Re: MEDILIG project with OdBL + GPL License -\tDiscussion\n  ","date":1284336000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1284336000,"objectID":"fbc5e0dec318d33961a5576ada158b19","permalink":"https://healis.eu/en/project/medilig/","publishdate":"2010-09-13T00:00:00Z","relpermalink":"/en/project/medilig/","section":"project","summary":"Open-source Electronic Medical Record for health professionals and IT developers for multilingual medical knowledge management systems from primary care to continuing care","tags":["Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"MEDILIG","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Changes on This Release  New file system structure and documentation Use of MEDILIG database with MySQL and OpenOffice Automation of installation and setup procedure of MEDILIG database and Microsoft Access front end Visualization of MEDILIG schema as an ontology with Protégé software tool Visualization of MEDILIG schema as a graph and database management with DBVisualizer software tool Web analytics from SourceForge  It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   Download Statistics The graph shows the number of downloads for a period of five years. MEDILIG main distribution file (.zip) has been downloaded on an average about 60 times/month and the average download rate for any file of the distribution is equal to 170 times/month.\nDocumentation Readme First It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   Introduction It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   Microsoft Access Front-End  Installation User Guide  Microsoft MSQL Server Back-End  Installation User Guide  ","date":1284336000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1284336000,"objectID":"847fb9840eca502ad28dca6053d73aee","permalink":"https://healis.eu/en/post/20100913/","publishdate":"2010-09-13T00:00:00Z","relpermalink":"/en/post/20100913/","section":"post","summary":"Second release of MEDILIG at SourceForge","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"MEDILIG Second Release","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"This is a summary from a post that I wrote for Open Knowledge Foundation discussion list\n{\u0026lt; toc \u0026gt;}\nDefinitions Wikipedia Open Data\nWikipedia Open Source\nOpen Source licenses control the use of computer programs (software) while open data licenses such as Open Database License (ODbL) concern primarily the use of databases and their content. Nevertheless a database often constitutes part of the software. Therefore there is some overlap between the two. The following questions and answers demonstrate a real life scenario that is based on MEDILIG project.\nQ\u0026amp;A Session Why do you apply two licenses ODbL and GPL for the MEDILIG project ? MEDILIG project is a software product/service and it also includes a database. The use of the databasecannot be covered with a GPL license.\nSoftware is normally covered by software licenses. Why did not you apply only GPL license ? GPL does not tell you anything about who controls the database and what are the rights of the user on the database. For example consider the deployment scenario where the software is open but the database is locked. Does the user have the right to unlock the database, does he have the right to export or import his data from/to the database and in what extent? Can he create a derivative database or use the existing one collectively as part of other system developed? Software developers and/or vendors often use databases as leverage to lock users into support contracts and licenses. ODbL grant rights to the user and prevents this behaviour. It is section 3.0 and 4.0 of the full license text .\nWhat parts of the database you cover with OdBL ? Section 2.2a of ODbL license says that it is likely to cover database model or schema. This is true, you may cover the general design, but you cannot cover specific details of the database schema, e.g. Microsoft SQL Server implementation. You can do that only by GPL because it is coding. Another useful distinction between ODbL and GNU GPL.\nWhat about the contents of the database ? There is the content of look-up tables which is usually static, it hardly ever changes, and the content of main tables where you expect to find all sort of information that is added dynamically or exists, such as factual data, images, etc. In my opinion there should be a distinction of the two because look-up data is part of the design and/or customisation of the database. On the contrary content data that the user added on an empty database delivered by the developer have a separate copyright.\n","date":1281398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1281398400,"objectID":"b15525392a3d451175125c72946099fe","permalink":"https://healis.eu/en/post/20100810/","publishdate":"2010-08-10T00:00:00Z","relpermalink":"/en/post/20100810/","section":"post","summary":"Why do you apply two licenses ODbL and GPL for the MEDILIG project ?","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record","Software_license","Intellectual_property"],"title":"Open Data vs Open Source Software","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Extract from a post to gnusolidario forum of Luis Falcon Recently I released to the public MEDILIG project v1.0 (MEDILIG Source at Sourceforge) under a combination of two licenses GPL and ODbL.\nThe current implementation is based on a combination of Microsoft SQL Server and Microsoft Access and there is minimal coding. Therefore a quick conclusion would be that this is a health software under a proprietary operating system. But that limits completely the horizon for this project. Let me throw here a few critical MEDILIG features for discussion.\nI chose to implement the system under Microsoft Technology for two reasons\n Microsoft Technology is still very popular and there are millions of users that use a Windows PC. Microsoft SQL Server and Microsoft Access are also extremely popular. It is easy to maintain the server, it is easy to build a complex application in Access in days if not in a few weeks time! Leave aside all the toolkits for Microsoft Access and the great connectivity with other Microsoft Office applications. Since EMR/EHR applications need a lot of tuning and customization to cover the specific needs of the professional, I believe that this combination wins in speed as it concerns Rapid Application Development.  Conclusion: The main financial burden for the user is not the cost to run you application on a proprietary system; this may come free or with a very low cost for the user (e.g. included in the hardware price). It has to do with the the resources spent on building, modifying, updating, maintaining, expanding an application, and it also has to do with connectivity and interoperability issues.\n Now I will attempt to touch the last bit. Technical interoperability in HIT is only part of the problem. There is the semantics problem and the process/workflow dimension. You mentioned MEDICAL running in many different architectures. I consider the main point to be the architecture inside MEDICAL. If MEDICAL is based in a platform independent architecture, then that is the key issue for success. This is the main driving force behind MEDILIG   MEDILIG is using an extensive database schema for continuous health care that follow standard clinical practice terms with an easy nomenclature for developers. This is the main asset of MEDILIG, this is where most of my effort was concentrated on. I will be glad if others start comparing MEDILIG schema with any other open EMR/EHR software schema to realize the differences in the domain architecture. By the way, I started this project because I could hardly see any extensive relational database schema for continuous care. The domain schema in many projects is either too complex to understand, or it is hidden, etc. Why have we abandoned so easily relational databases for an object oriented approach? Aren’t there so many legacy and proprietary systems that are based on RDBMS. How easily migration can be achieved? I am an ambassador of open architecture techniques and not open software or open OS. I want to solve a domain problem as quickly as possible and as cheap as possible. MEDILIG supports complete separation of the database schema from the presentation layer. I strongly support the independent development for the database layer. Has there been any agreement worldwide on a minimal database ER schema for XHR (EHR, EMR, CCR, PHR,….) ? Have they discussed extensively how important is for a health professional to keep his data on a privately own database?  Finally a few lines about the presentation layer, I am skipping the business layer. The modern approach is that there is an integrated environment that provides you the GUI tools to build it and there is some way to connect your form/GUI with the database layer. MEDILIG is using Access only for demonstration purposes, you will see that the code is minimal. I believe that open health IT community of developers/user should head for open services. I have been inspired also from the Infopath Technology, particularly the idea that you can use the form with a set of data independent of the database server. I believe the most successful XHR application would be the one that offers the user the same flexibility as a word processor document or a spreadsheet. Many health professionals are still stuck with pen and paper. Perhaps the easy transition to the e-health era is to use electronic forms and documents on a tablet or on a PDA.  ","date":1271030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1271030400,"objectID":"e2943233110713f121d88633dab6f767","permalink":"https://healis.eu/en/post/20100412/","publishdate":"2010-04-12T00:00:00Z","relpermalink":"/en/post/20100412/","section":"post","summary":"Extract from a post to gnusolidario forum of Luis Falcon discussing MEDILIG software licenses","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record","Software_license"],"title":"Healthcare Software on Proprietary OS","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Definition MEDILIG – Medical Life Guard: An EHR/EMR cross-platform software for the design, implementation, and use of autonomous, open, database models for multilingual medical knowledge management systems from primary care to continuing care.\nAt A Glance Fully tested, fully operational open-platform EHR/EMR software for health professionals and IT developers. The main feature of the project is the extensive continuous health care record schema of the database built into popular and robust relational database management systems, Microsoft SQL Server and MySQL server, with multilingual, international health coding standards. Create entry forms, catalogues, and reports with a minimal effort from rapid application development environments such as Microsoft Office – Access and OpenOffice – Base. Connect to web hosting services and/or use email to exchange and share medical information with others.\nDownload Now Latest version from SourceForge\n","date":1269475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1269475200,"objectID":"68b79c00b97b44dce144aac284c61467","permalink":"https://healis.eu/en/post/20100325/","publishdate":"2010-03-25T00:00:00Z","relpermalink":"/en/post/20100325/","section":"post","summary":"First release of MEDILIG at SourceForge","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"MEDILIG First Release","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":null,"content":"7th International Conference on Information Communication Technologies in Health, Samos, July 26 2009 Athanassios Hatzis, George Stranjalis, Stergios Gatzonis, Marios Themistokleous, Lampis Stavrinou, Vassiliki Konofaou, Damianos Sakas\nDownload the presentation (.pptx) file\n ","date":1248566400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1248566400,"objectID":"f29ee13ba4f292078b4dd1e3c46d72fa","permalink":"https://healis.eu/en/talk/neurohealis-20090716/","publishdate":"2009-07-26T00:00:00Z","relpermalink":"/en/talk/neurohealis-20090716/","section":"talk","summary":"7th International Conference on Information Communication Technologies in Health, Samos, July 26 2009 Athanassios Hatzis, George Stranjalis, Stergios Gatzonis, Marios Themistokleous, Lampis Stavrinou, Vassiliki Konofaou, Damianos Sakas\nDownload the presentation (.pptx) file\n ","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"A Neurosurgical Health Information System for Integration of Clinical Research and Clinical Care","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Summary A Modern Neuro-Surgical Operating Room at Evangelismos General Hospital George Stranjalis1,2, Lampis Stavrinou1, Athanassios Hatzis2, Damianos Sakas1,2 Dept. of Neurosurgery, University of Athens, «Evangelismos» Hospital, Athens, Greece Hellenic Neurosurgical Research Centre, «Prof. Petros S. Kokkalis», Athens, Greece  Video Presentation   Paper It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   About NeuroHEALIS software NeuroHEALIS was the precursor of MEDILIG, a health information management system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use. NeuroHEALIS was also functional inside the operating room to capture video and to record operative details.\n","date":1241740800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1241740800,"objectID":"84571dd49368a52c893a18dbd6b4ee6e","permalink":"https://healis.eu/en/talk/neurohealis-20090508/","publishdate":"2009-05-08T00:00:00Z","relpermalink":"/en/talk/neurohealis-20090508/","section":"talk","summary":"Our newly built modern operating theater is a vital addition to the refinement of neurosurgical techniques and essential to the development of minimally invasive surgery in the Neurosurgery Clinic at «Evangelismos» General Hospital. There is a constant demand for changes as we strive to improve our practices and the environment for the benefit of our patients. These changes are heralded by our new operating theater. The modern operating room requires an increasing number of new surgical instruments, monitoring and imaging devices, information systems, and communication networks. We paid attention to the integration of all these resources in order to improve the quality and efficiency of our surgical and training procedures.","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"A Modern Neuro-Surgical Operating Room at Evangelismos General Hospital","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Διαγράμματα Προόδου 2008-2009 It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   ","date":1232668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1232668800,"objectID":"8ebf3b2f6f59d1fda2831a15d0720bf9","permalink":"https://healis.eu/en/post/20090123/","publishdate":"2009-01-23T00:00:00Z","relpermalink":"/en/post/20090123/","section":"post","summary":"Διαγράμματα προόδου για την ειδική βάση σπαστικότητατς του NEUROHEALIS","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"NEUROHEALIS - Ειδική Βάση Σπαστικότητας","type":"post"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Summary Based on the modern operating room at \u0026quot;Evangelismos\u0026quot; General Hospital, Department of Neurosurgery organized two advanced training courses in the year 2008, \u0026quot;Stereotactic Techniques and Deep Brain Stimulation\u0026quot; and \u0026quot;Computer-guided Neurosurgical Navigation\u0026quot; to train European neurosurgeons. The minister of public health Dimitris Avramopoulos congratulated Prof. Sakas and his team for the successful outcome of their efforts.\nVideo   Photos     About NeuroHEALIS software NeuroHEALIS was the precursor of MEDILIG, a health information management system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use. NeuroHEALIS was also functional inside the operating room to capture video and to record operative details.\n","date":1215648000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1215648000,"objectID":"e045d8bc9f9cc8d58035e1fb0869f1d6","permalink":"https://healis.eu/en/talk/neurohealis-20080710/","publishdate":"2008-07-10T00:00:00Z","relpermalink":"/en/talk/neurohealis-20080710/","section":"talk","summary":"Summary Based on the modern operating room at \u0026quot;Evangelismos\u0026quot; General Hospital, Department of Neurosurgery organized two advanced training courses in the year 2008, \u0026quot;Stereotactic Techniques and Deep Brain Stimulation\u0026quot; and \u0026quot;Computer-guided Neurosurgical Navigation\u0026quot; to train European neurosurgeons. The minister of public health Dimitris Avramopoulos congratulated Prof. Sakas and his team for the successful outcome of their efforts.\nVideo   Photos     About NeuroHEALIS software NeuroHEALIS was the precursor of MEDILIG, a health information management system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital.","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"Advanced Training Courses in Neurosurgery","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Table of Contents  Ελεύθερη Ανακοίνωση  Α. Σκοπός της μελέτης Β. Υλικό και μέθοδοι Γ. Αποτελέσματα Δ. Συμπεράσματα   Videos Photos About NeuroHEALIS software   Ελεύθερη Ανακοίνωση Η Συμβολή των Πολυμέσων στην Νευροχειρουργική Εκπαίδευση Α. Χατζής, Γ. Στράντζαλης, Θ. Φλάσκας, Σ. Παπάζογλου, Ε. Μποβιάτσης, Δ. Σακάς\n Ελληνικό Κέντρο Νευροχειρουργικής Έρευνας «Καθηγητής Πέτρος Σ. Κόκκαλης» Νευροχειρουργική Κλινική Πανεπιστημίου Αθηνών Θεραπευτήριο \u0026ldquo;Ο Ευαγγελισμός\u0026rdquo;  Α. Σκοπός της μελέτης Δημιουργία κατάλληλης υποδομής για την καταγραφή και ψηφιοποίηση της χειρουργικής επέμβασης, μετάδοση σε πραγματικό χρόνο και αρχειοθέτηση τμήματος αυτής σε ειδική βάση πολυμέσων.\nΒ. Υλικό και μέθοδοι Εφαρμόσαμε δύο μεθόδους για τη μετάδοση της επέμβασης. Πρώτον, με απευθείας σύνδεση από τη χειρουργική αίθουσα σε άλλη κατάλληλα διαμορφωμένη αίθουσα με αμφίδρομη μετάδοση εικόνας και ήχου και δεύτερον μέσω τοπικού δικτύου υπολογιστών με μετάδοση εικονοροής από το χειρουργείο σε άλλο σημείο του δικτύου. Βασικό τμήμα του εξοπλισμού είναι οι κονσόλες/μίκτες των σημάτων εικόνας και ήχου οι οποίες συνθέτουν την εικόνα και διαμορφώνουν τον ήχο από τις πηγές προς τους αποδέκτες. Οι συσκευές αυτές συνδέονται με ηλεκτρονικούς υπολογιστές που διαθέτουν ειδικές κάρτες Audio/Video και στους οποίους υπάρχει η βάση των πολυμέσων και το αρχείο ασθενούς.\nΓ. Αποτελέσματα Η μετάδοση σε πραγματικό χρόνο της επέμβασης του ασθενούς από το χειρουργείο στους συνέδρους και το προσωπικό της κλινικής με τη δυνατότητα επεξηγηματικής αφήγησης των τεκταινομένων από τους νευροχειρουργούς και τους συνεργάτες τους, καθώς και σύναψη αμφίδρομης επικοινωνίας με τη μορφή ερωτήσεων και απαντήσεων την ώρα της επέμβασης. Παράλληλα γίνεται η ψηφιοποίηση και η καταγραφή της επέμβασης σε βάση πολυμέσων που συνδέεται με τον φάκελο του ασθενούς.\nΔ. Συμπεράσματα Η εφαρμογή των πολυμέσων και των βάσεων δεδομένων για την εποπτική ενημέρωση-διδασκαλία και εκπαίδευση του προσωπικού και άλλων ενδιαφερομένων αποτελεί κριτήριο επιλογής της κλινικής μας ως εκπαιδευτικού κέντρου για την διεξαγωγή σεμιναρίων σε ξένους επιστήμονες. Συμβάλει δε σημαντικά στην επιμόρφωση των ειδικευομένων νευροχειρουργών.\nVideos     Photos        About NeuroHEALIS software Το πληροφοριακό σύστημα NeuroHEALIS υλοποιήθηκε στην Νευροχειρουργική κλινική του Πανεπιστημίου Αθηνών στο θεραπευτήριο \u0026ldquo;Ο Ευαγγελισμός\u0026rdquo; κατά τα έτη 2006-2009. Ο ηλεκτρονικός φάκελος ασθενούς που λειτούργησε στην περιόδο αυτή, ήταν ένα από τα υποσυστήματα του NeuroHEALIS. Αξίζει να σημειωθεί ότι το NeuroHEALIS ήταν ίσως το πρώτο πληροφοριακό σύστημα στο νοσοκομείο με πλήρη ιατρικό φάκελο ασθενούς που σχεδιάστηκε σε συνεργασία με ιατρούς και που εντάχτηκε πλήρως στην ροή λειτουργίας της κλινικής. Άλλα υποσυστήματα του NeuroHEALIS ήταν οι ειδικές βάσεις δεδομένων για ασθένειες όπως το Parkinson και η Σπαστικότητα. Βασισμένο στο NeuroHEALIS είναι το MEDILIG.\nNeuroHEALIS was the precursor of MEDILIG, a health information management system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use. NeuroHEALIS was also functional inside the operating room to capture video and to record operative details.\n","date":1213142400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597449600,"objectID":"d9b95e806759692439ea06eb45aead7f","permalink":"https://healis.eu/en/talk/enxe_22nd/","publishdate":"2008-06-11T00:00:00Z","relpermalink":"/en/talk/enxe_22nd/","section":"talk","summary":"Table of Contents  Ελεύθερη Ανακοίνωση  Α. Σκοπός της μελέτης Β. Υλικό και μέθοδοι Γ. Αποτελέσματα Δ. Συμπεράσματα   Videos Photos About NeuroHEALIS software   Ελεύθερη Ανακοίνωση Η Συμβολή των Πολυμέσων στην Νευροχειρουργική Εκπαίδευση Α. Χατζής, Γ. Στράντζαλης, Θ. Φλάσκας, Σ. Παπάζογλου, Ε. Μποβιάτσης, Δ. Σακάς\n Ελληνικό Κέντρο Νευροχειρουργικής Έρευνας «Καθηγητής Πέτρος Σ. Κόκκαλης» Νευροχειρουργική Κλινική Πανεπιστημίου Αθηνών Θεραπευτήριο \u0026ldquo;Ο Ευαγγελισμός\u0026rdquo;  Α. Σκοπός της μελέτης Δημιουργία κατάλληλης υποδομής για την καταγραφή και ψηφιοποίηση της χειρουργικής επέμβασης, μετάδοση σε πραγματικό χρόνο και αρχειοθέτηση τμήματος αυτής σε ειδική βάση πολυμέσων.","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"Η Συμβολή των Πολυμέσων στην Νευροχειρουργική Εκπαίδευση","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Table of Contents  Αποσπάσματα Το Άρθρο στην Εφημερίδα το ΒΗΜΑ About NeuroHEALIS software   Αποσπάσματα Πριν από 70 έτη ο διορατικός τότε καθηγητής Ιατρικής Πέτρος Κόκκαλης είχε «οσμιστεί» τη ραγδαία άνθηση που θα είχε ο τομέας της νευροχειρουργικής. Για αυτόν τον λόγο πιθανότατα κατέγραφε με κάθε λεπτομέρεια τα πεπραγμένα από τις πρωτοποριακές νευροχειρουργικές επεμβάσεις που διενεργούσε για την εποχή του με τα πενιχρά μέσα που διέθετε, μολύβι και χαρτί, δημιουργώντας έτσι την πρώτη «βάση δεδομένων» στον τομέα της νευροχειρουργικής στην Ελλάδα. Σήμερα, επτά δεκαετίες αργότερα, οι έλληνες νευροχειρουργοί του θεραπευτηρίου Ευαγγελισμός έχουν τη δυνατότητα- με τη χείρα βοηθείας της πιο προηγμένης τεχνολογίας- να αντικαθιστούν αυτές τις χειρόγραφες σημειώσεις με ψηφιακά δεδομένα τα οποία δομούν αναλυτικές, ηλεκτρονικές βάσεις που «χαρτογραφούν» τις νευρολογικές παθήσεις στη χώρα μας. Η πολύτιμη αυτή «χαρτογράφηση» είναι μία από τις ποικίλες δραστηριότητες του Ελληνικού Κέντρου Νευροχειρουργικής Ερευνας (ΕΚΝΕ) «Πέτρος Σ. Κόκκαλης», το οποίο εγκαινιάστηκε χθες το βράδυ επισήμως κατά τη διάρκεια ειδικής εκδήλωσης στο Μέγαρο Μουσικής Αθηνών.\nΤο Κέντρο δραστηριοποιείται σε διαφορετικούς τομείς. Ο ένας εξ αυτών αφορά τη δημιουργία και τη λειτουργία προηγμένων βάσεων δεδομένων, όπου καταχωρίζονται αναλυτικά τα στοιχεία των ιατρικών φακέλων των ασθενών που εισάγονται στη Νευροχειρουργική Κλινική του Ευαγγελισμού. Το όλο σύστημα λειτουργεί «on line», όπως εξήγησε στο «Βήμα» ο υπεύθυνος Ιατρικής Πληροφορικής του Κέντρου κ. Αθ. Χατζής. Οσα συμβαίνουν στο χειρουργείο, στους θαλάμους ασθενών ή στις Μονάδες Εντατικής Θεραπείας, αποστέλλονται και εισάγονται κατευθείαν στη βάση με τα στοιχεία του κάθε ασθενούς. Σε πραγματικό χρόνο έχουν όμως τη δυνατότητα και ειδικευόμενοι ή ειδικευμένοι γιατροί να παρακολουθούν από το κτίριο της Πλουτάρχου επεμβάσεις που διενεργούνται από τους ειδικούς της Νευροχειρουργικής Κλινικής του Ευαγγελισμού. Προς γνώσιν και\u0026hellip; συμμόρφωσιν με τις νέες εξελιγμένες τεχνικές και τα δεδομένα.\nΕκτός από αυτή τη γενική βάση δεδομένων υπάρχουν όμως και εξειδικευμένες που αφορούν διαφορετικές παθήσεις και συγκεκριμένα την επιληψία, τη νόσο του Πάρκινσον, τις δυστονίες, τη σπαστικότητα και τον χρόνιο πόνο. Σύμφωνα μάλιστα με τον κ. Σακά, η ειδική βάση για την επιληψία που ονομάζεται ΕΡΙLDΑ- είναι μία από τις πιο εξελιγμένες διεθνώς-, η οποία έχει δημιουργηθεί σε συνεργασία με το Τμήμα Βιοϊατρικής του Εθνικού Μετσόβιου Πολυτεχνείου, φέρνει τους έλληνες ειδικούς στην πρωτοπορία σε ό,τι αφορά μια πάθηση που «πλήττει» χιλιάδες Ελληνες. Η αναλυτική αυτή καταγραφή των νευρολογικών παθήσεων επιτρέπει όχι μόνο την καλύτερη αντιμετώπιση του κάθε ασθενούς με θεραπείες «κομμένες και ραμμένες» στα μέτρα του, αλλά την ίδια στιγμή παρέχει πλούσιο υλικό που μπορεί να διαμορφώσει μια ολοκληρωμένη, για πρώτη φορά, εικόνα σχετικά με τις συγκεκριμένες ασθένειες στη χώρα μας.\nΤο Άρθρο στην Εφημερίδα το ΒΗΜΑ It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   About NeuroHEALIS software NeuroHEALIS was the precursor of MEDILIG, a health information management system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use. NeuroHEALIS was also functional inside the operating room to capture video and to record operative details.\nΤο πληροφοριακό σύστημα NeuroHEALIS υλοποιήθηκε στην Νευροχειρουργική κλινική του Πανεπιστημίου Αθηνών στο θεραπευτήριο \u0026ldquo;Ο Ευαγγελισμός\u0026rdquo; κατά τα έτη 2006-2009. Ο ηλεκτρονικός φάκελος ασθενούς που λειτούργησε στην περιόδο αυτή, ήταν ένα από τα υποσυστήματα του NeuroHEALIS. Αξίζει να σημειωθεί ότι το NeuroHEALIS ήταν ίσως το πρώτο πληροφοριακό σύστημα στο νοσοκομείο με πλήρη ιατρικό φάκελο ασθενούς που σχεδιάστηκε σε συνεργασία με ιατρούς και που εντάχτηκε πλήρως στην ροή λειτουργίας της κλινικής. Άλλα υποσυστήματα του NeuroHEALIS ήταν οι ειδικές βάσεις δεδομένων για ασθένειες όπως το Parkinson και η Σπαστικότητα. Βασισμένο στο NeuroHEALIS είναι το MEDILIG.\n","date":1196380800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597449600,"objectID":"f9f7064f35636edb71ee32b0f44283c4","permalink":"https://healis.eu/en/publication/20171130/","publishdate":"2007-11-30T00:00:00Z","relpermalink":"/en/publication/20171130/","section":"publication","summary":"Άρθρο της Θεοδώρας Τσώλη στο ΒΗΜΑ την Παρασκευή 30 Νοεμβρίου του 2007 - Αποσπάσματα αναφορικά με τη λειτουργία του Ηλεκτρονικού Φακέλου Ασθενούς και των ειδικών Βάσεων Δεδομένων για νευρολογικές παθήσεις στην Νευροχειρουργική κλινική του Πανεπιστημίου Αθηνών στο θεραπευτήριο \\\"Ο Ευαγγελισμός\\\"","tags":["Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"Οι Νέες Τεχνολογίες στην Υπηρεσία των Ελλήνων Νευροχειρουργών","type":"publication"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Table of Contents  Summary Brochure System Architecture and Components  Electronic Medical Record Spasticity Database Parkinson Database Dystonia Database   System Performance Publications \u0026amp; Presentations  In English In Greek   Screen-capture Demo  Introduction Part 1 Part 2 Part 3 Part 4     Summary NeuroHEALIS was the precursor of MEDILIG, a health information system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use.\nBrochure Download the brochure (.pptx) file\n System Architecture and Components Software Design and Development - Athanassios I. Hatzis\nThe components of NeuroHEALIS system are:\nElectronic Medical Record Scientific content and Business Logic Design - Prof. George Stranjalis (MD)           \nSpasticity Database Scientific content and Business Logic Design - Vassiliki Konofaou, (MD)    \nParkinson Database Scientific content and Business Logic Design - Marios Themistokleous, (MD)      \nDystonia Database Scientific content and Business Logic Design - Lampis Stavrinou, (MD)       \nSystem Performance During NeuroHEALIS pilot study, 2007-2008, we monitored closely the data entry procedure. In the case of stasticity database we observed a 200% increase on data completion and quality. This was achieved thanks to automation of reports and measurement of several indexes such as percentage of completion on database fields, percentage of data entered by each user, and frequence and duration of follow-up measurements (see spasticity study). Results were presented on the 7th International Conference on Information Communication Technologies in Health, (ICICTH 2009).\n  Publications \u0026amp; Presentations In English   A presentation entitled \u0026ldquo;NeuroHEALIS - A Neurosurgical Health Information System for Integration of Clinical Research and Clinical Care\u0026rdquo; presented on the 7th ICICTH Conference held at Samos, July 26 2009\n  A paper entitled \u0026ldquo;A Modern Neuro-Surgical Operating Room at Evangelismos Hospital\u0026rdquo; was presented on the \u0026ldquo;Data Mining in BioMedicine 2009 Conference - DMINBIO 2009\u0026rdquo; held in Athens Information Technology (AIT) at Paiania, Athens, May 7-8 2009\n  Based on the modern operating room at \u0026ldquo;Evangelismos\u0026rdquo; General Hospital Department of Neurosurgery organized two advanced training courses in the year 2008, \u0026ldquo;Stereotactic Techniques and Deep Brain Stimulation\u0026rdquo; and \u0026ldquo;Computer-guided Neurosurgical Navigation\u0026rdquo; to train European neurosurgeons. The minister of public health Dimitris Avramopoulos congratulated Prof. Sakas and his team for the successful outcome of their efforts.\n  In Greek   Ελεύθερη ανακοίνωση με τίτλο \u0026ldquo;Η συμβολή των Πολυμέσων στην Νευροχειρουργική Εκπαίδευση\u0026rdquo; που παρουσιάστηκε στο 22ο Πανελλήνιο Συνέδριο Νευροχειρουργικής στην Αθήνα το 2008. Η παρουσίαση δείχνει την υλοποίηση και εφαρμογή κατάλληλης υλικοτεχνικής υποδομής για την καταγραφή και ψηφιοποίηση της χειρουργικής επέμβασης, μετάδοση σε πραγματικό χρόνο και αρχειοθέτηση τμήματος αυτής σε ειδική βάση πολυμέσων.\n  Ελεύθερη ανακοίνωση με τίτλο \u0026ldquo;Η συμβολή της Ιατρικής Πληροφορικής στην Νευροχειρουργική\u0026rdquo; που παρουσιάστηκε στο 21ο Πανελλήνιο Συνέδριο Νευροχειρουργικής στη Ρόδο το 2007. Το δημοσίευμα αυτό είναι το πρώτο με εκτενή αναφορά στο έργο της Ιατρικής Πληροφορικής που επιτελέστηκε στην Νευροχειρουργική Κλινική στο Θεραπευτήριο \u0026ldquo;Ο Ευαγγελισμός\u0026rdquo;.\n  Αποσπάσματα από το άρθρο \u0026ldquo;Οι νέες τεχνολογίες στην υπηρεσία των Ελλήνων νευροχειρουργών\u0026rdquo; της δημοσιογράφου Θεοδώρας Τσώλη στο Βήμα, Παρασκευή 30 Νοεμβρίου 2007.\n  Screen-capture Demo Introduction   Part 1   Part 2   Part 3   Part 4   ","date":1179273600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1179273600,"objectID":"1f1e9f48ee24d4efa489cd51ce3baef0","permalink":"https://healis.eu/en/project/neurohealis/","publishdate":"2007-05-16T00:00:00Z","relpermalink":"/en/project/neurohealis/","section":"project","summary":"Neurosurgical EMR and clinical databases for parkinson, dystonia and spasticity with reports and checks for the validity and completion of records","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"NEUROHEALIS","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Health_information_technology"],"content":"Ελεύθερη Ανακοίνωση Η Συμβολή της Ιατρικής Πληροφορικής στην Νευροχειρουργική\nΧατζής Α. (1), Στράντζαλης Γ. (1,2), Μποβιάτσης Ε. (1,2), Γκατζώνης Σ. (2), Σδρόλιας Π. (2), Λουφαρδάκη Μ. (1), Γιαννακάκης Γ. (3), Τσιρογιάννης Γ. (3), Νικήτα Κ. (3), Σακάς Δ.Ε. (1,2)\n Ελληνικό Κέντρο Νευροχειρουργικής Έρευνας «Καθηγητής Πέτρος Σ. Κόκκαλης» Νευροχειρουργική Κλινική, Πανεπιστήμιο Αθηνών, Θεραπευτήριο «Ο Ευαγγελισμός» Εργαστήριο Βιοϊατρικής Προσομοίωσης, Εθνικό Μετσόβειο Πολυτεχνείο  Α. Σκοπός της μελέτης Περιγράφουμε την εφαρμογή λογισμικού για την συλλογή, διαχείριση, τυποποίηση και ανάλυση κλινικών δεδομένων της νευροχειρουργικής ειδικότητας με την υποστήριξη κατάλληλης υλικοτεχνικής υποδομής. Ο σχεδιασμός του λογισμικού έγινε σε στενή συνεργασία με νευροχειρουργούς και νευρολόγους και είχε ως σκοπό πέραν από την εύκολη χρήση του ως πρόγραμμα την ταυτόχρονη επεξεργασία ή πρόσβαση σε δεδομένα του ασθενούς από πολλούς χρήστες και από πολλά σημεία.\nΒ. Υλικό - Μέθοδος Η εισαγωγή των δεδομένων έγινε από χειρόγραφα και από άλλα έντυπα σε ηλεκτρονική μορφή με αυτόματη, ημιαυτόματη και χειρονακτική μέθοδο και αφορούσε όλες τις εισαγωγές από 1-1-1998. Εκτός από κείμενο σε ηλεκτρονική μορφή αποθηκεύσαμε απεικονιστικές εξετάσεις καθώς και φωτογραφίες και video από επέμβαση ασθενούς (σε επιλεγμένα περιστατικά). Ένα από τα κύρια θέματα στην καταχώρηση των στοιχείων ήταν και η αντιμετώπιση θεμάτων ασφάλειας των δεδομένων με κύριους άξονες την διαθεσιμότητα, την πιστοποίηση, την πρόσβαση σε λειτουργίες του προγράμματος καθώς και τη τροποποίηση, την εμπιστευτικότητα, και την ακεραιότητα των στοιχείων.\nΓ. Αποτελέσματα Η παρούσα προσπάθεια περιλαμβάνει την ηλεκτρονική αρχειοθέτηση 12000 εισαγωγών και 6500 επεμβάσεων καθώς και τη λειτουργία ειδικών βάσεων 70 ασθενών με επιληψία, 83 ασθενών με νόσο Parkinson και 110 ασθενών με σπαστικότητα.\nΔ. Συμπεράσματα Η οργάνωση της πληροφορίας που συλλέγουμε για τον ασθενή και την πάθησή του, συμβάλλει στην ταχύτητα ανάκτησης, στην ακρίβεια ενημέρωσης, στον έλεγχο ορθότητάς και στη δυνατότητα συλλογικής επεξεργασίας των στοιχείων.\nΠαρουσίαση It seems that your browser cannot display the PDF file; Please use this link  instead. Thanks!   Video   About NeuroHEALIS software Το πληροφοριακό σύστημα NeuroHEALIS υλοποιήθηκε στην Νευροχειρουργική κλινική του Πανεπιστημίου Αθηνών στο θεραπευτήριο \u0026ldquo;Ο Ευαγγελισμός\u0026rdquo; κατά τα έτη 2006-2009. Ο ηλεκτρονικός φάκελος ασθενούς που λειτούργησε στην περιόδο αυτή, ήταν ένα από τα υποσυστήματα του NeuroHEALIS. Αξίζει να σημειωθεί ότι το NeuroHEALIS ήταν ίσως το πρώτο πληροφοριακό σύστημα στο νοσοκομείο με πλήρη ιατρικό φάκελο ασθενούς που σχεδιάστηκε σε συνεργασία με ιατρούς και που εντάχτηκε πλήρως στην ροή λειτουργίας της κλινικής. Άλλα υποσυστήματα του NeuroHEALIS ήταν οι ειδικές βάσεις δεδομένων για ασθένειες όπως το Parkinson και η Σπαστικότητα. Βασισμένο στο NeuroHEALIS είναι το MEDILIG.\nNeuroHEALIS was the precursor of MEDILIG, a health information management system that was developed for the Department of Neurosurgery in the University of Athens situated at “Evangelismos” General Hospital. NeuroHEALIS was fully operational during the period from 2006 to 2009 with several publications, presentations and pilot studies that were based on its use. NeuroHEALIS was also functional inside the operating room to capture video and to record operative details.\n","date":1179273600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597449600,"objectID":"dc1a0f3e2831eaf5d18ff82105e989cb","permalink":"https://healis.eu/en/talk/enxe_21st/","publishdate":"2007-05-16T00:00:00Z","relpermalink":"/en/talk/enxe_21st/","section":"talk","summary":"Ελεύθερη Ανακοίνωση Η Συμβολή της Ιατρικής Πληροφορικής στην Νευροχειρουργική\nΧατζής Α. (1), Στράντζαλης Γ. (1,2), Μποβιάτσης Ε. (1,2), Γκατζώνης Σ. (2), Σδρόλιας Π. (2), Λουφαρδάκη Μ. (1), Γιαννακάκης Γ. (3), Τσιρογιάννης Γ. (3), Νικήτα Κ. (3), Σακάς Δ.Ε. (1,2)\n Ελληνικό Κέντρο Νευροχειρουργικής Έρευνας «Καθηγητής Πέτρος Σ. Κόκκαλης» Νευροχειρουργική Κλινική, Πανεπιστήμιο Αθηνών, Θεραπευτήριο «Ο Ευαγγελισμός» Εργαστήριο Βιοϊατρικής Προσομοίωσης, Εθνικό Μετσόβειο Πολυτεχνείο  Α. Σκοπός της μελέτης Περιγράφουμε την εφαρμογή λογισμικού για την συλλογή, διαχείριση, τυποποίηση και ανάλυση κλινικών δεδομένων της νευροχειρουργικής ειδικότητας με την υποστήριξη κατάλληλης υλικοτεχνικής υποδομής.","tags":["Medical_software","Health_care","Health_information_management","Health_information_technology","Electronic_health_record","Electronic_medical_record"],"title":"Η Συμβολή της Ιατρικής Πληροφορικής στην Νευροχειρουργική","type":"talk"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Augmentative_and_alternative_communication"],"content":"Table of Contents  Summary STAPTK in OLP  Background OPTACIA Kinematic Maps Publication Demonstration Visual Feedback Main Characteristics OPTACIA Main Tasks Future Directions and Problems to solve Technical Specifications Credit   Publications  Abstract Presentation     Summary STAPTk software was developed in the Speech and Hearing group, at the department of Computer Science, University of Sheffield. It is the epitome of the research work of Athanassios Hatzis, nine years in total, during his MSc, PhD and two funded research projects STARDUST, NHS-NEAT 275K€ UK project, and OLP12, FP5-Quality of Life 2.67M€ EC project.\n Past Research Projects 1994-2004   Those days Athanassios was a central figure in the department, he has written most of the code for STARDUST and OLP and also acted as the initiator and a group leader of software development for the two funded projects.\nSTAPTK in OLP Background One of the main components of the OLP system is the final release of STAPTK (OPTACIA). OPTACIA was first published in WISP 2001 conference and is strongly based on the software that Athanassios Hatzis developed during his PhD thesis as well as the software developed during the STARDUST project. This final version is linked to the other components of the OLP system by executing OPTACIA through a command-line interface.\nOPTACIA Kinematic Maps An OPTACIA Kinematic map uses a two-dimensional ANN-trained map as a visual metaphor for isolated sounds and simple utterances. We describe the map as \u0026ldquo;kinematic\u0026rdquo; (i.e. relating to movement) because its visualization technique correlates strongly with articulatory movement during speech production. Visualization of speech sounds is instantaneous, the client can vary the articulators in response to on-screen visual feedback. Speech therapy is based on the evaluation of the quality of speech production and accompanied characteristics i.e. consistency and intelligibility. OPTACIA is meant to assist speech therapists in that role.\nPublication Testing a New Method for Training Fricatives using Visual Maps in the Ortho-Logo-Paedia Project (OLP)\nThis paper concentrates on therapy based on real-time audio-visual feedback of client’s speech and presents results from building and testing visual maps for training hearing-impaired clients using the OPTACIA component. OPTACIA was developed from the Optical Logo-Therapy OLT (Hatzis, 1999; Hatzis and Green, 2001). OPTACIA is based on three basic, well-founded treatment principles: visuomotor tracking, visual contrast, and visual reinforcement. Visuomotor tracking (Ziegler, Vogel, Teiwes, and Ahrndt, 1997) is a special case of biofeedback where some dynamic physical measure of performance is portrayed visually in real-time.\nDemonstration   Real-time audio visual animation with a sprite on the map     Real-time audio visual animation and Waveform display on wavesurfer     Visual Feedback Main Characteristics Speech Therapy requirements are translated to visual feedback requirements and therefore the computer-based speech training aid, in our case OPTACIA, has to demonstrate visual consistency (phonetic map areas, and speech trajectories), visual contrast of the target areas of the map, and visual accuracy on the production of speech. In OPTACIA we achieved this with target markers, each target-marker has an area associated around it that is used for scoring purposes. The target markers’ functionality make them very useful because speech therapist can set them to fine-tune OPTACIA map with intermediate targets and establish short-term and long-term speech production targets for patients with various speech disorders.\nOPTACIA Main Tasks  Record speech data Transcribe speech data Build map  select speech data design layout train map   Explore layout of the map Monitor/Measure performance on the map  Future Directions and Problems to solve Researchers interested in the technique developed in OPTACIA should consider the following issues that have been tackled in the present software :\n Acoustic to articulation mapping Synchronizing real-time audio-visual playback and recording Definition and statistical modeling of speech targets Automation of segmentation/labelling problem Automation of training maps The silence/speech detection problem Definition of metrics  Distance from target Acceptance/Rejection Consistency Intelligibility   Visualization of metrics Mapping/Visualisation of unseen speech input Mapping/Visualisation of non-continuous sounds  Technical Specifications STAPTk is based on open-source software but unfortunately University of Sheffield decided not to make it public.\n  Front end GUI in Tcl/Tk and incr-Tcl/incr-Tk\n  Back end speech and graphics processing in C\n  Speech processing with Snack and Wavesurfer (Kåre Sjölander and Jonas Beskow, 2003)\n  Speech detection algorithms, MGR endpointer (Bruce T. Lowerre, Public domain, 1995)\n  Graphics processing MATLAB Run-Time-Libraries\n  Credit Credit is given to the following people that contributed in the development of STAPTk.\nDomain expertise contributors   Phil Green (Speech Technology)\n  Mark Hawley (Assistive Technology)\n  Pam Enderby (Speech Pathology)\n  Sara Howard (Phonetics)\n  Rebecca Palmer (Speech Therapy)\n  Mark Parker (Speech Therapy)\n  Kate Woods (Speech Therapy)\n  David House (Speech Phonology)\n  Anne-Marie Öster (Speech Pathology)\n  Code contributors   Vincent Wan (ANN training)\n  James Carmichael (GUIs, STARDUST)\n  Stuart Cunningham (STARDUST-Command Sequence Recognition, Speech Training)\n  Kåre Sjölander (Synchronization of real-time audio-visual feedback with Snack-Wavesurfer)\n  Publications The paper titled \u0026ldquo;An Integrated Toolkit Deploying Speech Technology for Computer Based Speech Training with Application to Dysarthric Speakers\u0026rdquo; summarizes the development and application of STAPTk.\nAbstract Computer based speech training systems aim to provide the client with customised tools for improving articulation based on audio-visual stimuli and feedback. They require the integration of various components of speech technology, such as speech recognition and transcription tools, and a database management system which supports multiple on-the-fly configurations of the speech training application. This paper describes the requirements and development of STAPTk from the point of view of developers, clinicians, and clients in the domain of speech training for severely dysarthric speakers. Preliminary results from an extended field trial are presented.\nPresentation Eurospeech 2003 – STAPTk (ppsx)\n","date":1072915200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1072915200,"objectID":"13f53a7d880984ec211a4c362dd3c73d","permalink":"https://healis.eu/en/project/staptk/","publishdate":"2004-01-01T00:00:00Z","relpermalink":"/en/project/staptk/","section":"project","summary":"Computer-based speech training system for improving articulation based on real-time audio-visual feedback and utterances evaluation.","tags":["audio-visual feedback","Articulatory_phonetics","Speech_technology","clinical applications","Assistive_technology","Augmentative_and_alternative_communication"],"title":"STAPTK","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Assistive_technology"],"content":"Two funded research projects: OLP FP5-Quality of Life 2.67M€ EC project and STARDUST NHS-NEAT 275K€ UK project were based on Athanassios' Optical Logo-Therapy, PhD thesis.\n Past Research Projects 1994-2004   This is a review of the software STAPTK that was developed for the STARDUST project.\nSTAPTK in STARDUST STARDUST NHS project (2000-2003) integrates computer based visual-feedback for speech training to assist dysarthric speakers to improve the consistency of their utterances, and speech recognition of commands in sequence to control an environmental device.\n In an attempt to reduce speech production inconsistency and hence enhance the success of voice-driven assistive technology, the ASR component in STAPTk is closely coupled with therapy - Eurospeech 2003, Phil Green et al.\n STARDUST Aims  Provide visual training aids to help improve consistency and/or intelligibility of severely dysarthric speakers Use training sessions to procude data for ASR Build small vocabulary recognisers for dysarthric clients Use the recognisers in assistive technology  Dysarthric ASR Problems  Small training corpus Large deviance from normal Fluency problems Limited phonetic contrast Inconsistent production  STARDUST Demonstration   Command Sequence     Consistency Training     Eurospeech 2003 Presentation Eurospeech 2003 – Automatic Speech Recognition with Sparse Training Data for Dysarthric Speakers (ppsx)\n","date":1009843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1009843200,"objectID":"ab2035fee783e054037609b7a7b58770","permalink":"https://healis.eu/en/project/stardust/","publishdate":"2002-01-01T00:00:00Z","relpermalink":"/en/project/stardust/","section":"project","summary":"NHS project assists dysarthric speakers to improve the consistency of their spoken commands in order to control a speech driven environmental device.","tags":["audio-visual feedback","Articulatory_phonetics","Speech_technology","clinical applications","Assistive_technology","Augmentative_and_alternative_communication"],"title":"STARDUST","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Assistive_technology"],"content":"Table of Contents  Summary PhD Thesis Summary  OLT Therapy Sesssion Presentations   OLTk Introduction  OLTk Speech Training Principles OLTk Design Aspects OLTk Technical Specifications OLTk Interface     Summary Two funded research projects: OLP FP5-Quality of Life 2.67M€ EC project and STARDUST NHS-NEAT 275K€ UK project were based on Athanassios' Optical Logo-Therapy, PhD thesis.\n Past Research Projects 1994-2004   Here is a review of the OLTk software that was developed during his PhD.\nPhD Thesis Summary Optical Logo-Therapy (OLT) is about a real-time computer-based audio-visual feedback method that can used in speech training. With this method speech acoustics are transformed into visual events on a two-dimensional display called a ‘phonetic map’. Phonetic maps are created by training a neural network to associate acoustic input vectors with points in a two-dimensional space. The target points on the map can be chosen by the teacher to reflect the relationship between articulatory gestures and acoustics. OLT thus helps the client to become aware of, and to correct, errors in articulation. Phonetic maps can be tailored to different training problems, and to the needs of individual clients. We formulate the theoretical principles and practical requirements for OLT and we describe the design and implementation of a software application, OLTk. We report on the successful application of OLT in two areas: speech therapy and second language learning.\n PhD Thesis In Acrobat pdf format  OLT Therapy Sesssion   Presentations  1996 Insitute of Acoustics (IOA) Poster 1999 Phonetics Teaching \u0026amp; Learning Conference (PTLC) Poster 2001 Workshop on Innovation in Speech Processing (WISP) Poster    OLTk Introduction OLTk provides on-line, real time audio and visual feedback of articulation by performing acoustic signal analysis. It indicates how closely a speaker’s attempt approximates to the normal or target production of specific speech. The clinician can adjust settings to provide visual and/or auditory reinforcement of the client’s attempts to correctly produce the target. OLT has also several tools that the user can easily handle to study, and examine the articulation of a certain utterance or part of it.\nOLTk Speech Training Principles   Visuomotor tracking\n  Visual contrast\n  Visual reinforcement\n  OLTk Design Aspects   Real time audio and visual animated feedback in the form of a game\n  Qualitative and quantitative results\n  Rejection/Acceptance mechanisms to provide accurate feedback\n  Speaker comparison and trial error correction\n  Simultaneous isolated sounds and utterance training\n  Build maps based on best user training performance\n  Specialised phonetic maps tailored to the needs of the client (speech disorder, age, nationality)\n  Real time recording/playback of speech utterances and also playback of speech frames\n  OLTk Technical Specifications Final Software Version Ver.3.19 – 20th September 1998\n   Hardware/Software Specifications     Machine Toshiba Tecra 500CS with Intel Pentium 120MHz, 48MB RAM   Operating System Linux 2.0.3   Programming Language GNU C++   Graphics Library EZWGL V1.39   Data Types Library LEDA 3.3.1   Display Sound Files SFS 3.0 and OGI Speech Tools   Sound processing HTK V1.0     Those days real-time speech processing and visualization on a laptop was a challenging problem due to hardware limitations. The price of that laptop was 3000€ and my parents paid the invoice.   OLTk Interface OLTk graphical user interface is split into three parts : the menu bar, the graphics canvas, and the status bar.\nThe phone classes and the sounds represented in the following map are:\n i (violet) as in the word see u (yellow) as in the word shoe o (red) as in the word bought sh (blue) as in the word shore s (green) as in the word suit z (white) as in the word zoo   OLTK GUI   Each map created consists of a number of 9D vectors. Each vector is the output of the cepstral analysis on a 10msec frame of speech. Each frame of speech is labeled according to the phone it represents. We can group phones according to the characteristic sound they represent on the basis of different place and manner of articulation. The different classes of phones can form two dimensional clusters of points depending on the method of mapping. The idea of this 2D sound mapping is to associate groups of similar sounds to neighboring areas on the map. Thus a map consists of a number of clusters and those in turn consist of a number of frames of speech each one associated with a phone label. These two groupings, the clusters and the phones, we call elements of the map and the map itself we call a phonetic map.\nThe above map has been created from 18 children, 9 male and 9 female, age 5-7, all English native speakers recording isolated sounds. The map has a total of 14400 samples and contains six different classes of phones, 3 vowels and 3 fricatives.\nSettings The behavior and the control of the various components of OLT and everything that is an integral part of that program depends upon the \u0026ldquo;Settings\u0026rdquo; pull down menu. All of them are in the form of radio buttons style. By pressing any of these buttons with the mouse the user can either activate or deactivate a certain feature or display or hide other essential components and control windows of OLT. The settings appear in the pull down menu as follows:\n Show Cluster Labels Recording/Playback Types Recording/Playback Parameters Select Samples Animation Types Activate Extracted Buffer Mapping Techniques Map Appearence  Recording/Playback Parameters This radio button can show or hide the recording/playback parameters window. The modification of these parameters is achieved through a set of sliding bars. These include:\n  Duration: The total duration of recording in secs. The radio button existing next to the label of the parameter has to be activated in order to apply a time limit. If the radio button is not checked then you can record for unlimited time.\n  Context: The context width or the number of frames ahead and behind a certain frame. One frame is equal to 10msec. This is used in conjuction with the Playback Frames Sequence tool to define the limits of the part of the utterance to be extracted.\n  Averaging: Average the 2D positions every N number of frames. Set a relatively high value when trying isolated sounds and a relatively low value when trying small utterances. The higher the value the less the flickering and the smoother the animation of sprites.\n  Threshold: Value to determine whether to accept or reject a certain frame of speech. The higher it is, the more similar a new sound should be with those that make up the phonetic map in order to be accepted. On the contrary, if we lower the threshold slide bar the less strict we become on the acceptance of a sound. The higher is the value the more it rejects the less it accepts, the lower is the value the more it accepts the less it rejects. This parameter is used in conjuction with the \u0026ldquo;-Threshold\u0026rdquo; field of the cluster information to tune the threshold of the specific phone cluster according to our needs.\n  Parameters like \u0026ldquo;Averaging\u0026rdquo; and \u0026ldquo;Threshold\u0026rdquo; have been designed to work interactively with the \u0026ldquo;Real Time\u0026rdquo; recording and playback.\nAnimation Types These radio buttons define the various types of animation that are used to represent the appropriate visual feedback:\n  Animate Sprite: This is the default setting for the animation type. A plane sprite is flying to positions that are related with specific sounds. If the sound produced is quite dissimilar of those existing on our phonetic map the plane disappears from the screen and the frowning of a clown’s face is used to indicate the rejection. In case of acceptance the plane is flying and the clown appears with a happy face. Silence state is also represented with a different plane image that shows it sleeping.\n  Draw Points: If we activate that type of animation we can see the exact 2D positions for each frame of speech or for the average during our speech production. The hits are represented with black filled rectrangles.\n  Draw Trajectory: This is the third type of animation we can select. A visual feedback representation of the sound can be obtained by plotting with filled rectangles and connecting with a line the 2D positions of successive speech frames. As new sounds are produced the old positions are deleted and the new positions are appended. This gives the impression of a moving snake.\n  Mapping Techniques These are the techniques we developed for the mapping of the sounds from 9D to 2D:\n  ND TO 2D: A neural network (NN) has been trained to map all the frames of a particular sound to a certain fixed 2D position on our phonetic map. Similar sounds with those that our NN has been trained with are mapped to neighbooring positions.\n  Central Force: The classification results of a speech frame for each one of the phone classes together with the 2D distances from the fixed centroids of each phone cluster are used to determine the 2D position of the speech frame on the map.\n   Athanassios at SPANDH lab with colleagues   ","date":944006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":944006400,"objectID":"c29314a46a23c2e2be3dcc828cd434bd","permalink":"https://healis.eu/en/project/oltk/","publishdate":"1999-12-01T00:00:00Z","relpermalink":"/en/project/oltk/","section":"project","summary":"PhD project, real-time, computer-based, audio-visual feedback training method for articulation","tags":["audio-visual feedback","Articulatory_phonetics","Speech_technology","clinical applications","Assistive_technology","Augmentative_and_alternative_communication"],"title":"OLT","type":"project"},{"authors":["Athanassios I. Hatzis, PhD"],"categories":["Assistive_technology"],"content":"Summary This MSc project focuses on place of articulation for a hearing impaired person. Most of the work is based on building an efficient and attractive user interface to explore the use of Kohonen’s Self-Organising-Maps in visualising the phonemic trajectory. Several experiments were done with a hearing-impaired person and normal speakers and the results were analysed and visualised with the VAHISOM program.\nIn parallel with the objectives of that project the user of that software can also explore the use of Kohonen’s Self-Organising-Maps and measure how well they can fit to a similar problem. Thus this makes also VAHISOM a useful tutorial aid.\nVAHISOM Software The VAHISOM program is a graphical user interface for the SOM_PAK software. It is implemented in C programming language using a graphics library in C (libsx) and it runs on Unix systems.\nThe provided buttons and the design of the display area, see picture above, allow the user to handle efficiently the testing of an input on the map and visualize effectively the clustering and the phonemic trajectory (see picture below). The results from the classification are automatically produced from the program in a very analytical form and the user can derive important conclusions.\n VAHISOM comparison of two speech trajectories   ","date":801964800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":801964800,"objectID":"0601f9113cf35373697da8962b9a0b8c","permalink":"https://healis.eu/en/project/vahisom/","publishdate":"1995-06-01T00:00:00Z","relpermalink":"/en/project/vahisom/","section":"project","summary":"MSc dissertation project exploring the use of Kohonen’s Self-Organising-Maps in visualising the phonemic trajectory","tags":["audio-visual feedback","Articulatory_phonetics","Speech_technology","clinical applications","Assistive_technology","Augmentative_and_alternative_communication"],"title":"VAHISOM","type":"project"}]